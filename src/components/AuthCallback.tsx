// üìÑ src/components/AuthCallback.tsx
import React, { useEffect, useMemo, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { supabase } from '../lib/supabase';

declare global {
  interface Window {
    ethereum?: any;
  }
}

const PINK = '#ffcdd6';
const BLACK = '#000000';
const BSC_CHAIN_ID_HEX = '0x38'; // 56

function parseHashParams() {
  const hash = window.location.hash.startsWith('#')
    ? window.location.hash.slice(1)
    : window.location.hash;
  const sp = new URLSearchParams(hash);
  const params: Record<string, string> = {};
  sp.forEach((v, k) => (params[k] = v));
  return params;
}

function isMobileUA() {
  const ua = navigator.userAgent || '';
  return /Android|iPhone|iPad|iPod|Mobile/i.test(ua);
}

function isMetaMaskInApp() {
  const ua = navigator.userAgent || '';
  return /MetaMaskMobile/i.test(ua) || (window.ethereum && window.ethereum.isMetaMask);
}

function isInAppWebView() {
  const ua = navigator.userAgent || '';
  // –ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –≤–±—É–¥–æ–≤–∞–Ω—ñ –±—Ä–∞—É–∑–µ—Ä–∏, –¥–µ –Ω–µ–º–∞—î web3-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —ñ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∞—Ü—é—é—Ç—å —Ä–µ–¥—ñ—Ä–µ–∫—Ç–∏
  return /FBAN|FBAV|FB_IAB|Instagram|Line|WeChat|MiuiBrowser|GSA|Gmail|Twitter|VkIntent|wv/i.test(ua);
}

async function ensureBSC() {
  if (!window.ethereum) return;
  try {
    await window.ethereum.request({
      method: 'wallet_switchEthereumChain',
      params: [{ chainId: BSC_CHAIN_ID_HEX }],
    });
  } catch (err: any) {
    // –Ø–∫—â–æ –º–µ—Ä–µ–∂—ñ –Ω–µ–º–∞—î ‚Äî –¥–æ–¥–∞—î–º–æ
    if (err?.code === 4902) {
      await window.ethereum.request({
        method: 'wallet_addEthereumChain',
        params: [
          {
            chainId: BSC_CHAIN_ID_HEX,
            chainName: 'BNB Smart Chain',
            nativeCurrency: { name: 'BNB', symbol: 'BNB', decimals: 18 },
            rpcUrls: ['https://bsc-dataseed.binance.org/'],
            blockExplorerUrls: ['https://bscscan.com'],
          },
        ],
      });
    }
  }
}

export default function AuthCallback() {
  const nav = useNavigate();
  const location = useLocation();

  const [loading, setLoading] = useState(true);
  const [interstitial, setInterstitial] = useState<{
    show: boolean;
    deepLink: string;
    chromeIntent: string | null;
    plainUrl: string;
    isAndroid: boolean;
    isIOS: boolean;
  }>({
    show: false,
    deepLink: '',
    chromeIntent: null,
    plainUrl: '',
    isAndroid: false,
    isIOS: false,
  });

  const fullURL = useMemo(() => {
    // –ü–æ–≤–Ω–∏–π –ø–æ—Ç–æ—á–Ω–∏–π URL (–≤–∫–ª—é—á–∞—î —Ç–æ–∫–µ–Ω–∏ —É hash) ‚Äî –ø–µ—Ä–µ–¥–∞–º–æ –≤ MetaMask dapp-deeplink
    const origin = window.location.origin.replace(/^https?:\/\//, '');
    const path = window.location.pathname + window.location.search + window.location.hash;
    return { origin, path, absolute: window.location.href };
  }, [location]);

  useEffect(() => {
    (async () => {
      const hashParams = parseHashParams();
      const urlSearch = new URLSearchParams(window.location.search);
      const hasMagicTokens =
        !!hashParams['access_token'] || !!hashParams['refresh_token'] || !!urlSearch.get('code');

      const ua = navigator.userAgent || '';
      const isAndroid = /Android/i.test(ua);
      const isIOS = /iPhone|iPad|iPod/i.test(ua);

      // –Ø–∫—â–æ –º–∏ –≤–±—É–¥–æ–≤–∞–Ω—ñ (Gmail/FB/IG/TG...), —ñ —Ü–µ –ø–µ—Ä–µ—Ö—ñ–¥ –∑ magic-link (—î —Ç–æ–∫–µ–Ω–∏),
      // –±–ª–æ–∫—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ —Ç–∞ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ ¬´—á–∏—Å—Ç–æ¬ª
      if (isInAppWebView() && hasMagicTokens && !isMetaMaskInApp()) {
        const scheme = window.location.protocol.replace(':', '');
        const chromeIntent = isAndroid
          ? `intent://${fullURL.origin}${fullURL.path}#Intent;scheme=${scheme};package=com.android.chrome;end`
          : null;

        const deepLink = `https://metamask.app.link/dapp/${fullURL.origin}${fullURL.path}`;
        setInterstitial({
          show: true,
          deepLink,
          chromeIntent,
          plainUrl: fullURL.absolute,
          isAndroid,
          isIOS,
        });
        setLoading(false);
        return;
      }

      // 1) –û–±–º—ñ–Ω –∑–∞ code (PKCE)
      const code = urlSearch.get('code');
      if (code) {
        try {
          await supabase.auth.exchangeCodeForSession(code);
          // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ ?code —ñ–∑ URL
          const url = new URL(window.location.href);
          url.searchParams.delete('code');
          window.history.replaceState({}, '', url.toString());
        } catch (e) {
          console.error('exchangeCodeForSession error:', e);
        }
      }

      // 2) –ü—Ä—è–º–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –∑–∞ hash-—Ç–æ–∫–µ–Ω–∞–º–∏
      if (hashParams['access_token'] && hashParams['refresh_token']) {
        try {
          await supabase.auth.setSession({
            access_token: hashParams['access_token'],
            refresh_token: hashParams['refresh_token'],
          });
          // –ß–∏—Å—Ç–∏–º–æ hash
          window.history.replaceState({}, document.title, window.location.pathname + window.location.search);
        } catch (e) {
          console.error('setSession error:', e);
        }
      }

      // 3) –Ø–∫—â–æ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è ‚Äî –æ–∫
      const { data: sess } = await supabase.auth.getSession();
      if (!sess.session) {
        // –ù–µ–º–∞—î —Å–µ—Å—ñ—ó ‚Äî –ø–æ–∫–∞–∂–µ–º–æ –º‚Äô—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –Ω–∞ /register
        setLoading(false);
        // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–±–∞—á–∏–≤ –µ–∫—Ä–∞–Ω —ñ –Ω–µ ¬´–º–∏–≥–∞–ª–æ¬ª
        setTimeout(() => nav('/register'), 800);
        return;
      }

      // 4) –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –º–µ—Ä–µ–∂—É (BSC) —Ç–∞ –ø–µ—Ä–µ–π–¥–µ–º–æ –Ω–∞ –∫–∞—Ä—Ç—É
      try {
        await ensureBSC();
      } catch (e) {
        // –Ω–µ—Ö–∞–π –Ω–µ –±–ª–æ–∫—É—î –ø–µ—Ä–µ—Ö—ñ–¥
      }

      setLoading(false);
      nav('/map', { replace: true });
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  if (interstitial.show) {
    return (
      <div style={styles.wrap}>
        <div style={styles.card}>
          <div style={styles.logo}>B<span style={{ color: BLACK }}>M</span>B</div>
          <h2 style={styles.title}>–í—ñ–¥–∫—Ä–∏–π ¬´—á–∏—Å—Ç–æ¬ª, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—Ö—ñ–¥</h2>
          <p style={styles.text}>
            –ó–∞—Ä–∞–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ —É –≤–±—É–¥–æ–≤–∞–Ω–æ–º—É –ø–µ—Ä–µ–≥–ª—è–¥–∞—á—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ Gmail/Instagram). –¢—É—Ç MetaMask –Ω–µ –ø—Ä–∞—Ü—é—î.
            –û–±–µ—Ä–∏ —Å–ø–æ—Å—ñ–± –Ω–∏–∂—á–µ:
          </p>

          {interstitial.isAndroid && interstitial.chromeIntent && (
            <a href={interstitial.chromeIntent} style={styles.primaryBtn}>
              –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Chrome
            </a>
          )}

          {!interstitial.isAndroid && (
            <a href={interstitial.plainUrl} target="_blank" rel="noopener noreferrer" style={styles.primaryBtn}>
              –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ (–Ω–æ–≤–∞ –≤–∫–ª–∞–¥–∫–∞)
            </a>
          )}

          <a href={interstitial.deepLink} style={styles.secondaryBtn}>
            –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ MetaMask (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)
          </a>

          <details style={styles.details}>
            <summary>–ê–±–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤—Ä—É—á–Ω—É</summary>
            <div style={{ marginTop: 8 }}>
              <code style={styles.codeBox}>{interstitial.plainUrl}</code>
              <button
                style={styles.copyBtn}
                onClick={async () => {
                  try {
                    await navigator.clipboard.writeText(interstitial.plainUrl);
                    alert('–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ. –í—Å—Ç–∞–≤ —É Safari/Chrome/MetaMask.');
                  } catch {
                    alert('–°–∫–æ–ø—ñ—é–π –≤—Ä—É—á–Ω—É: –≤–∏–¥—ñ–ª–∏ —Ç–µ–∫—Å—Ç —ñ –Ω–∞—Ç–∏—Å–Ω–∏ Copy.');
                  }
                }}
              >
                –ö–æ–ø—ñ—é–≤–∞—Ç–∏
              </button>
            </div>
            {interstitial.isIOS && (
              <p style={styles.hint}>
                iOS: –Ω–∞—Ç–∏—Å–Ω–∏ <strong>‚Ä¢‚Ä¢‚Ä¢</strong> —É –ø—Ä–∞–≤–æ–º—É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç—ñ —Ç–∞ –æ–±–µ—Ä–∏ <strong>Open in Safari</strong>.
              </p>
            )}
          </details>

          <p style={styles.footerNote}>
            –ü—ñ—Å–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É —á–∏—Å—Ç–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ/MetaMask –≤—Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∞ –¥–∞–ª—ñ —è –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é –¥–æ–¥–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É BMB
            –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω üì≤
          </p>
        </div>
      </div>
    );
  }

  return (
    <div style={styles.loadingWrap}>
      <div style={styles.spinner} />
      <div style={{ marginTop: 12, color: '#666' }}>–ó–∞–≤–µ—Ä—à—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é‚Ä¶</div>
    </div>
  );
}

const styles: Record<string, React.CSSProperties> = {
  wrap: {
    minHeight: '100vh',
    background: '#f7f7f9',
    display: 'grid',
    placeItems: 'center',
    padding: 16,
  },
  card: {
    maxWidth: 560,
    width: '100%',
    background: '#fff',
    borderRadius: 16,
    boxShadow: '0 8px 30px rgba(0,0,0,0.08)',
    padding: 20,
  },
  logo: {
    width: 56,
    height: 56,
    borderRadius: 14,
    background: PINK,
    color: BLACK,
    display: 'grid',
    placeItems: 'center',
    fontWeight: 900,
    marginBottom: 8,
    userSelect: 'none',
  },
  title: {
    margin: '8px 0 6px',
    fontSize: 20,
  },
  text: {
    margin: '0 0 14px',
    color: '#444',
    lineHeight: 1.4,
  },
  primaryBtn: {
    display: 'block',
    width: '100%',
    textAlign: 'center',
    background: PINK,
    color: BLACK,
    border: 'none',
    padding: '12px 16px',
    borderRadius: 12,
    fontWeight: 700,
    textDecoration: 'none',
    marginBottom: 10,
  },
  secondaryBtn: {
    display: 'block',
    width: '100%',
    textAlign: 'center',
    background: '#fff',
    color: BLACK,
    border: `2px solid ${PINK}`,
    padding: '10px 16px',
    borderRadius: 12,
    fontWeight: 700,
    textDecoration: 'none',
    marginBottom: 6,
  },
  details: {
    marginTop: 10,
    fontSize: 14,
    color: '#444',
  },
  codeBox: {
    display: 'block',
    wordBreak: 'break-all',
    background: '#f3f3f6',
    borderRadius: 8,
    padding: 8,
    fontSize: 12,
  },
  copyBtn: {
    marginTop: 8,
    padding: '8px 12px',
    borderRadius: 10,
    border: `1px solid ${PINK}`,
    background: '#fff',
    fontWeight: 600,
  },
  hint: { marginTop: 6, color: '#666' },
  footerNote: {
    marginTop: 14,
    fontSize: 13,
    color: '#666',
  },
  loadingWrap: {
    minHeight: '100vh',
    display: 'grid',
    placeItems: 'center',
    background: '#fff',
  },
  spinner: {
    width: 28,
    height: 28,
    borderRadius: '50%',
    border: '3px solid #eee',
    borderTopColor: PINK,
    animation: 'spin 0.9s linear infinite',
  },
};

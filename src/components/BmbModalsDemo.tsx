import React, { useEffect, useState } from "react";

/**
 * BMBModal ‚Äî –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞ –º–æ–¥–∞–ª–∫–∞ Buy My Behavior
 * ‚ñ∏ –ù—ñ–∂–Ω–æ‚Äë—Ä–æ–∂–µ–≤–∏–π —Ñ–æ–Ω (#ffcdd6), –≤–µ–ª–∏–∫—ñ —Ä–∞–¥—ñ—É—Å–∏, —á–æ—Ä–Ω—ñ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∏
 * ‚ñ∏ –õ–µ–≥–∫—ñ –±—ñ–ª—ñ –∫–æ–ª–∞ (¬´–±—É–ª—å–±–∞—à–∫–∏¬ª) –Ω–∞ —Ñ–æ–Ω—ñ
 * ‚ñ∏ –û–∫–∞–Ω—Ç–æ–≤–∫–∞ –∫–∞—Ä—Ç–∫–∏ 3px –±—ñ–ª–∞; –∫–Ω–æ–ø–∫–∞ ‚Äî —á–æ—Ä–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
 */
function BMBModal({
  isOpen,
  onClose,
  title,
  subtitle,
  icon,
  actionLabel = "–î–æ–±—Ä–µ",
  onAction,
  noBackdropClose = false,
  hideClose = false,
  actionsSlot = null,
  wrapIcon = true,
  children,
}) {
  useEffect(() => {
    const onKey = (e) => e.key === "Escape" && onClose?.();
    if (isOpen) window.addEventListener("keydown", onKey);
    return () => window.removeEventListener("keydown", onKey);
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  return (
    <div
      className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 p-4 backdrop-blur-sm"
      onClick={() => !noBackdropClose && onClose?.()}
      role="presentation"
    >
      <div
        className="relative w-full max-w-xl rounded-3xl border-[3px] border-white bg-[#ffcdd6] px-6 py-7 text-center text-neutral-900 shadow-2xl"
        onClick={(e) => e.stopPropagation()}
        role="dialog"
        aria-modal="true"
      >
        {/* –ë—É–ª—å–±–∞—à–∫–∏ —Ñ–æ–Ω—É */}
        <div className="pointer-events-none absolute -left-10 -top-12 h-56 w-56 rounded-full bg-white/40 blur-[1px]" />
        <div className="pointer-events-none absolute -right-8 -bottom-10 h-56 w-56 rounded-full bg-white/35 blur-[1px]" />

        {/* –•—Ä–µ—Å—Ç–∏–∫ */}
        {!hideClose && (
          <button
            onClick={onClose}
            aria-label="–ó–∞–∫—Ä–∏—Ç–∏"
            className="absolute right-3 top-2 inline-flex h-9 w-9 items-center justify-center rounded-full text-2xl text-black/70 hover:bg-black/5"
          >
            √ó
          </button>
        )}

        {/* –Ü–∫–æ–Ω–∫–∞ —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ */}
        {icon && (wrapIcon ? (
          <div className="relative mx-auto mb-2 grid h-20 w-20 place-items-center rounded-full border-4 border-black/15 bg-[#ffdbe2] text-4xl">
            {icon}
          </div>
        ) : (
          <div className="relative mx-auto mb-2 grid place-items-center">{icon}</div>
        ))}

        {title && <h3 className="relative mb-1 text-2xl font-extrabold tracking-tight">{title}</h3>}
        {subtitle && (
          <p className="relative mx-auto mb-3 max-w-lg text-base leading-snug text-neutral-800">{subtitle}</p>
        )}

        {children && <div className="relative mb-4">{children}</div>}

        <div className="relative flex items-center justify-center gap-3">
          {actionsSlot ?? (
            <button
              onClick={onAction ?? onClose}
              className="inline-flex items-center justify-center rounded-full bg-black px-5 py-2.5 text-base font-extrabold text-white shadow-[0_8px_20px_rgba(0,0,0,.35)] active:translate-y-[1px]"
            >
              {actionLabel}
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

/* =====================
   –¢–æ–Ω–∫—ñ SVG‚Äë—ñ–∫–æ–Ω–∫–∏ / –±–µ–π–¥–∂—ñ
   ===================== */
const PhoneIcon = ({ className = "h-10 w-10", stroke = "currentColor" }) => (
  <svg viewBox="0 0 24 24" className={className} fill="none" stroke={stroke} strokeWidth="1.6">
    <rect x="7" y="2" width="10" height="20" rx="2" />
    <circle cx="12" cy="18" r="1.4" />
  </svg>
);

const InfoIcon = ({ className = "h-10 w-10", stroke = "currentColor" }) => (
  <svg viewBox="0 0 24 24" className={className} fill="none" stroke={stroke} strokeWidth="1.8">
    <circle cx="12" cy="12" r="10" />
    <path d="M12 10v7m0-11h.01" />
  </svg>
);

/**
 * LogoBadge ‚Äî –∫—Ä—É–≥–ª–∏–π –±–µ–π–¥–∂ –±–µ–∑ —Ñ–æ–Ω—É; –ª–æ–≥–æ –∑–∞–ø–æ–≤–Ω—é—î –≤–µ—Å—å –∫—Ä—É–≥; –±—ñ–ª–∞ –æ–∫–∞–Ω—Ç–æ–≤–∫–∞ = ringWidth
 */
const LogoBadge = ({ src, size = 80, ringWidth = 3 }) => {
  const style = { width: size, height: size, border: `${ringWidth}px solid #fff` };
  return (
    <div className="relative grid place-items-center overflow-hidden rounded-full" style={style}>
      <img
        src={src}
        alt=""
        role="presentation"
        aria-hidden="true"
        draggable={false}
        className="h-full w-full object-contain"
      />
    </div>
  );
};

/* ======= –ü–∞—Ä–∞ MetaMask + BNB (–¥–ª—è —Å–º–∞—Ä—Ç‚Äë–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∏—Ö –¥—ñ–π) ======= */
const WalletBadges = () => (
  <div className="flex items-center justify-center gap-3">
    <LogoBadge src="/MetaMask-icon-fox.svg" ringWidth={3} />
    <LogoBadge src="/BNB,_native_cryptocurrency_for_the_Binance_Smart_Chain.svg" ringWidth={3} />
  </div>
);

/* ======= –í–µ–ª–∏–∫–∏–π mUSD (—Ñ—ñ–Ω–∞–ª—å–Ω—ñ –≤—ñ—Ç–∞–Ω–Ω—è) ======= */
const WalletDoneBadge = () => <LogoBadge src="/mUSD-icon.svg" size={120} ringWidth={3} />;

export default function DemoBMBModals() {
  // A2HS Gate
  const [forceGate, setForceGate] = useState(false);
  const [bipEvent, setBipEvent] = useState(null);
  const [installed, setInstalled] = useState(false);

  // Other modals
  const [openSuccess, setOpenSuccess] = useState(false);
  const [openWarning, setOpenWarning] = useState(false);
  const [openError, setOpenError] = useState(false);
  const [openConfirm, setOpenConfirm] = useState(false);
  const [openTx, setOpenTx] = useState(false);
  const [openInfo, setOpenInfo] = useState(false);
  const [openCongratsCustomer, setOpenCongratsCustomer] = useState(false);
  const [openCongratsPerformer, setOpenCongratsPerformer] = useState(false);

  // Standalone check
  const checkStandalone = () =>
    (window.matchMedia && window.matchMedia("(display-mode: standalone)").matches) ||
    (window.navigator && window.navigator.standalone === true);

  useEffect(() => {
    const onBIP = (e) => {
      e.preventDefault();
      setBipEvent(e);
    };
    const onInstalled = () => {
      setInstalled(true);
    };
    window.addEventListener("beforeinstallprompt", onBIP);
    window.addEventListener("appinstalled", onInstalled);
    setInstalled(checkStandalone());
    return () => {
      window.removeEventListener("beforeinstallprompt", onBIP);
      window.removeEventListener("appinstalled", onInstalled);
    };
  }, []);

  useEffect(() => {
    if (forceGate && !installed && !checkStandalone()) {
      const prev = document.body.style.overflow;
      document.body.style.overflow = "hidden";
      return () => {
        document.body.style.overflow = prev;
      };
    }
  }, [forceGate, installed]);

  const handleInstallClick = async () => {
    if (bipEvent) {
      bipEvent.prompt();
      const choice = await bipEvent.userChoice;
      if (choice && choice.outcome === "accepted") {
        setTimeout(() => setInstalled(checkStandalone()), 1500);
      }
      setBipEvent(null);
    }
  };

  const mustShowGate = forceGate && !installed && !checkStandalone();

  // üîé smoke‚Äë—Ç–µ—Å—Ç–∏ (–ª–æ–≥ —É –∫–æ–Ω—Å–æ–ª—å)
  useEffect(() => {
    console.assert(typeof LogoBadge === "function", "LogoBadge –º–∞—î –±—É—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—î—é");
    console.assert(
      [
        "/MetaMask-icon-fox.svg",
        "/BNB,_native_cryptocurrency_for_the_Binance_Smart_Chain.svg",
        "/mUSD-icon.svg",
      ].every(Boolean),
      "–®–ª—è—Ö–∏ –¥–æ –ª–æ–≥–æ—Ç–∏–ø—ñ–≤ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ"
    );
  }, []);

  return (
    <div className="min-h-screen w-full bg-gradient-to-b from-white to-gray-100 p-6">
      <div className="mx-auto max-w-5xl">
        <h1 className="mb-4 text-3xl font-extrabold">BMB ‚Äî –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ñ –º–æ–¥–∞–ª–∫–∏</h1>
        <p className="mb-6 text-neutral-700">
          –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫–∏, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —è–∫—ñ –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ.
        </p>

        <div className="mb-3 flex items-center gap-3">
          <label className="inline-flex items-center gap-2 text-sm text-neutral-700">
            <input
              type="checkbox"
              checked={forceGate}
              onChange={(e) => setForceGate(e.target.checked)}
            />
            –ü–æ–∫–∞–∑–∞—Ç–∏ A2HS-–≥–µ–π—Ç (–¥–µ–º–æ)
          </label>
        </div>
        <div className="flex flex-wrap gap-3">
          <button onClick={() => setOpenSuccess(true)} className="rounded-full bg-black px-4 py-2 text-white">
            Success (Escrow –≤–∏–ø–ª–∞—á–µ–Ω–æ)
          </button>
          <button onClick={() => setOpenWarning(true)} className="rounded-full bg-black px-4 py-2 text-white">
            Warning (–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥—ñ—è)
          </button>
          <button onClick={() => setOpenError(true)} className="rounded-full bg-black px-4 py-2 text-white">
            Error (–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ)
          </button>
          <button onClick={() => setOpenConfirm(true)} className="rounded-full bg-black px-4 py-2 text-white">
            Confirm (–ü–æ–≥–æ–¥–∏—Ç–∏ —É–≥–æ–¥—É)
          </button>
          <button onClick={() => setOpenTx(true)} className="rounded-full bg-black px-4 py-2 text-white">
            Tx Progress (Escrow)
          </button>
          <button onClick={() => setOpenInfo(true)} className="rounded-full bg-black px-4 py-2 text-white">
            Info (–ß–µ—Ä–Ω–µ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ)
          </button>
          <button onClick={() => setOpenCongratsCustomer(true)} className="rounded-full bg-black px-4 py-2 text-white">
            Congrats (–ó–∞–º–æ–≤–Ω–∏–∫)
          </button>
          <button onClick={() => setOpenCongratsPerformer(true)} className="rounded-full bg-black px-4 py-2 text-white">
            Congrats (–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å)
          </button>
        </div>
      </div>

      {/* A2HS ‚Äî –ñ–æ—Ä—Å—Ç–∫–∏–π –≥–µ–π—Ç */}
      {mustShowGate && (
        <div className="fixed inset-0 z-[9999] flex select-none items-center justify-center bg-black/50 p-4 backdrop-blur-sm">
          <div className="relative w-full max-w-2xl rounded-3xl border-[3px] border-white bg-[#ffcdd6] px-6 py-8 text-center shadow-2xl">
            <div className="pointer-events-none absolute -left-10 -top-12 h-56 w-56 rounded-full bg-white/35" />
            <div className="pointer-events-none absolute -right-8 -bottom-10 h-56 w-56 rounded-full bg-white/30" />

            <div className="relative mx-auto mb-3 grid h-20 w-20 place-items-center rounded-full border-2 border-black/70 bg-yellow-300 text-black">
              <PhoneIcon />
            </div>

            <h3 className="relative mb-2 text-2xl font-semibold tracking-tight text-neutral-900">
              –î–æ–¥–∞–π—Ç–µ BMB –Ω–∞ –≥–æ–ª–æ–≤–Ω–∏–π –µ–∫—Ä–∞–Ω
            </h3>
            <p className="relative mx-auto mb-5 max-w-xl text-neutral-800">
              –í—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏–º–µ—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ –æ–¥–∏–Ω —Ç–∞–ø ‚Äî —à–≤–∏–¥—à–µ —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–µ.
            </p>

            <div className="relative">
              <button
                onClick={handleInstallClick}
                className="relative inline-flex items-center justify-center rounded-full bg-black px-6 py-2.5 text-base font-semibold text-white shadow-[0_8px_20px_rgba(0,0,0,.35)] active:translate-y-[1px]"
              >
                –û–∫
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Success ‚Äî Escrow –≤–∏–ø–ª–∞—á–µ–Ω–æ */}
      <BMBModal
        isOpen={openSuccess}
        onClose={() => setOpenSuccess(false)}
        wrapIcon={false}
        icon={<WalletDoneBadge />}
        title="–í–∞—à —Å—Ü–µ–Ω–∞—Ä—ñ–π –≤–∏–∫–æ–Ω–∞–Ω–∏–π"
        subtitle="Escrow –∑–∞–≤–µ—Ä—à–∏–≤ –≤–∏–ø–ª–∞—Ç—É. –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è BMB!"
        actionLabel="–î–æ–±—Ä–µ"
      />

      {/* Congrats ‚Äî —Ñ—ñ–Ω–∞–ª—å–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è –ó–∞–º–æ–≤–Ω–∏–∫–∞ */}
      <BMBModal
        isOpen={openCongratsCustomer}
        onClose={() => setOpenCongratsCustomer(false)}
        wrapIcon={false}
        icon={<WalletDoneBadge />}
        title="–í—ñ—Ç–∞—î–º–æ! –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ"
        subtitle="Escrow –∑–∞–≤–µ—Ä—à–∏–≤ –≤–∏–ø–ª–∞—Ç—É. –î—è–∫—É—î–º–æ, —â–æ –æ–±—Ä–∞–ª–∏ BMB!"
        actionLabel="–î–æ–±—Ä–µ"
      />

      {/* Congrats ‚Äî —Ñ—ñ–Ω–∞–ª—å–Ω–µ –≤—ñ—Ç–∞–Ω–Ω—è –¥–ª—è –í–∏–∫–æ–Ω–∞–≤—Ü—è */}
      <BMBModal
        isOpen={openCongratsPerformer}
        onClose={() => setOpenCongratsPerformer(false)}
        wrapIcon={false}
        icon={<WalletDoneBadge />}
        title="–í—ñ—Ç–∞—î–º–æ! –°—Ü–µ–Ω–∞—Ä—ñ–π –≤–∏–∫–æ–Ω–∞–Ω–æ"
        subtitle="–í–∞–º –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≥–∞–º–∞–Ω–µ—Ü—å MetaMask (mUSD)."
        actionLabel="–î–æ–±—Ä–µ"
      />

      {/* Warning ‚Äî –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏ —É–≥–æ–¥—É / —Ä–µ—Ñ–µ—Ä–∞–ª —Ç–æ—â–æ */}
      <BMBModal
        isOpen={openWarning}
        onClose={() => setOpenWarning(false)}
        wrapIcon={false}
        icon={<WalletBadges />}
        title="–£–≤–∞–≥–∞!"
        subtitle="–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≥–æ–¥–∏—Ç–∏ —É–≥–æ–¥—É —Ç–∞ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –∫–æ—à—Ç–∏ –≤ escrow."
        actionLabel="–ó—Ä–æ–∑—É–º—ñ–ª–æ"
      />

      {/* Error ‚Äî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –º–µ—Ä–µ–∂–∞ MetaMask / –∑–±—ñ–π */}
      <BMBModal
        isOpen={openError}
        onClose={() => setOpenError(false)}
        wrapIcon={false}
        icon={<WalletBadges />}
        title="–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ"
        subtitle="–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–º–∫–Ω—ñ—Ç—å MetaMask –Ω–∞ Binance Smart Chain —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        actionLabel="–ó—Ä–æ–∑—É–º—ñ–ª–æ"
      />

      {/* Confirm ‚Äî –ü–æ–≥–æ–¥–∏—Ç–∏ —É–≥–æ–¥—É? –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏ */}
      <BMBModal
        isOpen={openConfirm}
        onClose={() => setOpenConfirm(false)}
        wrapIcon={false}
        icon={<WalletBadges />}
        title="–ü–æ–≥–æ–¥–∏—Ç–∏ —É–≥–æ–¥—É?"
        subtitle="–ü—ñ—Å–ª—è –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –∫–æ—à—Ç–∏ –±—É–¥–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –≤ escrow –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."
        actionsSlot={
          <>
            <button
              className="inline-flex items-center justify-center rounded-full bg-black px-5 py-2.5 text-base font-extrabold text-white shadow-[0_8px_20px_rgba(0,0,0,.35)]"
              onClick={() => setOpenConfirm(false)}
            >
              –¢–∞–∫, –ø–æ–≥–æ–¥–∏—Ç–∏
            </button>
            <button
              className="inline-flex items-center justify-center rounded-full border border-black/60 bg-transparent px-5 py-2.5 text-base font-semibold text-neutral-900"
              onClick={() => setOpenConfirm(false)}
           >
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </button>
          </>
        }
      />

      {/* Tx Progress ‚Äî –±–ª–æ–∫—É—é—á–∞ –º–æ–¥–∞–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó */}
      <BMBModal
        isOpen={openTx}
        onClose={() => setOpenTx(false)}
        wrapIcon={false}
        icon={<WalletBadges />}
        hideClose
        noBackdropClose
        title="–ô–¥–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è‚Ä¶"
        subtitle="–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥—ñ—é –≤ MetaMask —Ç–∞ –∑–∞—á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –º–µ—Ä–µ–∂—ñ."
      >
        <div className="relative mt-2">
          <button className="inline-flex cursor-not-allowed items-center justify-center rounded-full bg-black/60 px-5 py-2.5 text-base font-extrabold text-white">
            –û—á—ñ–∫—É—î–º–æ‚Ä¶
          </button>
        </div>
      </BMBModal>

      {/* Info ‚Äî –ß–µ—Ä–Ω–µ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ */}
      <BMBModal
        isOpen={openInfo}
        onClose={() => setOpenInfo(false)}
        icon={<InfoIcon />}
        title="–ß–µ—Ä–Ω–µ—Ç–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ"
        subtitle="–ú–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—É–¥—å-–∫–æ–ª–∏ ‚Äî –º–∏ –≤—Å–µ –≤—ñ–¥–Ω–æ–≤–∏–º–æ."
        actionLabel="–î–æ–±—Ä–µ"
      />
    </div>
  );
}

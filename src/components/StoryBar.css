import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import UploadBehavior from './UploadBehavior';
import './StoryBar.css';

type Behavior = {
  id: number;
  user_id: string | null;
  title: string | null;
  description: string | null;
  ipfs_cid: string | null;
  file_url?: string | null;
  created_at: string;
};

const SEEN_KEY = 'bmb_seen_ids';
const isVideo = (url?: string | null) => {
  if (!url) return false;
  const u = url.split('?')[0].toLowerCase();
  return /\.(mp4|webm|ogg|mov|m4v)$/.test(u);
};
const buildSrc = (b: Behavior) =>
  b.file_url || (b.ipfs_cid ? `https://gateway.lighthouse.storage/ipfs/${b.ipfs_cid}` : null);

export default function StoryBar() {
  const [items, setItems] = useState<Behavior[]>([]);
  const [broken, setBroken] = useState<Set<number>>(new Set());
  const [isUploadOpen, setIsUploadOpen] = useState(false);
  const [seen, setSeen] = useState<Set<number>>(() => {
    try { return new Set(JSON.parse(localStorage.getItem(SEEN_KEY) || '[]')); }
    catch { return new Set(); }
  });

  const navigate = useNavigate();

  useEffect(() => {
    localStorage.setItem(SEEN_KEY, JSON.stringify([...seen]));
  }, [seen]);

  // 1) Початкова вибірка
  useEffect(() => {
    (async () => {
      const { data } = await supabase
        .from('behaviors')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(24);
      if (Array.isArray(data)) setItems(data as Behavior[]);
    })();
  }, []);

  // 2) Realtime INSERT
  useEffect(() => {
    const ch = supabase
      .channel('realtime:behaviors')
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'behaviors' },
        (payload) => {
          const row = payload.new as Behavior;
          setItems((prev) => (prev.some((x) => x.id === row.id) ? prev : [row, ...prev].slice(0, 24)));
        }
      )
      .subscribe();
    return () => { ch.unsubscribe(); };
  }, []);

  const markBroken = (id: number) => setBroken((p) => new Set(p).add(id));
  const openFeed = () => navigate('/behaviors');

  return (
    <div className="story-bar" data-bmb-storybar="">
      <div className="sb-container">
        {/* PLUS */}
        <button
          type="button"
          className="sb-item sb-item-add"
          onClick={() => setIsUploadOpen(true)}
          aria-label="Додати Behavior"
          title="Додати Behavior"
        >
          <span className="sb-plus">+</span>
        </button>

        {/* BEHAVIORS */}
        {items.map((b) => {
          const src = buildSrc(b);
          const brokenMedia = broken.has(b.id);
          const seenClass = seen.has(b.id) ? 'sb-item--seen' : 'sb-item--ring';

          return (
            <button
              key={b.id}
              type="button"
              className={`sb-item ${seenClass}`}
              title={b.title ?? 'Переглянути'}
              onClick={() => { setSeen((s) => new Set(s).add(b.id)); openFeed(); }}
            >
              {src && !brokenMedia ? (
                isVideo(src) ? (
                  <video
                    className="sb-media"
                    src={`${src}#t=0.001`}
                    preload="metadata"
                    muted
                    playsInline
                    onError={() => markBroken(b.id)}
                    onCanPlay={(e) => { try { (e.currentTarget as HTMLVideoElement).play().catch(()=>{}); } catch {} }}
                  />
                ) : (
                  <img
                    className="sb-media"
                    src={src}
                    alt=""
                    loading="lazy"
                    decoding="async"
                    crossOrigin="anonymous"
                    onError={() => markBroken(b.id)}
                  />
                )
              ) : (
                <div className="sb-fallback" />
              )}
            </button>
          );
        })}
      </div>

      {isUploadOpen && <UploadBehavior onClose={() => setIsUploadOpen(false)} />}
    </div>
  );
}

import React, { useCallback, useMemo, useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { isMetaMaskInApp } from "../lib/isMetaMaskBrowser";

type EthProvider = {
  isMetaMask?: boolean;
  request: (args: { method: string; params?: any[] }) => Promise<any>;
};

declare global {
  interface Window {
    ethereum?: EthProvider;
    location: Location;
  }
}

export default function EscrowHandoff() {
  const [search] = useSearchParams();
  const navigate = useNavigate();

  const next = useMemo(
    () => decodeURIComponent(search.get("next") || "/my-orders"),
    [search]
  );

  const [address, setAddress] = useState<string | null>(null);
  const [stage, setStage] = useState<"idle" | "signing" | "ready" | "error">("idle");
  const [error, setError] = useState<string | null>(null);

  const connectAndSign = useCallback(async () => {
    setError(null);
    const provider = window.ethereum;

    try {
      if (!provider || !provider.isMetaMask) {
        throw new Error("–í—ñ–¥–∫—Ä–∏–π —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–∏ MetaMask.");
      }

      // 1) Request accounts
      const accounts: string[] = await provider.request({
        method: "eth_requestAccounts",
      });
      const addr = (accounts && accounts[0]) || "";
      if (!addr) throw new Error("–ê–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ.");

      setStage("signing");

      // 2) Sign a simple message (–±–µ–∑ Buffer)
      const msg =
        `BuyMyBehavior Sign-In\n` +
        `Wallet: ${addr}\n` +
        `Time: ${Date.now()}`;

      await provider.request({
        method: "personal_sign",
        params: [msg, addr],
      });

      setAddress(addr);
      setStage("ready");
    } catch (e: any) {
      setStage("error");
      setError(e?.message || "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ MetaMask.");
    }
  }, []);

  const approveEscrow = useCallback(async () => {
    // –¢—É—Ç –º–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç/flow,
    // –∞–ª–µ —â–æ–±–∏ –Ω–µ —á—ñ–ø–∞—Ç–∏ —ñ–Ω—à—ñ —Ñ–∞–π–ª–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∂—É –Ω–∞ next.
    navigate(next, { replace: true });
  }, [navigate, next]);

  const openInMetaMask = useCallback(() => {
    // –í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —à–ª—è—Ö —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ
    const host = window.location.host;
    const path = `/escrow/approve?next=${encodeURIComponent(next)}`;
    // —Å—Ö–µ–º–∞ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ MetaMask
    window.location.href = `metamask://dapp/${host}${path}`;
  }, [next]);

  const inMetaMask = isMetaMaskInApp();

  return (
    <div style={{ padding: 16, maxWidth: 720, margin: "0 auto" }}>
      {/* –ª–æ–∫–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ –∫–Ω–æ–ø–æ–∫ ‚Äî –±–µ–∑ –æ–∫—Ä–µ–º–æ–≥–æ css —Ñ–∞–π–ª—É */}
      <style>{`
        .mm-wrap { display:flex; flex-direction:column; gap:12px; }
        .mm-btn {
          display:flex; align-items:center; justify-content:center;
          width:100%;
          padding:14px 18px;
          border-radius:16px;
          font-size:16px; font-weight:600;
          border:1px solid rgba(0,0,0,.12);
          background:#fff; color:#111;
          box-shadow: 0 2px 8px rgba(0,0,0,.06);
          touch-action: manipulation;
        }
        .mm-btn:active { transform: translateY(1px); }
        .mm-btn:disabled { opacity:.5; transform:none; }
        .mm-btn--primary { background:#111; color:#fff; border-color:#111; }
        .mm-btn--lock::before {
          content:"üîí"; margin-right:8px; font-size:18px; line-height:1;
        }
        .mm-hint { font-size:14px; opacity:.7; margin:10px 0 4px; }
        .mm-err { margin-top:10px; color:#b00020; font-size:14px; }
      `}</style>

      <h1 style={{ fontSize: 28, fontWeight: 800, margin: "4px 0 12px" }}>
        –í—Ö—ñ–¥ —á–µ—Ä–µ–∑ MetaMask
      </h1>
      <p className="mm-hint">
        –Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ –∑'—è–≤–∏–≤—Å—è ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.
      </p>

      <div className="mm-wrap">
        <button
          type="button"
          className="mm-btn"
          onClick={connectAndSign}
          disabled={stage === "signing"}
        >
          ü¶ä –£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ MetaMask
        </button>

        <button
          type="button"
          className="mm-btn mm-btn--primary mm-btn--lock"
          onClick={approveEscrow}
          disabled={!address || stage === "signing"}
          title={!address ? "–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥–∏ —á–µ—Ä–µ–∑ MetaMask" : "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É"}
        >
          –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É
        </button>

        {!inMetaMask && (
          <button type="button" className="mm-btn" onClick={openInMetaMask}>
            –í—ñ–¥–∫—Ä–∏—Ç–∏ —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ
          </button>
        )}
      </div>

      {stage === "signing" && (
        <p className="mm-hint">–ü—ñ–¥–ø–∏—Å—É—î–º–æ –∑–∞–ø–∏—Ç —É MetaMask‚Ä¶</p>
      )}
      {error && <p className="mm-err">–ü–æ–º–∏–ª–∫–∞: {error}</p>}
    </div>
  );
}

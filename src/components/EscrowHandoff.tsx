// src/components/EscrowHandOff.tsx
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import type { PostgrestError } from "@supabase/supabase-js";

// ‚ö†Ô∏è –ü—ñ–¥—ñ–≥–Ω–∞–π—Ç–µ —ñ–º–ø–æ—Ä—Ç –ø—ñ–¥ –≤–∞—à –ø—Ä–æ—î–∫—Ç:
// —è–∫—â–æ —É –≤–∞—Å —Ñ–∞–π–ª –∫–ª—ñ—î–Ω—Ç–∞ –≤ —ñ–Ω—à–æ–º—É –º—ñ—Å—Ü—ñ ‚Äî –∑–º—ñ–Ω—ñ—Ç—å —à–ª—è—Ö –Ω–∏–∂—á–µ.
import { supabase } from "../lib/supabaseClient";

declare global {
  interface Window {
    ethereum?: any;
  }
}

type Step = "idle" | "connecting" | "signing" | "saving" | "done";

const isMetaMaskMobile = () =>
  /MetaMaskMobile/i.test(window.navigator.userAgent) ||
  /metamask/i.test(window.navigator.userAgent) && /Mobile/i.test(window.navigator.userAgent);

const buildMetaMaskDeepLink = () => {
  // metamask://dapp/<host><path><query>
  const { host, pathname, search } = window.location;
  return `metamask://dapp/${host}${pathname}${search}`;
};

export default function EscrowHandOff() {
  const navigate = useNavigate();
  const [step, setStep] = useState<Step>("idle");
  const [account, setAccount] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const hasEthereum = typeof window !== "undefined" && !!window.ethereum;

  const uiDisabled = useMemo(
    () => step === "connecting" || step === "signing" || step === "saving",
    [step]
  );

  // -------- personal_sign –±–µ–∑ Buffer ----------
  const personalSign = useCallback(async (wallet: string) => {
    const msg =
      `BuyMyBehavior Sign-In\n` +
      `Wallet: ${wallet}\n` +
      `Time: ${Date.now()}`;

    // 1) –ü—Ä–æ–±—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏ plain text (–∫—Ä–∞—â–µ –ø—Ä–∞—Ü—é—î —É –º–æ–±—ñ–ª—å–Ω–æ–º—É MM)
    try {
      return await window.ethereum.request({
        method: "personal_sign",
        params: [msg, wallet],
      });
    } catch {
      // 2) –§–æ–ª–±–µ–∫: –∫–æ–¥—É—î–º–æ —É hex –±–µ–∑ Buffer (—á–µ—Ä–µ–∑ TextEncoder)
      const bytes = new TextEncoder().encode(msg);
      const hex =
        "0x" + Array.from(bytes, (b) => b.toString(16).padStart(2, "0")).join("");
      return await window.ethereum.request({
        method: "personal_sign",
        params: [hex, wallet],
      });
    }
  }, []);
  // --------------------------------------------

  const upsertProfile = useCallback(async (wallet: string) => {
    // Upsert –ø–æ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—é wallet_address
    // (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ profiles —î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ wallet_address).
    const { error: dbErr } = await supabase
      .from("profiles")
      .upsert({ wallet_address: wallet }, { onConflict: "wallet_address" });

    return dbErr;
  }, []);

  const connectAndSign = useCallback(async () => {
    setError(null);
    try {
      if (!window.ethereum) {
        throw new Error("MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ.");
      }

      setStep("connecting");
      const accounts: string[] = await window.ethereum.request({
        method: "eth_requestAccounts",
      });
      const wallet = (accounts?.[0] || "").toLowerCase();
      if (!wallet) throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è.");
      setAccount(wallet);

      setStep("signing");
      await personalSign(wallet);

      setStep("saving");
      const dbErr: PostgrestError | null = await upsertProfile(wallet);
      if (dbErr) {
        // —è–∫—â–æ –¥—É–±–ª—å ‚Äî —Ü–µ —Ç–µ–∂ –æ–∫, upsert –Ω–µ –º–∞—î –ø–∞–¥–∞—Ç–∏, –∞–ª–µ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫:
        if (dbErr.code !== "23505") {
          throw new Error(dbErr.message);
        }
      }

      setStep("done");
      // –ü—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É –≤–µ–¥–µ–º–æ –Ω–∞ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å:
      navigate("/my-orders", { replace: true });
    } catch (e: any) {
      console.error(e);
      setStep("idle");
      setError(e?.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É.");
    }
  }, [navigate, personalSign, upsertProfile]);

  // –ê–≤—Ç–æ—Å–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è, —è–∫—â–æ —î MetaMask
  useEffect(() => {
    if (hasEthereum) {
      // –õ–µ–≥–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± –≤—Å—Ç–∏–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      const t = setTimeout(() => {
        if (step === "idle") void connectAndSign();
      }, 200);
      return () => clearTimeout(t);
    }
  }, [hasEthereum, connectAndSign, step]);

  const handleApproveEscrow = useCallback(async () => {
    setError(null);
    try {
      if (!account) throw new Error("–°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å MetaMask.");

      // –¢—É—Ç –º—ñ—Å—Ü–µ –¥–ª—è –≤–∞—à–æ—ó –ª–æ–≥—ñ–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –µ—Å–∫—Ä–æ—É.
      // –ó–∞—Ä–∞–∑ ‚Äì –ª–∏—à–µ –ø—Ä–∏–∫–ª–∞–¥ ¬´–ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ¬ª –ø—ñ–¥–ø–∏—Å—É-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è,
      // –∞–±–∏ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –≤—ñ–∫–Ω–æ MetaMask (–º–æ–∂–µ—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –≤–∏–∫–ª–∏–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É).
      const message = `BMB Escrow Approve\nWallet: ${account}\nTime: ${Date.now()}`;
      await window.ethereum.request({
        method: "personal_sign",
        params: [message, account],
      });

      navigate("/my-orders", { replace: true });
    } catch (e: any) {
      console.error(e);
      setError(e?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É.");
    }
  }, [account, navigate]);

  return (
    <div className="mx-auto max-w-screen-sm px-4 py-8">
      <h1 className="text-3xl sm:text-4xl font-bold mb-4">–í—Ö—ñ–¥ —á–µ—Ä–µ–∑ MetaMask</h1>
      <p className="text-gray-600 mb-6">
        –Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ –∑‚Äô—è–≤–∏–≤—Å—è ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.
      </p>

      {!hasEthereum && (
        <div className="mb-4 text-sm rounded-xl bg-yellow-50 border border-yellow-200 p-3">
          MetaMask —É —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—ñ–¥–∫—Ä–∏–π—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É —É
          MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ.
        </div>
      )}

      <div className="flex flex-wrap items-center gap-3 mb-4">
        <button
          disabled={uiDisabled}
          onClick={connectAndSign}
          className={`rounded-full px-5 py-3 font-semibold shadow-sm transition
            ${uiDisabled ? "bg-gray-300 text-gray-600" : "bg-black text-white hover:opacity-90"}`}
        >
          ü¶ä –£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ MetaMask
        </button>

        <button
          disabled={!account || uiDisabled}
          onClick={handleApproveEscrow}
          className={`rounded-full px-5 py-3 font-semibold shadow-sm transition
            ${!account || uiDisabled ? "bg-gray-200 text-gray-500" : "bg-pink-500 text-white hover:opacity-90"}`}
        >
          üîí –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É
        </button>

        {isMetaMaskMobile() && (
          <a
            href={buildMetaMaskDeepLink()}
            className="rounded-full px-4 py-2 text-sm border border-gray-300 hover:bg-gray-50"
          >
            –í—ñ–¥–∫—Ä–∏—Ç–∏ —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ
          </a>
        )}
      </div>

      {step !== "idle" && step !== "done" && (
        <div className="text-sm text-gray-500 mb-3">
          {step === "connecting" && "–ó‚Äô—î–¥–Ω–∞–Ω–Ω—è –∑ MetaMask‚Ä¶"}
          {step === "signing" && "–ü—ñ–¥–ø–∏—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è‚Ä¶"}
          {step === "saving" && "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é‚Ä¶"}
        </div>
      )}

      {error && (
        <div className="mt-2 text-red-600">
          –ü–æ–º–∏–ª–∫–∞: {error}
        </div>
      )}
    </div>
  );
}

// src/components/EscrowHandoff.tsx
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { useLocation, useNavigate, useSearchParams } from "react-router-dom";
import type { AddressLike } from "ethers";
import * as ethersNS from "ethers"; // ‚úÖ –ü—Ä–∞—Ü—é—î —ñ –∑ v5, —ñ –∑ v6
import { supabase } from "../lib/supabase";
import { isMetaMaskInApp } from "../lib/isMetaMaskBrowser";

// ---- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –º–µ—Ä–µ–∂—ñ/—Å—É–º ----
const BSC_CHAIN_ID_HEX = "0x38"; // 56
const ESCROW_AMOUNT_STR = "0.01"; // 0.01 BNB —É –ø—ñ–¥–∫–∞–∑—Ü—ñ/–∫–Ω–æ–ø—Ü—ñ

// ---- –î–æ–ø–æ–º—ñ–∂–∫–∏ –¥–ª—è ethers v5/v6 ----
function useEthersCompat() {
  const isV6 = !!(ethersNS as any).BrowserProvider;
  const BrowserProvider = (ethersNS as any).BrowserProvider;
  const Web3Provider = (ethersNS as any).providers?.Web3Provider;
  const utils = (ethersNS as any).utils;

  const parseEther =
    (ethersNS as any).parseEther ?? utils?.parseEther ?? ((v: string) => {
      throw new Error("parseEther not found in ethers");
    });

  const formatEther =
    (ethersNS as any).formatEther ?? utils?.formatEther ?? ((v: any) => {
      throw new Error("formatEther not found in ethers");
    });

  const makeProvider = () => {
    const eth = (window as any).ethereum;
    if (!eth) throw new Error("MetaMask provider –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    return isV6 ? new BrowserProvider(eth) : new Web3Provider(eth);
  };

  const getSigner = async () => {
    const p = makeProvider();
    // v6: await provider.getSigner(); v5: provider.getSigner()
    const s = (p as any).getSigner();
    return s?.then?.((x: any) => x) ?? s;
  };

  return { isV6, makeProvider, getSigner, parseEther, formatEther };
}

// ---- –ü—Ä–∏–º—ñ—Ç–∏–≤–Ω—ñ —Å—Ç–∏–ª—ñ –ø—ñ–¥ –º–æ–±—ñ–ª—å–Ω–∏–π MetaMask ----
const styles = {
  wrap: { maxWidth: 760, margin: "0 auto", padding: "16px" },
  title: { fontWeight: 800, fontSize: 32, margin: "16px 0 8px" },
  hint: { color: "#555", marginBottom: 16 },
  card: {
    borderRadius: 16,
    background: "#fff",
    boxShadow: "0 6px 30px rgba(0,0,0,0.06)",
    padding: 16,
    marginBottom: 16,
  },
  btn: (variant: "primary" | "ghost" = "primary") =>
    variant === "primary"
      ? {
          width: "100%",
          padding: "14px 16px",
          borderRadius: 16,
          border: "1px solid transparent",
          background: "#0f172a",
          color: "#fff",
          fontWeight: 700 as const,
          fontSize: 18,
          boxShadow: "0 8px 20px rgba(15,23,42,.2)",
        }
      : {
          width: "100%",
          padding: "14px 16px",
          borderRadius: 16,
          border: "1px solid #e5e7eb",
          background: "#fff",
          color: "#111827",
          fontWeight: 700 as const,
          fontSize: 18,
        },
  mmIcon: { marginRight: 8 },
  error: {
    background: "#fee2e2",
    border: "1px solid #fecaca",
    color: "#7f1d1d",
    borderRadius: 12,
    padding: 12,
    marginTop: 16,
  },
  mini: { fontSize: 14, color: "#374151" },
  walletRow: { display: "flex", flexDirection: "column" as const, gap: 4 },
};

export default function EscrowHandoff() {
  const { makeProvider, getSigner, parseEther, formatEther } = useEthersCompat();
  const [params] = useSearchParams();
  const next = params.get("next") || "/my-orders";

  const navigate = useNavigate();
  const location = useLocation();

  const [address, setAddress] = useState<string>("");
  const [balance, setBalance] = useState<string>("");
  const [chainId, setChainId] = useState<string>("");
  const [busy, setBusy] = useState<false | "sign" | "tx">(false);
  const [error, setError] = useState<string>("");

  // ------ –±–∞–∑–æ–≤—ñ –¥—ñ—ó –∑ MM ------
  const requestAccounts = useCallback(async () => {
    const eth = (window as any).ethereum;
    if (!eth) throw new Error("MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    const accs: string[] = await eth.request({ method: "eth_requestAccounts" });
    return (accs && accs[0]) || "";
  }, []);

  const ensureBSC = useCallback(async () => {
    const eth = (window as any).ethereum;
    if (!eth) throw new Error("MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    const current = (await eth.request({ method: "eth_chainId" })) as string;
    setChainId(current);

    if (current?.toLowerCase() !== BSC_CHAIN_ID_HEX) {
      try {
        await eth.request({
          method: "wallet_switchEthereumChain",
          params: [{ chainId: BSC_CHAIN_ID_HEX }],
        });
        setChainId(BSC_CHAIN_ID_HEX);
      } catch (e: any) {
        // –Ø–∫—â–æ –º–µ—Ä–µ–∂—ñ –Ω–µ–º–∞ ‚Äî –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
        throw new Error("–ü–µ—Ä–µ–º–∫–Ω–∏ –º–µ—Ä–µ–∂—É –Ω–∞ BNB Smart Chain —É MetaMask.");
      }
    }
  }, []);

  const refreshBalance = useCallback(async (addr: AddressLike) => {
    const p = makeProvider();
    const raw = await (p as any).getBalance(addr);
    setBalance(formatEther(raw));
  }, [formatEther, makeProvider]);

  // ------ –ª–æ–≥—ñ–Ω –ø—ñ–¥–ø–∏—Å–æ–º + –ø—Ä–æ—Ñ—ñ–ª—å —É –ë–î ------
  const signIn = useCallback(async () => {
    setError("");
    setBusy("sign");
    try {
      const eth = (window as any).ethereum;
      if (!eth) throw new Error("MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");

      const acc = await requestAccounts();
      if (!acc) throw new Error("–ê–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ");
      await ensureBSC();

      const signer = await getSigner();
      const msg =
        `BuyMyBehavior Sign-In\n` +
        `Wallet: ${acc}\n` +
        `Time: ${Date.now()}`;
      await signer.signMessage(msg);

      setAddress(acc);
      await refreshBalance(acc);

      // —Å—Ç–≤–æ—Ä—é—î–º–æ/–≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
      const { error: dbErr } = await supabase
        .from("profiles")
        .insert({ wallet_address: acc }, { upsert: true });
      if (dbErr && dbErr.code !== "23505") {
        // 23505 ‚Äî duplicate, –æ–∫
        console.warn("Supabase profiles.insert:", dbErr);
      }
    } catch (e: any) {
      setError(`–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: ${e?.message ?? e}`);
    } finally {
      setBusy(false);
    }
  }, [ensureBSC, getSigner, refreshBalance, requestAccounts]);

  // ------ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ¬´–µ—Å–∫—Ä–æ—É¬ª (–¥–µ–º–æ-—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è) ------
  const sendEscrow = useCallback(async () => {
    setError("");
    setBusy("tx");
    try {
      if (!address) throw new Error("–°–ø–µ—Ä—à—É —É–≤—ñ–π–¥–∏ —á–µ—Ä–µ–∑ MetaMask");

      await ensureBSC();
      const signer = await getSigner();

      const to = address as AddressLike; // –¥–µ–º–æ: –Ω–∞ —Å–µ–±–µ (—â–æ–± –Ω–µ ¬´–≤ –Ω—É–ª—å–æ–≤–∏–π¬ª)
      const value = parseEther(ESCROW_AMOUNT_STR);

      const tx = await signer.sendTransaction({ to, value });
      // –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º: —á–µ–∫–∞—î–º–æ –º–∞–π–Ω—ñ–Ω–≥
      // await tx.wait();

      // –æ–Ω–æ–≤–∏–º–æ –±–∞–ª–∞–Ω—Å
      await refreshBalance(address);

      // —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–∫—Ä–∞–Ω
      const back = params.get("next") || "/my-orders";
      navigate(back, { replace: true });
    } catch (e: any) {
      if (String(e?.message || e).includes("User denied")) {
        setError("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥—Ö–∏–ª–∏–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —É MetaMask.");
      } else {
        setError(`–ü–æ–º–∏–ª–∫–∞ –µ—Å–∫—Ä–æ—É: ${e?.message ?? e}`);
      }
    } finally {
      setBusy(false);
    }
  }, [address, ensureBSC, getSigner, navigate, params, parseEther, refreshBalance]);

  // ---- –∞–≤—Ç–æ-—Ñ–æ–∫—É—Å —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ ----
  useEffect(() => {
    if (isMetaMaskInApp()) {
      // –∞–≤—Ç–æ-–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ + –±–∞–ª–∞–Ω—Å (–±–µ–∑ –ø—ñ–¥–ø–∏—Å—É)
      requestAccounts()
        .then((acc) => {
          if (acc) {
            setAddress(acc);
            refreshBalance(acc);
          }
        })
        .catch(() => void 0);
    }
  }, [refreshBalance, requestAccounts]);

  const shortAddr = useMemo(
    () => (address ? `${address.slice(0, 6)}‚Ä¶${address.slice(-4)}` : ""),
    [address]
  );

  return (
    <div style={styles.wrap}>
      <h1 style={styles.title}>–í—Ö—ñ–¥ —á–µ—Ä–µ–∑ MetaMask</h1>
      <div style={styles.hint}>–Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ –∑‚Äô—è–≤–∏–≤—Å—è ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.</div>

      {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥—É */}
      <div style={{ ...styles.card, opacity: busy ? 0.7 : 1 }}>
        <button
          style={styles.btn("ghost")}
          onClick={signIn}
          disabled={busy === "sign"}
          aria-busy={busy === "sign"}
        >
          <span style={styles.mmIcon}>ü¶ä</span> –£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ MetaMask
        </button>
      </div>

      {/* –Ü–Ω—Ñ–æ –ø—Ä–æ –≥–∞–º–∞–Ω–µ—Ü—å */}
      {address && (
        <div style={styles.card}>
          <div style={styles.walletRow as any}>
            <div style={{ fontWeight: 700, fontSize: 16 }}>–ì–∞–º–∞–Ω–µ—Ü—å</div>
            <div style={{ fontFamily: "monospace" }}>{shortAddr}</div>
            <div style={styles.mini}>
              –ú–µ—Ä–µ–∂–∞: {chainId || "‚Äî"} &nbsp; –ë–∞–ª–∞–Ω—Å: {balance ? `${balance} BNB` : "‚Äî"}
            </div>
          </div>
        </div>
      )}

      {/* –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É */}
      <div style={{ ...styles.card, opacity: busy ? 0.7 : 1 }}>
        <button
          style={styles.btn("primary")}
          onClick={sendEscrow}
          disabled={!address || busy === "tx"}
          aria-busy={busy === "tx"}
        >
          <span style={{ marginRight: 8 }}>üîí</span>
          –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É ‚Ä¢ {ESCROW_AMOUNT_STR} BNB
        </button>
      </div>

      {/* –õ—ñ–Ω–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É –≤–±—É–¥–æ–≤–∞–Ω–æ–º—É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ (–Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫) */}
      <div style={{ marginTop: 12 }}>
        <a href="https://metamask.app.link/dapp/www.buymybehavior.com" style={{ color: "#111827" }}>
          –í—ñ–¥–∫—Ä–∏—Ç–∏ —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ
        </a>
      </div>

      {error && <div style={styles.error}>{error}</div>}
    </div>
  );
}

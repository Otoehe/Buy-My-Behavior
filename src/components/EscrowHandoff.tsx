// src/components/EscrowHandoff.tsx
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { supabase } from "../lib/supabase";
import { isMetaMaskInApp } from "../lib/isMetaMaskBrowser";

type EthereumProvider = {
  request: (args: { method: string; params?: any[] }) => Promise<any>;
  isMetaMask?: boolean;
};
declare global {
  interface Window {
    ethereum?: EthereumProvider;
  }
}

function useQuery() {
  const { search } = useLocation();
  return useMemo(() => new URLSearchParams(search), [search]);
}

export default function EscrowHandoff() {
  const q = useQuery();
  const navigate = useNavigate();

  const [address, setAddress] = useState<string | null>(null);
  const [status, setStatus] = useState<"idle" | "connecting" | "signing" | "ready" | "error">("idle");
  const [error, setError] = useState<string | null>(null);

  const nextUrl = q.get("next") || "/my-orders";

  const connect = useCallback(async () => {
    try {
      setError(null);
      setStatus("connecting");

      const provider = window.ethereum;
      if (!provider) {
        throw new Error("MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—ñ–¥–∫—Ä–∏–π –¥–æ–¥–∞—Ç–æ–∫ MetaMask —ñ –∑–∞–π–¥–∏ –Ω–∞ —Ü—é —Å—Ç–æ—Ä—ñ–Ω–∫—É.");
      }

      const accounts: string[] = await provider.request({
        method: "eth_requestAccounts",
      });
      const wallet = accounts?.[0];
      if (!wallet) throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è.");

      setAddress(wallet);

      // –°—Ç–≤–æ—Ä—é—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å (—É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ wallet_address)
      const { error: upsertErr } = await supabase
        .from("profiles")
        .upsert({ wallet_address: wallet }, { onConflict: "wallet_address", ignoreDuplicates: false });

      // –Ø–∫—â–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á ‚Äî –Ω—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ (23505)
      if (upsertErr && upsertErr.code !== "23505") {
        throw upsertErr;
      }

      // –ü—ñ–¥–ø–∏—Å (plain string, –±–µ–∑ Buffer)
      setStatus("signing");
      const msg = `BuyMyBehavior Sign-In\nWallet: ${wallet}\nTime: ${Date.now()}`;

      // –¥–µ—è–∫—ñ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∏ —Ö–æ—á—É—Ç—å [message, address], —ñ–Ω—à—ñ ‚Äî [address, message]
      let signature: string | undefined;
      try {
        signature = await provider.request({
          method: "personal_sign",
          params: [msg, wallet],
        });
      } catch {
        signature = await provider.request({
          method: "personal_sign",
          params: [wallet, msg],
        });
      }

      if (!signature) {
        throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤ –ø—ñ–¥–ø–∏—Å –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å—É.");
      }

      setStatus("ready");

      // —É –Ω–∞—Å –Ω–µ–º–∞—î e-mail –ª–æ–≥—ñ–Ω—É —á–µ—Ä–µ–∑ Supabase; –ø—ñ—Å–ª—è —É—Å–ø—ñ—Ö—É –ø—Ä–æ—Å—Ç–æ –≤–µ–¥–µ–º–æ –Ω–∞ next
      navigate(nextUrl, { replace: true });
    } catch (e: any) {
      console.error(e);
      setStatus("error");
      setError(e?.message || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞");
    }
  }, [navigate, nextUrl]);

  const approveEscrow = useCallback(async () => {
    try {
      setError(null);
      // –¢—É—Ç –∑—Ä–æ–±–∏—à –≤–∏–∫–ª–∏–∫ —Å–≤–æ–≥–æ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—É –µ—Å–∫—Ä–æ—É/BNB ‚Äî –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞:
      alert("–ï—Å–∫—Ä–æ—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞). –¢—É—Ç –≤–∏–∫–ª–∏–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É.");
      navigate(nextUrl, { replace: true });
    } catch (e: any) {
      console.error(e);
      setError(e?.message || "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –µ—Å–∫—Ä–æ—É");
    }
  }, [navigate, nextUrl]);

  const mmDeepLink = useMemo(() => {
    // –≤—ñ–¥–∫—Ä–∏—î –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤ –º–æ–±—ñ–ª—å–Ω–æ–º—É MM
    const url = typeof window !== "undefined" ? window.location.href : "https://www.buymybehavior.com/escrow/approve";
    return `https://metamask.app.link/dapp/${url.replace(/^https?:\/\//, "")}`;
  }, []);

  useEffect(() => {
    // —É –≤–±—É–¥–æ–≤–∞–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ MetaMask –ø—Ä–æ–±—É—î–º–æ –æ–¥—Ä–∞–∑—É –∫–æ–Ω–µ–∫—Ç–∏—Ç–∏—Å—å
    if (isMetaMaskInApp()) {
      void connect();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <main className="p-4 max-w-screen-sm mx-auto">
      <h1 className="text-3xl font-bold mb-4">–í—Ö—ñ–¥ —á–µ—Ä–µ–∑ MetaMask</h1>

      <p className="mb-4">
        –Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ –∑'—è–≤–∏–≤—Å—è ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. –ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–π–¥–µ–º–æ –Ω–∞ <code>{nextUrl}</code>.
      </p>

      <div className="flex gap-2 flex-wrap mb-4">
        <button
          className="px-3 py-2 rounded bg-black text-white"
          disabled={status === "connecting" || status === "signing"}
          onClick={connect}
        >
          ü¶ä –£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ MetaMask
        </button>

        <button
          className="px-3 py-2 rounded border"
          disabled={!address || status === "signing"}
          onClick={approveEscrow}
          title={!address ? "–°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥'—î–¥–Ω–∞–π MetaMask" : "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É"}
        >
          üîí –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É
        </button>

        <a className="px-3 py-2 rounded border" href={mmDeepLink}>
          –í—ñ–¥–∫—Ä–∏—Ç–∏ —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ
        </a>
      </div>

      <div className="text-sm text-gray-600 space-y-1">
        <div>–°—Ç–∞—Ç—É—Å: {status}</div>
        {address && <div>–ê–¥—Ä–µ—Å–∞: {address}</div>}
        {error && <div className="text-red-600">–ü–æ–º–∏–ª–∫–∞: {error}</div>}
      </div>
    </main>
  );
}

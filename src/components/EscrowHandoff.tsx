// src/components/EscrowHandoff.tsx
import React, { useEffect, useMemo, useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import MetaMaskSDK from '@metamask/sdk';
import { ethers } from 'ethers';

// Fix "Buffer is not defined" (Vite, –º–æ–±—ñ–ª—å–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä)
import { Buffer } from 'buffer';
if (!(window as any).Buffer) (window as any).Buffer = Buffer;

type ConnState =
  | 'idle'
  | 'connecting'
  | 'connected'
  | 'signing'
  | 'ready';

export default function EscrowHandoff() {
  const [state, setState] = useState<ConnState>('idle');
  const [address, setAddress] = useState<string>('');
  const [error, setError] = useState<string>('');

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è MetaMask SDK (fallback, —è–∫—â–æ –Ω–µ–º–∞—î window.ethereum)
  const sdk = useMemo(() => {
    if (typeof window === 'undefined') return null;
    try {
      return new MetaMaskSDK({
        checkInstallationImmediately: false,
        useDeeplink: true,
        dappMetadata: { name: 'Buy My Behavior', url: window.location.origin },
      });
    } catch {
      return null;
    }
  }, []);

  const provider: any = useMemo(() => {
    // 1) —è–∫—â–æ –º–∏ –≤ MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ ‚Äî –≤–∂–µ —î window.ethereum
    if ((window as any).ethereum) return (window as any).ethereum;
    // 2) —ñ–Ω–∞–∫—à–µ –±–µ—Ä–µ–º–æ –∑ SDK
    return sdk?.getProvider();
  }, [sdk]);

  // –ê–≤—Ç–æ–≤—Ö—ñ–¥: —è–∫—â–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É–∂–µ —î ‚Äî –ø—Ä–æ–±—É—î–º–æ –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ –∞–∫–∞—É–Ω—Ç
  useEffect(() => {
    let ignore = false;
    (async () => {
      try {
        if (!provider) return;
        const accounts: string[] =
          (await provider.request?.({ method: 'eth_accounts' })) ?? [];
        if (ignore || !accounts?.length) return;
        await onConnected(accounts[0]);
      } catch (_) {}
    })();
    return () => {
      ignore = true;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [provider]);

  const connect = async () => {
    setError('');
    try {
      if (!provider) throw new Error('MetaMask provider –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      setState('connecting');
      const accounts: string[] = await provider.request({
        method: 'eth_requestAccounts',
      });
      if (!accounts?.length) throw new Error('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É–≤–∞–≤ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');
      await onConnected(accounts[0]);
    } catch (e: any) {
      setError(e?.message ?? String(e));
      setState('idle');
    }
  };

  const onConnected = async (addr: string) => {
    setAddress(ethers.getAddress(addr)); // –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ checksum
    // —Å—Ç–≤–æ—Ä—é—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å —É Supabase
    // —É —Ç–µ–±–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ wallet_address => upsert –ø–æ –Ω—å–æ–º—É
    const { error: upErr } = await supabase
      .from('profiles')
      .upsert(
        { wallet_address: ethers.getAddress(addr) },
        { onConflict: 'wallet_address' }
      );

    if (upErr) {
      // —è–∫—â–æ –ø–æ–ª—ñ—Ç–∏–∫–∏/—Å—Ö–µ–º–∞ –≤—Å–µ —â–µ —Å—É–≤–æ—Ä—ñ ‚Äî –Ω–µ –≤–∞–ª–∏–º–æ UX, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
      console.warn('profiles upsert error:', upErr);
      setError(upErr.message);
    }
    setState('connected');
  };

  const signEscrowApprove = async () => {
    setError('');
    try {
      if (!provider || !address) throw new Error('–°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥‚Äô—î–¥–Ω–∞–π MetaMask');
      setState('signing');

      // –ø—Ä–æ—Å—Ç–∏–π –æ—Ñ—á–µ–π–Ω-–ø—ñ–¥–ø–∏—Å —è–∫ "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –µ—Å–∫—Ä–æ—É"
      const message = `BMB Escrow Approval\nWallet: ${address}\nTime: ${Date.now()}`;
      const from = address;
      // personal_sign –æ—á—ñ–∫—É—î hex/utf8 message
      const signature: string = await provider.request({
        method: 'personal_sign',
        params: [ethers.hexlify(ethers.toUtf8Bytes(message)), from],
      });

      // –ú–æ–∂–µ—à –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—ñ–¥–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é escrow_approvals, —è–∫—â–æ —Ç–∞–∫–∞ —î
      // await supabase.from('escrow_approvals').insert({ wallet_address: address, signature });

      setState('ready');
      alert('–ï—Å–∫—Ä–æ—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ');
    } catch (e: any) {
      setError(e?.message ?? String(e));
      setState('connected');
    }
  };

  const openInMMBrowser = () => {
    // deep-link –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å–∞–º–µ MetaMask-–±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞—à–æ–º—É /handoff
    const dappUrl = encodeURIComponent(`${location.origin}/handoff`);
    location.href = `https://metamask.app.link/dapp/${dappUrl}`;
  };

  return (
    <div className="mx-auto max-w-xl px-4 py-8">
      <h1 className="text-4xl font-extrabold mb-4">–í—Ö—ñ–¥ —á–µ—Ä–µ–∑ MetaMask</h1>
      <p className="text-lg mb-6">
        –Ø–∫—â–æ –∑–∞–ø–∏—Ç –Ω–µ –∑'—è–≤–∏–≤—Å—è ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.
      </p>

      {/* –ö–Ω–æ–ø–∫–∞ ¬´–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ MetaMask¬ª ‚Äî –æ–≤–∞–ª—å–Ω–∞ —è–∫ –º–∏ —Ä–æ–±–∏–ª–∏ */}
      <button
        onClick={connect}
        disabled={state === 'connecting'}
        className="w-full rounded-full bg-black text-white text-lg py-4 px-6 shadow-md disabled:opacity-60 mb-3"
      >
        ü¶ä {state === 'connecting' ? '–ü—ñ–¥‚Äô—î–¥–Ω–∞–Ω–Ω—è‚Ä¶' : '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ MetaMask'}
      </button>

      {/* ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É¬ª —Å—Ç–∞–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—é –ø—ñ—Å–ª—è –∫–æ–Ω–µ–∫—Ç—É */}
      <button
        onClick={signEscrowApprove}
        disabled={state !== 'connected'}
        className="w-full rounded-full bg-pink-500 text-black text-lg py-4 px-6 shadow-md disabled:opacity-40"
      >
        üîí –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –µ—Å–∫—Ä–æ—É
      </button>

      <div className="mt-4">
        <button
          onClick={openInMMBrowser}
          className="rounded-md border px-3 py-2 text-sm"
        >
          –í—ñ–¥–∫—Ä–∏—Ç–∏ —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ
        </button>
      </div>

      {address && (
        <div className="mt-4 text-sm text-gray-600">
          –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ: <span className="font-mono">{address}</span>
        </div>
      )}

      {error && (
        <div className="mt-4 rounded-md bg-red-50 p-3 text-sm text-red-700">
          –ü–æ–º–∏–ª–∫–∞: {error}
        </div>
      )}
    </div>
  );
}

// src/components/UploadBehavior.tsx
import React, { useRef, useState } from 'react';
import { supabase } from '../lib/supabase';
import { uploadVideoToLighthouse } from '../lib/lighthouseUpload';
// –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: —è–∫—â–æ —Ö–æ—á–µ—à –≤–º—ñ—Ç–∏ –ø—Ä–∏–≤‚Äô—è–∑—É–≤–∞—Ç–∏ —Å–∞–º–µ –¥–æ —Å–ø–æ—Ä—É
import { uploadEvidenceAndAttach as attachToDispute } from '../lib/disputeApi';

type Props = {
  onClose?: () => void;
  // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∏
  disputeId?: string;   // —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–µ —è–∫ –¥–æ–∫–∞–∑ —Å–ø–æ—Ä—É
  scenarioId?: string;  // –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π (–¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ behavior –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω)
};

export default function UploadBehavior({ onClose, disputeId }: Props) {
  const inputRef = useRef<HTMLInputElement>(null);
  const [busy, setBusy] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const pickFile = () => inputRef.current?.click();

  const currentUserId = async () => {
    const { data } = await supabase.auth.getUser();
    const uid = data.user?.id;
    if (!uid) throw new Error('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏.');
    return uid;
  };

  const uploadViaLighthouseWithFallback = async (file: File, namespace: string) => {
    // 1) Lighthouse (–Ω–æ–≤–∞/—Å—Ç–∞—Ä–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞)
    try {
      // @ts-ignore ‚Äì –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å { scenarioId, files }
      const up = await uploadVideoToLighthouse({ scenarioId: namespace, files: [file] });
      const url = typeof up === 'string' ? up : up?.url;
      if (url) return url as string;
    } catch {
      // ignore ‚Äì —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞—Ä—É —Ñ—É–Ω–∫—Ü—ñ—é
    }
    try {
      // @ts-ignore ‚Äì —Å—Ç–∞—Ä–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ (file) => string | { url }
      const alt = await uploadVideoToLighthouse(file);
      if (typeof alt === 'string' && alt) return alt;
      if (typeof alt === 'object' && alt?.url) return alt.url as string;
    } catch {
      // ignore ‚Äì —Å–ø—Ä–æ–±—É—î–º–æ Supabase Storage
    }

    // 2) Supabase Storage —è–∫ fallback
    const ext = file.name.split('.').pop() || 'mp4';
    const path = `general/${Date.now()}-${Math.random().toString(36).slice(2)}.${ext}`;
    const { error: upErr } = await supabase.storage
      .from('dispute_evidence')
      .upload(path, file, { upsert: true, contentType: file.type });
    if (upErr) throw upErr;
    const { data: pub } = supabase.storage.from('dispute_evidence').getPublicUrl(path);
    return pub.publicUrl;
  };

  const insertPlainBehavior = async (userId: string, url: string) => {
    const { error: insErr } = await supabase.from('behaviors').insert([
      {
        author_id: userId,
        title: 'Video evidence',
        description: '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ StoryBar',
        ipfs_cid: null,
        file_url: url,
        is_dispute_evidence: false,
        dispute_id: null,
      },
    ]);
    if (insErr) throw insErr;
  };

  const onFile = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    setError(null);
    setBusy(true);
    try {
      const uid = await currentUserId();

      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ‚Üí –æ—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL (Lighthouse/Storage)
      const url = await uploadViaLighthouseWithFallback(file, disputeId || 'general');

      if (disputeId) {
        // –ü—Ä–∏–≤‚Äô—è–∑–∫–∞ —è–∫ –≤—ñ–¥–µ–æ–¥–æ–∫–∞–∑ —Å–ø–æ—Ä—É
        await attachToDispute(disputeId, file, uid);
      } else {
        // –ó–≤–∏—á–∞–π–Ω–∏–π behavior –±–µ–∑ —Å—Ü–µ–Ω–∞—Ä—ñ—é/—Å–ø–æ—Ä—É
        await insertPlainBehavior(uid, url);
      }

      // –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å—Ç—Ä—ñ—á—Ü—ñ + –∑–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É
      window.dispatchEvent(new CustomEvent('behaviorUploaded'));
      onClose?.();
    } catch (err: any) {
      setError(err?.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
      console.error('UploadBehavior error:', err);
    } finally {
      setBusy(false);
      e.target.value = '';
    }
  };

  return (
    <div
      className="upload-modal-backdrop"
      style={{
        position: 'fixed',
        inset: 0,
        background: 'rgba(0,0,0,.4)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 30000,
      }}
      onClick={onClose}
    >
      <div
        className="upload-modal"
        onClick={(ev) => ev.stopPropagation()}
        style={{
          width: 420,
          maxWidth: '95vw',
          background: '#fff',
          borderRadius: 16,
          boxShadow: '0 10px 30px rgba(0,0,0,.15)',
          padding: 20,
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <h3 style={{ margin: 0 }}>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ</h3>
          <button onClick={onClose} style={{ border: 'none', background: 'transparent', fontSize: 22 }}>
            √ó
          </button>
        </div>

        <p style={{ marginTop: 8, fontSize: 13, color: '#6b7280' }}>
          üì¶ <b>–£–≤–∞–≥–∞:</b> —Ä–æ–∑–º—ñ—Ä Behavior –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ <b>30MB</b>
        </p>

        {error && (
          <div style={{ marginTop: 8, color: '#dc2626', fontSize: 13 }}>
            {error}
          </div>
        )}

        <input
          ref={inputRef}
          type="file"
          accept="video/*"
          style={{ display: 'none' }}
          onChange={onFile}
        />

        <div style={{ marginTop: 16, display: 'flex', gap: 8 }}>
          <button
            onClick={pickFile}
            disabled={busy}
            className="btn"
            style={{
              flex: 1,
              padding: '10px 14px',
              borderRadius: 999,
              border: 'none',
              background: '#ffcdd6',
              cursor: busy ? 'not-allowed' : 'pointer',
            }}
          >
            {busy ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶' : 'üì• –û–±—Ä–∞—Ç–∏ –≤—ñ–¥–µ–æ'}
          </button>
          <button
            onClick={onClose}
            disabled={busy}
            className="btn"
            style={{
              padding: '10px 14px',
              borderRadius: 999,
              border: 'none',
              background: '#eee',
              cursor: busy ? 'not-allowed' : 'pointer',
            }}
          >
            –í—ñ–¥–º—ñ–Ω–∏—Ç–∏
          </button>
        </div>
      </div>
    </div>
  );
}

// src/components/UploadBehavior.tsx
import React, { useRef, useState } from 'react';
import { supabase } from '../lib/supabase';
import { uploadVideoToLighthouse } from '../lib/lighthouseUpload';
// –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: —è–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–∏–≤‚Äô—è–∑—É–≤–∞—Ç–∏ —Å–∞–º–µ –¥–æ —Å–ø–æ—Ä—É (–Ω–µ –±–ª–æ–∫—É—î –ø–æ—Ç—ñ–∫, –æ–±–≥–æ—Ä–Ω—É—Ç–æ –≤ try/catch)
import { uploadEvidenceAndAttach as attachToDispute } from '../lib/disputeApi';

type Props = {
  onClose?: () => void;
  /** –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π ‚Äî –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥–µ —è–∫ –¥–æ–∫–∞–∑ —Å–ø–æ—Ä—É (–ø–æ–∑–Ω–∞—á–∏–º–æ –≤ behaviors) */
  disputeId?: string;
  /** –ù–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä —ñ–º–µ–Ω –¥–ª—è Lighthouse; –Ω–∞ UX –Ω–µ –≤–ø–ª–∏–≤–∞—î */
  scenarioId?: string;
};

const MAX_MB = 30;
const ACCEPT_MIME = ['video/mp4', 'video/webm'] as const;

type LighthouseResult = { url?: string; cid?: string } | string | null | undefined;

export default function UploadBehavior({ onClose, disputeId, scenarioId }: Props) {
  const inputRef = useRef<HTMLInputElement>(null);
  const [busy, setBusy] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const pickFile = () => inputRef.current?.click();

  const getCurrentUserId = async () => {
    const { data, error } = await supabase.auth.getUser();
    if (error || !data?.user?.id) throw new Error('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç.');
    return data.user.id as string;
  };

  /** –ü—Ä–æ–±—É—î–º–æ –æ–±–∏–¥–≤—ñ –º–æ–∂–ª–∏–≤—ñ —Å–∏–≥–Ω–∞—Ç—É—Ä–∏ –≤–∞—à–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó uploadVideoToLighthouse */
  const tryLighthouse = async (file: File, ns: string): Promise<{ url?: string; cid?: string } | null> => {
    try {
      // –ù–æ–≤–∞/—Ä–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: uploadVideoToLighthouse({ scenarioId, files: [file] })
      // @ts-ignore ‚Äì —Ç—Ä–∏–º–∞—î–º–æ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å —ñ–∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏
      const res1: LighthouseResult = await uploadVideoToLighthouse({ scenarioId: ns, files: [file] });
      if (typeof res1 === 'string') return { url: res1 };
      if (res1 && typeof res1 === 'object' && (res1.url || res1.cid)) return { url: res1.url, cid: res1.cid };
    } catch {
      /* ignore ‚Äì —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–∞—Ä—É —Å–∏–≥–Ω–∞—Ç—É—Ä—É –Ω–∏–∂—á–µ */
    }
    try {
      // –°—Ç–∞—Ä–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞: uploadVideoToLighthouse(file) -> string | { url, cid? }
      // @ts-ignore ‚Äì —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å
      const res2: LighthouseResult = await uploadVideoToLighthouse(file);
      if (typeof res2 === 'string') return { url: res2 };
      if (res2 && typeof res2 === 'object' && (res2.url || res2.cid)) return { url: res2.url, cid: res2.cid };
    } catch {
      /* ignore ‚Äì –ø–æ–≤–µ—Ä–Ω–µ–º–æ null —ñ –ø—ñ–¥–µ–º–æ —É fallback */
    }
    return null;
  };

  /** Fallback —É Supabase Storage (bucket behaviors) */
  const uploadToStorage = async (uid: string, file: File): Promise<string> => {
    const safeName = file.name.replace(/\s+/g, '_');
    const path = `videos/${uid}/${Date.now()}_${Math.random().toString(36).slice(2)}_${safeName}`;
    const { error: upErr } = await supabase.storage
      .from('behaviors')
      .upload(path, file, { upsert: false, contentType: file.type || 'video/mp4', cacheControl: '3600' });
    if (upErr) throw upErr;
    const { data: pub } = supabase.storage.from('behaviors').getPublicUrl(path);
    if (!pub?.publicUrl) throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π URL.');
    return pub.publicUrl;
  };

  const handleFile = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—ó (—Ç–∏–ø + —Ä–æ–∑–º—ñ—Ä)
    if (!ACCEPT_MIME.includes(file.type as any)) {
      setError('–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–µ–æ MP4 –∞–±–æ WebM.'); e.target.value = ''; return;
    }
    if (file.size > MAX_MB * 1024 * 1024) {
      setError(`–†–æ–∑–º—ñ—Ä –≤—ñ–¥–µ–æ –ø–µ—Ä–µ–≤–∏—â—É—î ${MAX_MB}MB.`); e.target.value = ''; return;
    }

    setError(null);
    setBusy(true);
    try {
      const uid = await getCurrentUserId();

      // 1) Lighthouse (–∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ/–º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ), —ñ–Ω–∞–∫—à–µ fallback —É Storage
      const ns = scenarioId || disputeId || 'general';
      const light = await tryLighthouse(file, ns);

      let fileUrl: string | undefined = light?.url;
      const ipfsCid: string | null = light?.cid ?? null;

      if (!fileUrl) {
        fileUrl = await uploadToStorage(uid, file);
      }

      // 2) –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —É behaviors (—î–¥–∏–Ω–∏–π –¥–∂–µ—Ä–µ–ª–æ –ø—Ä–∞–≤–¥–∏ –¥–ª—è StoryBar/—Ñ—ñ–¥—É)
      const payload = {
        user_id: uid,                                 // üëà –∫–∞–Ω–æ–Ω—ñ—á–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞
        title: disputeId ? 'Video evidence' : null,
        description: disputeId ? '–î–æ–∫–∞–∑ –¥–ª—è —Å–ø–æ—Ä—É' : null,
        ipfs_cid: ipfsCid,                            // –±—É–¥–µ null, —è–∫—â–æ –Ω–µ –∑ Lighthouse
        file_url: fileUrl,                            // –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ
        is_dispute_evidence: !!disputeId,
        dispute_id: disputeId ?? null,
      };

      const { error: insErr } = await supabase.from('behaviors').insert([payload]);
      if (insErr) throw insErr;

      // 3) –î–æ–¥–∞—Ç–∫–æ–≤–æ: —Å—Ç–æ—Ä–æ–Ω–Ω—è –ø—Ä–∏–≤‚Äô—è–∑–∫–∞ –¥–æ —Å–ø–æ—Ä—É (–Ω–µ –±–ª–æ–∫—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
      if (disputeId) {
        try { await attachToDispute(disputeId, file, uid); } catch { /* ignore */ }
      }

      // 4) –ù–æ—Ç–∏—Ñ—ñ–∫—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ —Å–ª—É—Ö–∞—á—ñ (–¥–æ–¥–∞—Ç–∫–æ–≤–æ –¥–æ Supabase Realtime)
      window.dispatchEvent(new CustomEvent('behaviorUploaded'));

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª–∫—É
      onClose?.();
    } catch (err: any) {
      console.error('UploadBehavior error:', err);
      setError(err?.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.');
    } finally {
      setBusy(false);
      e.target.value = ''; // —Å–∫–∏–Ω—É—Ç–∏ input, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —Ñ–∞–π–ª –∑–Ω–æ–≤—É
    }
  };

  const handleBackdropClick = () => { if (!busy) onClose?.(); };

  return (
    <div
      className="upload-modal-backdrop"
      style={{
        position: 'fixed',
        inset: 0,
        background: 'rgba(0,0,0,.4)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 30000,
      }}
      onClick={handleBackdropClick}
    >
      <div
        className="upload-modal"
        onClick={(ev) => ev.stopPropagation()}
        style={{
          width: 420,
          maxWidth: '95vw',
          background: '#fff',
          borderRadius: 16,
          boxShadow: '0 10px 30px rgba(0,0,0,.15)',
          padding: 20,
        }}
      >
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <h3 style={{ margin: 0 }}>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ</h3>
          <button
            onClick={onClose}
            disabled={busy}
            style={{ border: 'none', background: 'transparent', fontSize: 22, cursor: busy ? 'not-allowed' : 'pointer' }}
            aria-label="–ó–∞–∫—Ä–∏—Ç–∏"
          >
            √ó
          </button>
        </div>

        <p style={{ marginTop: 8, fontSize: 13, color: '#6b7280' }}>
          MP4 / WebM, –º–∞–∫—Å–∏–º—É–º&nbsp;<b>{MAX_MB}MB</b>.
        </p>

        {error && (
          <div style={{ marginTop: 8, color: '#dc2626', fontSize: 13 }}>
            {error}
          </div>
        )}

        <input
          ref={inputRef}
          type="file"
          accept="video/mp4,video/webm"
          style={{ display: 'none' }}
          onChange={handleFile}
          disabled={busy}
        />

        <div style={{ marginTop: 16, display: 'flex', gap: 8 }}>
          <button
            onClick={pickFile}
            disabled={busy}
            className="btn"
            style={{
              flex: 1,
              padding: '10px 14px',
              borderRadius: 999,
              border: 'none',
              background: '#ffcdd6',
              color: '#000',
              fontWeight: 600,
              cursor: busy ? 'not-allowed' : 'pointer',
            }}
          >
            {busy ? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶' : 'üì• –û–±—Ä–∞—Ç–∏ –≤—ñ–¥–µ–æ'}
          </button>
          <button
            onClick={onClose}
            disabled={busy}
            className="btn"
            style={{
              padding: '10px 14px',
              borderRadius: 999,
              border: 'none',
              background: '#eee',
              cursor: busy ? 'not-allowed' : 'pointer',
            }}
          >
            –í—ñ–¥–º—ñ–Ω–∏—Ç–∏
          </button>
        </div>
      </div>
    </div>
  );
}

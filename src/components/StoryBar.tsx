// üìÑ src/components/StoryBar.tsx ‚Äî Behaviors —è–∫ Stories (INSERT-only)
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';
import UploadBehavior from './UploadBehavior';
import './StoryBar.css';
import DisputeBadge from './DisputeBadge';

interface Behavior {
  id: number;
  user_id: string | null;
  title: string | null;                 // –ø–æ–∫–∞–∑—É—î–º–æ —è–∫ –ø—ñ–¥–ø–∏—Å (—è–∫—â–æ —î)
  description: string | null;
  ipfs_cid: string | null;
  file_url?: string | null;             // fallback-–¥–∂–µ—Ä–µ–ª–æ
  created_at: string;
  is_dispute_evidence?: boolean | null; // –ø–æ–º—ñ—Ç–∫–∞ –¥–ª—è —Å–ø–æ—Ä—É
  dispute_id?: string | null;           // –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó —É —Å–ø—ñ—Ä
}

export default function StoryBar() {
  const [behaviors, setBehaviors] = useState<Behavior[]>([]);
  const [isUploadOpen, setIsUploadOpen] = useState(false);
  const navigate = useNavigate();

  const fetchBehaviors = async () => {
    const { data, error } = await supabase
      .from('behaviors')
      .select('id,user_id,title,description,ipfs_cid,file_url,created_at,is_dispute_evidence,dispute_id')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Failed to fetch behaviors:', error);
      return;
    }
    setBehaviors((data || []).map((b: any) => ({
      ...b,
      is_dispute_evidence: !!b.is_dispute_evidence,
    })));
  };

  useEffect(() => {
    fetchBehaviors();

    const subscription = supabase
      .channel('realtime:behaviors')
      .on(
        'postgres_changes',
        { event: 'INSERT', schema: 'public', table: 'behaviors' },
        () => fetchBehaviors()
      )
      .subscribe();

    const openHandler = () => setIsUploadOpen(true);
    window.addEventListener('behaviorUploaded', fetchBehaviors);
    window.addEventListener('openUploadModal', openHandler);

    return () => {
      supabase.removeChannel(subscription);
      window.removeEventListener('behaviorUploaded', fetchBehaviors);
      window.removeEventListener('openUploadModal', openHandler);
    };
  }, []);

  const openFeed = () => navigate('/behaviors');

  // –Ø–∫—â–æ ipfs_cid –ø–æ—Ä–æ–∂–Ω—ñ–π, –±–µ—Ä–µ–º–æ file_url
  const resolveSrc = (b: Behavior) =>
    b.ipfs_cid ? `https://gateway.lighthouse.storage/ipfs/${b.ipfs_cid}` : (b.file_url || '');

  return (
    <>
      <div className="story-bar" onClick={(e) => e.stopPropagation()}>
        {/* Add button */}
        <button
          type="button"
          className="story-item add-button"
          onClick={(e) => { e.stopPropagation(); setIsUploadOpen(true); }}
          onPointerDown={(e) => e.stopPropagation()}
          onMouseDown={(e) => e.stopPropagation()}
          aria-label="–î–æ–¥–∞—Ç–∏ Behavior"
          title="–î–æ–¥–∞—Ç–∏ Behavior"
        >
          <div className="story-circle">Ôºã</div>
          <div className="story-label">–î–æ–¥–∞—Ç–∏</div>
        </button>

        {/* Behaviors */}
        {behaviors.map((b) => (
          <div
            key={b.id}
            className="story-item"
            onClick={(e) => {
              e.stopPropagation();
              if (b.is_dispute_evidence && b.dispute_id) {
                navigate(`/behaviors?dispute=${b.dispute_id}`);
              } else {
                openFeed();
              }
            }}
            title={b.description || undefined}
          >
            <div className="story-circle" aria-label={b.title ?? 'Behavior'}>
              <video
                src={resolveSrc(b)}
                autoPlay
                loop
                muted
                playsInline
                preload="auto"
                onEnded={(e) => { const v = e.currentTarget; v.currentTime = 0; v.play(); }}
                className="story-video"
              />
              {/* –±–µ–π–¥–∂ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫—Ä—É–∂–µ—á–∫–∞ (–ø–æ–∑–∏—Ü—ñ–æ–Ω—É—î—Ç—å—Å—è –∞–±—Å–æ–ª—é—Ç–æ–º) */}
              <DisputeBadge show={b.is_dispute_evidence} />
            </div>

            {b.title && <div className="story-label">{b.title}</div>}
          </div>
        ))}
      </div>

      {isUploadOpen && (
        <UploadBehavior onClose={() => setIsUploadOpen(false)}>
          <div className="upload-hint">
            üì¶ <strong>–£–≤–∞–≥–∞:</strong> —Ä–æ–∑–º—ñ—Ä Behavior –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ <strong>30MB</strong>
          </div>
        </UploadBehavior>
      )}
    </>
  );
}

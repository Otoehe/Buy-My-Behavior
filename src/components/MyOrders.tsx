/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { supabase } from '../lib/supabase';

import { getDealOnChain, confirmCompletionOnChain, lockFunds } from '../lib/escrowContract';
import { pushNotificationManager as pushNotificationManager, useNotifications } from '../lib/pushNotifications';
import { useRealtimeNotifications } from '../lib/realtimeNotifications';
import CelebrationToast from './CelebrationToast';
import './MyOrders.css';

import type { DisputeRow } from '../lib/tables';
import { initiateDispute, getLatestDisputeByScenario } from '../lib/disputeApi';

import ScenarioCard, { Scenario, Status } from './ScenarioCard';
import RateModal from './RateModal';

import { connectWallet, ensureBSC, type Eip1193Provider } from '../lib/wallet';

// –Ø–∫—â–æ —Ä–∞–Ω—ñ—à–µ –±—É–≤ –∞–≤—Ç–æ–∫–æ–Ω–µ–∫—Ç —Ç—É—Ç ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ/–∫–æ–º–µ–Ω—Ç—É—î–º–æ, —â–æ–± –ù–ï –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ MetaMask –Ω–∞ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ.
// ‚ùå useEffect(() => { quickOneClickSetup(); }, []);

const SOUND = new Audio('/notification.wav');
SOUND.volume = 0.8;

export default function MyOrders(): JSX.Element {
  const [scenarios, setScenarios] = useState<Scenario[]>([]);
  const [isBusy, setBusy] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // ==== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ (–∑–∞–ª–∏—à–∞—é –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥; –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å —Å–≤–æ—é –≤–∏–±—ñ—Ä–∫—É) ====
  useEffect(() => {
    let alive = true;
    (async () => {
      const { data, error } = await supabase
        .from<Scenario>('scenarios') // —Ç–∞–±–ª–∏—Ü—è –º–æ–∂–µ —É –≤–∞—Å –Ω–∞–∑–∏–≤–∞—Ç–∏—Å—å —ñ–Ω–∞–∫—à–µ
        .select('*')
        .order('created_at', { ascending: false })
        .limit(50);
      if (!alive) return;
      if (error) {
        console.error(error);
        setError(error.message);
      } else if (data) {
        setScenarios(data as unknown as Scenario[]);
      }
    })();
    return () => {
      alive = false;
    };
  }, []);

  // ==== –ù–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó/Realtime (–∑–∞–ª–∏—à–∏–≤ –≤–∏–∫–ª–∏–∫–∏-—Å—Ç–∞–±–∏, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ –ª–æ–≥—ñ–∫—É) ====
  useNotifications();
  useRealtimeNotifications();

  // ==== –ö–ù–û–ü–ö–ê: –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –µ—Å–∫—Ä–æ—É –∫–æ—à—Ç–∏ ====
  const handleReserveEscrow = useCallback(
    async (scenario: Scenario) => {
      setError(null);
      setBusy(true);
      try {
        // 1) –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è ‚Äî —Å–∞–º–µ —Ç—É—Ç –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è MetaMask
        const provider: Eip1193Provider = await connectWallet();

        // 2) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞/–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–µ—Ä–µ–∂—ñ (BSC –∞–±–æ –≤–∞—à–∞)
        await ensureBSC(provider);

        // 3) Approve (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ) + Lock
        await lockFunds(provider, {
          scenarioId: scenario.id,
          usdtAmount: scenario.amount,               // üëà –ø—ñ–¥—Å—Ç–∞–≤—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É –Ω–∞–∑–≤—É –ø–æ–ª—è (—Å—É–º–∞)
          recipient: (scenario as any).executor_wallet || (scenario as any).executorWallet, // üëà –≥–∞–º–∞–Ω–µ—Ü—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è
        });

        // 4) (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω —É–≥–æ–¥–∏/—Å–ø–∏—Å–æ–∫
        // const chain = await getDealOnChain(provider, scenario.id);
        // await refreshFromSupabaseOrOnchain();

        // 5) –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ñ—ñ–¥–±–µ–∫:
        try { SOUND.currentTime = 0; SOUND.play().catch(() => undefined); } catch {}
        pushNotificationManager?.show?.('–ö–æ—à—Ç–∏ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–æ –≤ –µ—Å–∫—Ä–æ—É ‚úÖ');
      } catch (e: any) {
        console.error(e);
        setError(e?.message ?? '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—à—Ç—ñ–≤');
      } finally {
        setBusy(false);
      }
    },
    []
  );

  // ==== –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (—ñ—Å–Ω—É—é—á–∞ –ª–æ–≥—ñ–∫–∞ –ª–∏—à–∞—î—Ç—å—Å—è) ====
  const handleConfirmDone = useCallback(
    async (scenario: Scenario) => {
      setError(null);
      setBusy(true);
      try {
        const provider: Eip1193Provider = await connectWallet();
        await ensureBSC(provider);
        await confirmCompletionOnChain(provider, { scenarioId: scenario.id });
        pushNotificationManager?.show?.('–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ');
      } catch (e: any) {
        console.error(e);
        setError(e?.message ?? '–ù–µ –≤–¥–∞–ª–æ—Å—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è');
      } finally {
        setBusy(false);
      }
    },
    []
  );

  // ==== –î–∏—Å–ø—É—Ç (–∑–∞–ª–∏—à–µ–Ω–æ —è–∫ –±—É–ª–æ; –≤–∏–∫–ª–∏—á—Ç–µ –∑–∞ –≤–∞—à–∏–º UI) ====
  const handleDispute = useCallback(
    async (scenario: Scenario) => {
      setError(null);
      setBusy(true);
      try {
        const row: DisputeRow = await initiateDispute(scenario.id);
        pushNotificationManager?.show?.('–°—Ç–≤–æ—Ä–µ–Ω–æ –¥–∏—Å–ø—É—Ç üìù');
      } catch (e: any) {
        console.error(e);
        setError(e?.message ?? '–ù–µ –≤–¥–∞–ª–æ—Å—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Å–ø—É—Ç');
      } finally {
        setBusy(false);
      }
    },
    []
  );

  return (
    <div className="my-orders">
      <header className="bmb-header">
        <h1>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>
        <div className="bmb-sub">üîî –£–≤—ñ–º–∫–Ω–µ–Ω–æ ¬∑ üõ∞ realtime –∞–∫—Ç–∏–≤–Ω–∏–π</div>
      </header>

      {error && <div className="bmb-error">{error}</div>}
      {isBusy && <div className="bmb-busy">–ü—Ä–æ–≤–æ–¥–∏–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é‚Ä¶</div>}

      <div className="bmb-list">
        {scenarios.map((scn) => (
          <ScenarioCard
            key={scn.id}
            scenario={scn}
            onReserve={() => handleReserveEscrow(scn)}        // ‚¨ÖÔ∏è –¢–£–¢ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è MetaMask
            onConfirmDone={() => handleConfirmDone(scn)}
            onDispute={() => handleDispute(scn)}
          />
        ))}
      </div>

      <CelebrationToast />
    </div>
  );
}

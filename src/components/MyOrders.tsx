import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { supabase } from '../lib/supabase';
import {
  lockFunds,
  confirmCompletionOnChain,
  getDealOnChain,
} from '../lib/escrowContract';
import { getSigner } from '../lib/web3';
import { ethers } from 'ethers';
import { pushNotificationManager, useNotifications } from '../lib/pushNotifications';
import { useRealtimeNotifications } from '../lib/realtimeNotifications';
import CelebrationToast from './CelebrationToast';
import './MyOrders.css';

import type { DisputeRow } from '../lib/tables';
import { initiateDispute, getLatestDisputeByScenario } from '../lib/disputeApi';

import ScenarioCard, { Scenario, Status } from './ScenarioCard';
import RateModal from './RateModal';
import { upsertRating } from '../lib/ratings';

// ‚¨áÔ∏è –¥–æ–¥–∞–Ω–æ: –∫–ª–∞—Å–∏—á–Ω–∏–π —Å—Ç–µ–ø–µ—Ä
import { StatusStripClassic } from './StatusStripClassic';

const SOUND = new Audio('/notification.wav');
SOUND.volume = 0.8;

// ‚Ä¶ (—É—Å—ñ –≤–∞—à—ñ —Ö–µ–ª–ø–µ—Ä–∏ –±–µ–∑ –∑–º—ñ–Ω)

// (—Ñ–∞–π–ª –¥–∞–ª—ñ –±–µ–∑ —Å–∫–æ—Ä–æ—á–µ–Ω—å)
export default function MyOrders() {
  // ...–≤–µ—Å—å —ñ—Å–Ω—É—é—á–∏–π –∫–æ–¥ –∑–≤–µ—Ä—Ö—É –±–µ–∑ –∑–º—ñ–Ω...

  return (
    <div className="scenario-list">
      <div className="scenario-header">
        <h2>–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
        {headerRight}
      </div>

      {list.length === 0 && <div className="empty-hint">–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å.</div>}

      {list.map(s => {
        const step = stepOf(s);
        const onlyAgree   = step === 1;
        const onlyLock    = step === 2;
        const onlyConfirm = step === 3;

        return (
          <div key={s.id} style={{ marginBottom: 12 }}>
            {/* ‚¨áÔ∏è –Ω–æ–≤–µ: –ø–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å —É–≥–æ–¥–∏ –Ω–∞–¥ –∫–∞—Ä—Ç–∫–æ—é */}
            <div style={{ marginBottom: 10 }}>
              <StatusStripClassic state={s} />
            </div>

            <ScenarioCard
              role="customer"
              s={s}
              // —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É ‚Äî —è–∫ –±—É–ª–æ (—Å–∫–∏–¥–∞—î –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è)
              onChangeDesc={(v) => setLocal(s.id, { description: v })}
              onCommitDesc={async (v) => {
                if (s.status === 'confirmed') return;
                await supabase.from('scenarios').update({
                  description: v,
                  status: 'pending',
                  is_agreed_by_customer: false,
                  is_agreed_by_executor: false
                }).eq('id', s.id);

                try { SOUND.currentTime = 0; await SOUND.play(); } catch {}
                await pushNotificationManager.showNotification({
                  title: 'üìù –û–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ (–∑–∞–º–æ–≤–Ω–∏–∫)',
                  body: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–æ–≤—É –ø–æ–≥–æ–¥–∏—Ç–∏ —É–≥–æ–¥—É.',
                  tag: `scenario-update-${s.id}-desc`,
                  requireSound: true
                });
              }}

              // —Å—É–º–∞: –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª–µ >= 0 (–Ω—É–ª—å –æ–∫)
              onChangeAmount={(v) => setLocal(s.id, { donation_amount_usdt: v })}
              onCommitAmount={async (v) => {
                if (s.status === 'confirmed') return;
                if (v !== null) {
                  const isInt = Number.isInteger(v);
                  if (!isInt || v < 0) {
                    alert('–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º (0,1,2,3,...)');
                    setLocal(s.id, { donation_amount_usdt: null });
                    return;
                  }
                }
                await supabase.from('scenarios').update({
                  donation_amount_usdt: v,
                  status: 'pending',
                  is_agreed_by_customer: false,
                  is_agreed_by_executor: false
                }).eq('id', s.id);

                try { SOUND.currentTime = 0; await SOUND.play(); } catch {}
                await pushNotificationManager.showNotification({
                  title: 'üí∞ –°—É–º–∞ USDT –æ–Ω–æ–≤–ª–µ–Ω–∞ (–∑–∞–º–æ–≤–Ω–∏–∫)',
                  body: '–ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–æ–≤—É –ø–æ–≥–æ–¥–∏—Ç–∏ —É–≥–æ–¥—É.',
                  tag: `scenario-update-${s.id}-amount`,
                  requireSound: true
                });
              }}

              onAgree={() => handleAgree(s)}
              onLock={() => handleLock(s)}
              onConfirm={() => handleConfirm(s)}
              onDispute={() => handleDispute(s)}
              onOpenLocation={() => hasCoords(s) && window.open(`https://www.google.com/maps?q=${s.latitude},${s.longitude}`, '_blank')}

              canAgree={onlyAgree && !agreeBusy[s.id]}
              canLock={onlyLock && !lockBusy[s.id]}
              canConfirm={onlyConfirm && !confirmBusy[s.id]}
              canDispute={canDispute(s)}

              hasCoords={hasCoords(s)}
              busyAgree={!!agreeBusy[s.id]}
              busyLock={!!lockBusy[s.id]}
              busyConfirm={!!confirmBusy[s.id]}

              hideLock={!onlyLock}
              hideConfirm={!onlyConfirm}
              hideDispute={!canDispute(s)}

              isRated={s.status === 'confirmed' && ratedOrders.has(s.id)}
              onOpenRate={() => s.status === 'confirmed' && !ratedOrders.has(s.id) && openRateFor(s)}
            />
          </div>
        );
      })}

      <CelebrationToast open={toast} variant="customer" onClose={() => setToast(false)} />

      <RateModal
        open={rateOpen}
        score={rateScore}
        comment={rateComment}
        onChangeScore={setRateScore}
        onChangeComment={setRateComment}
        onCancel={() => setRateOpen(false)}
        onSave={saveRating}
        disabled={rateBusy}
      />
    </div>
  );
}

// src/components/EvidenceUploadButton.tsx
import React, { useRef, useState } from 'react';
import { uploadEvidence } from '../lib/lighthouseUpload';
import { supabase } from '../lib/supabase';

type Props = {
  scenarioId: string;
  // —è–∫—â–æ —Ç—Ä–µ–±–∞ ‚Äî —â–æ —Ä–æ–±–∏—Ç–∏ –∑ URL –ø—ñ—Å–ª—è –∞–ø–ª–æ–∞–¥—É
  onUploaded?: (url: string) => void;
};

export default function EvidenceUploadButton({ scenarioId, onUploaded }: Props) {
  const fileRef = useRef<HTMLInputElement>(null);
  const [busy, setBusy] = useState(false);
  const [opening, setOpening] = useState(false); // –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É

  const openDialog = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (busy || opening) return;
    setOpening(true);
    fileRef.current?.click();
  };

  const onChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    try {
      const files = e.target.files;
      if (!files || !files.length) return; // –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ —Å–∫–∞—Å—É–≤–∞—Ç–∏
      setBusy(true);

      const res = await uploadEvidence({ scenarioId, files });
      // –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –≤–∞—à—É –ë–î (–ø—Ä–∏–∫–ª–∞–¥: –ø–æ–ª–µ evidence_url —É disputes)
      await supabase
        .from('disputes')
        .update({ evidence_url: res.url })
        .eq('scenario_id', scenarioId)
        .eq('status', 'open');

      onUploaded?.(res.url);
      alert(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (${res.storage}): ${res.url}`);
    } catch (err: any) {
      console.error(err);
      alert(err?.message || '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    } finally {
      setBusy(false);
      setOpening(false);
      if (fileRef.current) fileRef.current.value = ''; // –¥–æ–∑–≤–æ–ª—è—î –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —Ñ–∞–π–ª —â–µ —Ä–∞–∑
    }
  };

  return (
    <>
      <button type="button" className="btn" onClick={openDialog} disabled={busy}>
        {busy ? '‚Ä¶' : 'üìº –ó–ê–í–ê–ù–¢–ê–ñ–ò–¢–ò –í–Ü–î–ï–û–î–û–ö–ê–ó'}
      </button>

      <input
        ref={fileRef}
        type="file"
        accept="video/*"
        hidden
        onClick={(e) => {
          // —Ö–∞–∫, —â–æ–± —â–æ—Ä–∞–∑—É –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–±—Ä–∞—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —Ñ–∞–π–ª
          (e.currentTarget as HTMLInputElement).value = '';
        }}
        onChange={onChange}
      />
    </>
  );
}

// src/components/NavigationBar.tsx ‚Äî –º–æ–±–∞–π–ª-—Ñ—å–æ—Ä—Å—Ç, –º–æ–¥–∞–ª–∫–∞ –ø–æ–≤–µ—Ä—Ö —É—Å—å–æ–≥–æ, –±—É—Ä–≥–µ—Ä –∑ –¢–†–¨–û–• –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–ò–• –ª—ñ–Ω—ñ–π
import React, { useEffect, useState } from 'react';
import { NavLink } from 'react-router-dom';
import { createPortal } from 'react-dom';

const DESKTOP_BP = 992; // breakpoint –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø—É

const NavigationBar: React.FC = () => {
  const [isDesktop, setIsDesktop] = useState(false); // mobile-first
  const [isOpen, setIsOpen] = useState(false);

  const toggleMenu = () => setIsOpen(v => !v);
  const closeMenu = () => setIsOpen(false);

  // –í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –µ–∫—Ä–∞–Ω–∞
  useEffect(() => {
    if (typeof window === 'undefined' || !window.matchMedia) return;
    const mq = window.matchMedia(`(min-width:${DESKTOP_BP}px)`);
    const handler = (e: MediaQueryList | MediaQueryListEvent) => {
      const match = 'matches' in e ? e.matches : (e as MediaQueryList).matches;
      setIsDesktop(match);
      if (match) setIsOpen(false);
    };
    handler(mq);
    mq.addEventListener('change', handler);
    return () => mq.removeEventListener('change', handler);
  }, []);

  // –ë–ª–æ–∫—É—î–º–æ —Å–∫—Ä–æ–ª —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –∫–æ–ª–∏ –º–æ–¥–∞–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É
  useEffect(() => {
    if (!isDesktop) {
      const prevBodyOverflow = document.body.style.overflow;
      const prevHtmlOverflow = (document.documentElement && document.documentElement.style.overflow) || '';
      document.body.style.overflow = isOpen ? 'hidden' : prevBodyOverflow || '';
      document.documentElement.style.overflow = isOpen ? 'hidden' : prevHtmlOverflow || '';
      return () => {
        document.body.style.overflow = prevBodyOverflow || '';
        document.documentElement.style.overflow = prevHtmlOverflow || '';
      };
    }
  }, [isOpen, isDesktop]);

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ Esc
  useEffect(() => {
    const onKey = (e: KeyboardEvent) => {
      if (e.key === 'Escape') closeMenu();
    };
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, []);

  return (
    <nav style={styles.nav}>
      <div style={styles.container}>
        <div style={styles.logo}>Buy My Behavior</div>

        {/* –ë—É—Ä–≥–µ—Ä (–ø—Ä–∞–≤–æ—Ä—É—á). –ù–∞ –º–æ–±—ñ–ª—å–Ω–æ–º—É –≤–∏–¥–Ω–æ, –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø—ñ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ */}
        <button
          onClick={toggleMenu}
          aria-label="Toggle menu"
          aria-expanded={isOpen}
          aria-controls="mobile-menu"
          style={{ ...styles.burgerBtn, display: isDesktop ? 'none' : 'inline-flex' }}
        >
          {/* ‚ñº‚ñº BURGER ICON (3 HORIZONTAL LINES) ‚Äî JSX ‚ñº‚ñº */}
          <span style={styles.hbar} />
          <span style={styles.hbar} />
          <span style={styles.hbar} />
          {/* ‚ñ≤‚ñ≤ BURGER ICON (3 VERTICAL LINES) ‚Äî JSX ‚ñ≤‚ñ≤ */}
        </button>

        {/* –î–µ—Å–∫—Ç–æ–ø–Ω—ñ –ª—ñ–Ω–∫–∏ ‚Äî —è–∫ –±—É–ª–∏ */}
        <div
          style={{
            ...styles.linksDesktop,
            display: isDesktop ? 'flex' : 'none',
          }}
        >
          <NavLink to="/register" onClick={closeMenu} style={({ isActive }) => linkStyle({ isActive })}>
            –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
          </NavLink>
          <NavLink to="/profile" onClick={closeMenu} style={({ isActive }) => linkStyle({ isActive })}>
            –ü—Ä–æ—Ñ—ñ–ª—å
          </NavLink>
          <NavLink to="/map" onClick={closeMenu} style={({ isActive }) => linkStyle({ isActive })}>
            –í–∏–±—Ä–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
          </NavLink>
          <NavLink to="/my-orders" onClick={closeMenu} style={({ isActive }) => linkStyle({ isActive })}>
            –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </NavLink>
          <NavLink to="/received" onClick={closeMenu} style={({ isActive }) => linkStyle({ isActive })}>
            –û—Ç—Ä–∏–º–∞–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
          </NavLink>
          <NavLink to="/manifest" onClick={closeMenu} style={({ isActive }) => linkStyle({ isActive })}>
            –ú–∞–Ω—ñ—Ñ–µ—Å—Ç
          </NavLink>
        </div>
      </div>

      {/* –ú–æ–±—ñ–ª—å–Ω–∞ –º–æ–¥–∞–ª–∫–∞ –ø–æ–≤–µ—Ä—Ö –£–°–¨–û–ì–û (–ø–æ—Ä—Ç–∞–ª —É <body>) */}
      {!isDesktop && isOpen && createPortal(
        <div role="dialog" aria-modal="true" id="mobile-menu" style={styles.modalBackdrop} onClick={closeMenu}>
          <div style={styles.modalPanel} onClick={(e) => e.stopPropagation()}>
            <div style={styles.modalHeader}>
              <div style={styles.logo}>Buy My Behavior</div>
              <button aria-label="Close menu" onClick={closeMenu} style={styles.closeBtn}>√ó</button>
            </div>
            <nav style={styles.modalLinks}>
              <NavLink to="/profile" onClick={closeMenu} style={({ isActive }) => modalLinkStyle({ isActive })}>
                –ü—Ä–æ—Ñ—ñ–ª—å
              </NavLink>
              <NavLink to="/map" onClick={closeMenu} style={({ isActive }) => modalLinkStyle({ isActive })}>
                –í–∏–±—Ä–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
              </NavLink>
              <NavLink to="/my-orders" onClick={closeMenu} style={({ isActive }) => modalLinkStyle({ isActive })}>
                –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
              </NavLink>
              <NavLink to="/received" onClick={closeMenu} style={({ isActive }) => modalLinkStyle({ isActive })}>
                –û—Ç—Ä–∏–º–∞–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
              </NavLink>
              <NavLink to="/manifest" onClick={closeMenu} style={({ isActive }) => modalLinkStyle({ isActive })}>
                –ú–∞–Ω—ñ—Ñ–µ—Å—Ç
              </NavLink>
              <NavLink to="/register" onClick={closeMenu} style={({ isActive }) => modalLinkStyle({ isActive })}>
                –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
              </NavLink>
            </nav>
          </div>
        </div>,
        document.body
      )}
    </nav>
  );
};

const styles: Record<string, React.CSSProperties> = {
  nav: {
    backgroundColor: '#ffffff',
    borderBottom: '1px solid #eee',
    padding: '12px 16px',
    fontFamily: 'sans-serif',
    position: 'sticky' as 'sticky',
    top: 0,
    zIndex: 1000,
  },
  container: {
    maxWidth: '1100px',
    margin: '0 auto',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    gap: '12px',
  },
  logo: {
    fontWeight: 700,
    fontSize: '20px',
    color: '#222',
    lineHeight: 1,
    userSelect: 'none',
  },

  // –ë—É—Ä–≥–µ—Ä –∑ —Ç—Ä—å–æ—Ö –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–ò–• —Ä–∏—Å–æ–∫
  burgerBtn: {
    padding: 8,
    background: 'none',
    border: '1px solid #ddd',
    borderRadius: 10,
    cursor: 'pointer',
    alignItems: 'center',
    justifyContent: 'center',
    flexDirection: 'column', // —Ä–æ–∑–º—ñ—â—É—î —Å–º—É–∂–∫–∏ –æ–¥–Ω–∞ –Ω–∞–¥ –æ–¥–Ω–æ—é
    gap: 4,
    display: 'inline-flex',
  },
  // ‚ñº‚ñº BURGER ICON (3 HORIZONTAL LINES) ‚Äî STYLES ‚ñº‚ñº
  hbar: {
    width: 22,          // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ —Å–º—É–∂–∫–∞
    height: 2,
    backgroundColor: '#222',
    borderRadius: 2,
    display: 'block',
  },
  // ‚ñ≤‚ñ≤ BURGER ICON (3 HORIZONTAL LINES) ‚Äî STYLES ‚ñ≤‚ñ≤

  // –î–µ—Å–∫—Ç–æ–ø–Ω—ñ –ª—ñ–Ω–∫–∏
  linksDesktop: {
    gap: '24px',
    alignItems: 'center',
  },

  // –ú–æ–¥–∞–ª–∫–∞ (–æ–≤–µ—Ä–ª–µ–π –≤–∏—â–µ –∑–∞ –≤—Å–µ)
  modalBackdrop: {
    position: 'fixed',
    inset: 0,
    background: 'rgba(0,0,0,0.45)',
    zIndex: 999999, // –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—î –±—É–¥—å-—â–æ (StoryBar, –∫–∞—Ä—Ç–∏, –≤—ñ–¥–µ–æ —Ç–æ—â–æ)
    display: 'flex',
    alignItems: 'flex-start',
    justifyContent: 'center',
    paddingTop: 40,
    paddingLeft: 16,
    paddingRight: 16,
  },
  modalPanel: {
    width: '100%',
    maxWidth: 440,
    background: '#fff',
    borderRadius: 16,
    boxShadow: '0 14px 40px rgba(0,0,0,0.25)',
    padding: 16,
    fontFamily: 'sans-serif', // üî¥ –Ñ–î–ò–ù–ò–ô –î–û–î–ê–¢–û–ö: —Ç–æ–π —Å–∞–º–∏–π —à—Ä–∏—Ñ—Ç, —â–æ –π —É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞–≤–±–∞—Ä—É
  },
  modalHeader: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  closeBtn: {
    background: 'none',
    border: 'none',
    fontSize: 28,
    lineHeight: 1,
    cursor: 'pointer',
    color: '#222',
  },
  modalLinks: {
    display: 'flex',
    flexDirection: 'column',
    gap: 14,
    paddingTop: 8,
  },
};

const linkStyle = ({ isActive }: { isActive: boolean }): React.CSSProperties => ({
  textDecoration: 'none',
  color: isActive ? '#000' : '#666',
  fontWeight: 500,
  fontSize: 16,
  borderBottom: isActive ? '2px solid #000' : '2px solid transparent',
  paddingBottom: 2,
  transition: '0.2s',
});

const modalLinkStyle = ({ isActive }: { isActive: boolean }): React.CSSProperties => ({
  textDecoration: 'none',
  color: isActive ? '#000' : '#333',
  fontWeight: 600,
  fontSize: 18,
  padding: '10px 12px',
  borderRadius: 10,
  background: isActive ? '#f6f6f6' : 'transparent',
});

export default NavigationBar;

import React, { useState } from 'react';
import { ethers } from 'ethers';
import { supabase } from '../lib/supabase';
import { useNavigate } from 'react-router-dom';

function openBmb(payload: {
  kind?: 'success' | 'warning' | 'error' | 'confirm' | 'tx' | 'info' | 'magic' | 'congratsCustomer' | 'congratsPerformer',
  title?: React.ReactNode,
  subtitle?: React.ReactNode,
  actionLabel?: string,
}) {
  window.dispatchEvent(new CustomEvent('bmb:modal:open', { detail: payload }));
}

export default function Login() {
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const loginWithWallet = async () => {
    try {
      setLoading(true);

      if (!window.ethereum) {
        openBmb({
          kind: 'warning',
          title: 'MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          subtitle: '–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å MetaMask –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.',
          actionLabel: 'OK',
        });
        return;
      }

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send('eth_requestAccounts', []);
      const signer = provider.getSigner();
      const address = await signer.getAddress();

      const message = `BuyMyBehavior Sign-In\nWallet: ${address}\nTime: ${Date.now()}`;
      const signature = await signer.signMessage(message);
      const recovered = ethers.utils.verifyMessage(message, signature);

      if (recovered.toLowerCase() !== address.toLowerCase()) {
        openBmb({
          kind: 'error',
          title: '–ü—ñ–¥–ø–∏—Å –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è',
          subtitle: '–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
          actionLabel: 'OK',
        });
        return;
      }

      // 1) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –ø—Ä–æ—Ñ—ñ–ª—å (–±–µ–∑ –∫–∏–¥–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∫–æ–ª–∏ –Ω–µ–º–∞—î)
      const { data: existing, error: selectErr } = await supabase
        .from('profiles')
        .select('id')
        .eq('wallet_address', address)
        .maybeSingle();

      if (selectErr) {
        // –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ ‚Äî –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –¥–æ upsert
        console.warn('profiles select warning:', selectErr.message);
      }

      // 2) –°—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –ø–æ –∫–ª—é—á—É wallet_address
      const { error: upsertError } = await supabase
        .from('profiles')
        .upsert(
          { wallet_address: address },     // –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è –¥–æ–¥–∞–º–æ –∑–≥–æ–¥–æ–º
          { onConflict: 'wallet_address' } // –∫–ª—é—á —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
        );

      if (upsertError) {
        openBmb({
          kind: 'error',
          title: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é',
          subtitle: upsertError.message,
          actionLabel: 'OK',
        });
        return;
      }

      localStorage.setItem('wallet_address', address);

      // –†–µ–¥–∏—Ä–µ–∫—Ç –æ–¥—Ä–∞–∑—É —É "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", —è–∫ –ø—Ä–æ—Å–∏–≤
      navigate('/my-orders');
    } catch (err: any) {
      openBmb({
        kind: 'error',
        title: '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ MetaMask',
        subtitle: err?.message || '–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
        actionLabel: 'OK',
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={wrapper}>
      <div style={card}>
        <h1 style={title}>–í—Ö—ñ–¥ —á–µ—Ä–µ–∑ MetaMask</h1>
        <button onClick={loginWithWallet} style={btnOval} disabled={loading}>
          {loading ? '–ó–∞—á–µ–∫–∞–π—Ç–µ‚Ä¶' : 'ü¶ä –£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ MetaMask'}
        </button>
        <button onClick={() => navigate('/my-orders')} style={btnSecondary}>
          –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É BMB
        </button>
      </div>
    </div>
  );
}

const wrapper: React.CSSProperties = {
  height: '100vh',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  background: '#fff',
};

const card: React.CSSProperties = {
  padding: 24,
  borderRadius: 16,
  background: '#ffcdd6',
  boxShadow: '0 8px 30px rgba(0, 0, 0, 0.1)',
  textAlign: 'center',
};

const title: React.CSSProperties = {
  fontSize: 24,
  fontWeight: 700,
  marginBottom: 20,
};

const btnOval: React.CSSProperties = {
  backgroundColor: '#000',
  color: '#fff',
  padding: '14px 32px',
  fontSize: 16,
  fontWeight: 600,
  borderRadius: 999,
  border: 'none',
  cursor: 'pointer',
  width: '100%',
  maxWidth: 280,
  margin: '12px auto',
};

const btnSecondary: React.CSSProperties = {
  backgroundColor: '#fff',
  color: '#000',
  padding: '12px 24px',
  fontSize: 15,
  fontWeight: 500,
  borderRadius: 999,
  border: '2px solid #000',
  marginTop: 12,
  cursor: 'pointer',
  width: '100%',
  maxWidth: 240,
  marginInline: 'auto',
};

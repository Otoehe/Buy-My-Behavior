import React, { useCallback, useEffect, useMemo, useState } from "react";
import { supabase } from "../lib/supabase";
import { ethers } from "ethers";
import { useNavigate, useSearchParams } from "react-router-dom";

// ----- UI/Env -----
type Phase = "idle" | "sending" | "sent" | "error";

const APP_URL =
  (import.meta as any).env?.VITE_PUBLIC_APP_URL ||
  (typeof window !== "undefined" ? window.location.origin : "https://buymybehavior.com");

// BMB –º–æ–¥–∞–ª–∫–∏
function openBmb(payload: {
  kind?:
    | "success"
    | "warning"
    | "error"
    | "confirm"
    | "tx"
    | "info"
    | "magic"
    | "congratsCustomer"
    | "congratsPerformer";
  title?: React.ReactNode;
  subtitle?: React.ReactNode;
  actionLabel?: string;
  noBackdropClose?: boolean;
  hideClose?: boolean;
}) {
  window.dispatchEvent(new CustomEvent("bmb:modal:open", { detail: payload }));
}
function closeBmb() {
  window.dispatchEvent(new Event("bmb:modal:close"));
}

export default function Register() {
  const navigate = useNavigate();
  const [params] = useSearchParams();

  const [email, setEmail] = useState("");
  const [refWord, setRefWord] = useState(params.get("ref") || "");
  const [phase, setPhase] = useState<Phase>("idle");
  const [busyBtn, setBusyBtn] = useState<string | null>(null);

  const redirectTo = useMemo(() => `${APP_URL}/auth/callback?next=/map`, []);

  // üí° –ù–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫: –ø—Ä–∏ –∑–∞—Ö–æ–¥—ñ –Ω–∞ /register –∑–∞–∫—Ä–∏—î–º–æ –±—É–¥—å-—è–∫—ñ –∑–∞–ª–∏—à–∫–æ–≤—ñ –º–æ–¥–∞–ª–∫–∏,
  // —ñ –ø—Ä–æ–∫—Ä—É—Ç–∏–º–æ –¥–æ –≤–µ—Ä—Ö—É. –¢–∞–∫–æ–∂ –¥–æ–¥–∞–º–æ –∫–ª–∞—Å –¥–æ body –¥–ª—è –¥–µ–±–∞–≥—É, —è–∫—â–æ —Ç—Ä–µ–±–∞.
  useEffect(() => {
    try { closeBmb(); } catch {}
    try { window.scrollTo(0, 0); } catch {}
    try { document.body.classList.add("bmb-register-open"); } catch {}
    return () => {
      try { document.body.classList.remove("bmb-register-open"); } catch {}
    };
  }, []);

  // ---------- Supabase helpers ----------
  const verifyReferral = async (word: string) => {
    const code = word.trim();
    if (!code) return null;

    const { data, error } = await supabase
      .from("profiles")
      .select("id, wallet, wallet_address, referral_code")
      .eq("referral_code", code)
      .limit(1)
      .maybeSingle();

    if (error) throw error;
    return data; // –∞–±–æ null
  };

  const sendMagicLink = async (emailValue: string) => {
    return supabase.auth.signInWithOtp({
      email: emailValue.trim(),
      options: { emailRedirectTo: redirectTo },
    });
  };

  const saveRefContext = (ref: any) => {
    try {
      localStorage.setItem(
        "bmb_ref_context",
        JSON.stringify({
          referred_by: ref?.id ?? null,
          referrer_wallet: ref?.wallet || ref?.wallet_address || null,
          referral_code: ref?.referral_code ?? refWord.trim(),
        })
      );
    } catch {}
  };

  // ---------- –î—ñ—ó ----------
  const onRegister = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      if (!email.trim()) {
        openBmb({
          kind: "info",
          title: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
          subtitle: "–í–∫–∞–∂—ñ—Ç—å email.",
          actionLabel: "–î–æ–±—Ä–µ",
        });
        return;
      }
      if (!refWord.trim()) {
        openBmb({
          kind: "warning",
          title: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ª–∏—à–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º —Å–ª–æ–≤–æ–º",
          subtitle: "–í–≤–µ–¥—ñ—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ —Å–ª–æ–≤–æ –∞–º–±–∞—Å–∞–¥–æ—Ä–∞.",
          actionLabel: "–î–æ–±—Ä–µ",
        });
        return;
      }

      try {
        setPhase("sending");
        setBusyBtn("register");

        const ref = await verifyReferral(refWord);
        if (!ref) {
          setPhase("error");
          openBmb({
            kind: "error",
            title: "–ù–µ–≤—ñ—Ä–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ —Å–ª–æ–≤–æ",
            subtitle: "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å.",
            actionLabel: "–û–∫",
          });
          return;
        }

        saveRefContext(ref);

        const { error } = await sendMagicLink(email);
        if (error) throw error;

        setPhase("sent");
        openBmb({
          kind: "magic",
          title: "–ú–∞–≥—ñ–∫-–ª—ñ–Ω–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ",
          subtitle: (
            <>
              –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ—à—Ç—É <b>{email}</b>. –í—ñ–¥–∫—Ä–∏–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –∑–æ–≤–Ω—ñ—à–Ω—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ.
            </>
          ),
          actionLabel: "–î–æ–±—Ä–µ",
        });
      } catch (err: any) {
        setPhase("error");
        openBmb({
          kind: "error",
          title: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞",
          subtitle: String(err?.message || err),
          actionLabel: "–î–æ–±—Ä–µ",
        });
      } finally {
        setBusyBtn(null);
      }
    },
    [email, refWord, redirectTo]
  );

  const onLogin = useCallback(
    async (e: React.MouseEvent) => {
      e.preventDefault();
      if (!email.trim()) {
        openBmb({
          kind: "info",
          title: "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
          subtitle: "–í–∫–∞–∂—ñ—Ç—å email.",
          actionLabel: "–î–æ–±—Ä–µ",
        });
        return;
      }

      try {
        setPhase("sending");
        setBusyBtn("login");

        const { error } = await sendMagicLink(email);
        if (error) throw error;

        setPhase("sent");
        openBmb({
          kind: "magic",
          title: "–ú–∞–≥—ñ–∫-–ª—ñ–Ω–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ",
          subtitle: (
            <>
              –ü–µ—Ä–µ–≤—ñ—Ä –ø–æ—à—Ç—É <b>{email}</b> —ñ –≤—ñ–¥–∫—Ä–∏–π —É –±—Ä–∞—É–∑–µ—Ä—ñ.
            </>
          ),
          actionLabel: "–î–æ–±—Ä–µ",
        });
      } catch (err: any) {
        setPhase("error");
        openBmb({
          kind: "error",
          title: "–ü–æ–º–∏–ª–∫–∞",
          subtitle: String(err?.message || err),
          actionLabel: "–î–æ–±—Ä–µ",
        });
      } finally {
        setBusyBtn(null);
      }
    },
    [email, redirectTo]
  );

  const onWalletLogin = useCallback(async () => {
    try {
      setPhase("sending");
      setBusyBtn("wallet");

      if (!(window as any).ethereum) {
        openBmb({
          kind: "info",
          title: "MetaMask –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
          subtitle: "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å MetaMask –∞–±–æ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–∞–π—Ç —É MetaMask-–±—Ä–∞—É–∑–µ—Ä—ñ.",
          actionLabel: "–ó—Ä–æ–∑—É–º—ñ–ª–æ",
        });
        return;
      }

      const provider = new ethers.providers.Web3Provider((window as any).ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
      const address = await signer.getAddress();
      const message = `BMB Login\nWallet: ${address}\nTime: ${Date.now()}`;
      const signature = await signer.signMessage(message);
      const recovered = ethers.utils.verifyMessage(message, signature);

      if (recovered.toLowerCase() !== address.toLowerCase()) {
        openBmb({
          kind: "error",
          title: "–ü—ñ–¥–ø–∏—Å –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è",
          subtitle: "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
          actionLabel: "OK",
        });
        return;
      }

      // —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è/–≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ –≥–∞–º–∞–Ω–µ—Ü—å
      const { data: existing } = await supabase
        .from("profiles")
        .select("id")
        .or(`wallet.eq.${address},wallet_address.eq.${address}`)
        .limit(1)
        .maybeSingle();

      if (!existing) {
        if (!refWord.trim()) {
          openBmb({
            kind: "warning",
            title: "–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥",
            subtitle: "–í–≤–µ–¥—ñ—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —á–µ—Ä–µ–∑ MetaMask.",
            actionLabel: "–î–æ–±—Ä–µ",
          });
          return;
        }
        const ref = await verifyReferral(refWord);
        if (!ref) {
          openBmb({
            kind: "error",
            title: "–ù–µ–≤—ñ—Ä–Ω–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ —Å–ª–æ–≤–æ",
            subtitle: "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–º–±–∞—Å–∞–¥–æ—Ä–∞.",
            actionLabel: "–û–∫",
          });
          return;
        }

        saveRefContext(ref);

        const base: Record<string, any> = {
          created_at: new Date().toISOString(),
          wallet: address,
          wallet_address: address,
          referred_by: ref?.id ?? null,
          referrer_wallet: ref?.wallet || ref?.wallet_address || null,
          referral_code: ref?.referral_code ?? refWord.trim(),
        };

        const { error: insertError } = await supabase.from("profiles").insert(base);
        if (insertError) {
          openBmb({
            kind: "error",
            title: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é",
            subtitle: insertError.message,
            actionLabel: "OK",
          });
          return;
        }
      }

      localStorage.setItem("wallet_address", address);
      navigate("/map", { replace: true });
    } catch (err: any) {
      openBmb({
        kind: "error",
        title: "–ü–æ–º–∏–ª–∫–∞ MetaMask",
        subtitle: String(err?.message || err),
        actionLabel: "OK",
      });
    } finally {
      setPhase("idle");
      setBusyBtn(null);
    }
  }, [navigate, refWord]);

  const disableAll = phase === "sending" || !!busyBtn;

  return (
    <div
      style={{
        minHeight: "calc(100vh - 120px)",
        display: "grid",
        placeItems: "center",
        padding: "32px 16px",
        // ‚¨áÔ∏è –ê–ù–¢–ò-–û–í–ï–†–õ–ï–ô: —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –°–ê–ú–ê –ø–æ–≤–µ—Ä—Ö —É—Å—å–æ–≥–æ
        position: "relative",
        zIndex: 9001,
        background: "#fff",
      }}
    >
      <div
        style={{
          width: "min(680px, 92vw)",
          background: "#f7f7f7",
          borderRadius: 16,
          padding: 24,
          boxShadow: "0 30px 60px rgba(0,0,0,0.12), 0 4px 16px rgba(0,0,0,0.08)",
          border: "1px solid #eaeaea",
          position: "relative",
          zIndex: 9002,
        }}
      >
        <h1
          style={{
            margin: "8px 0 20px",
            fontSize: 24,
            fontWeight: 800,
            textAlign: "center",
            color: "#111",
          }}
        >
          –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º —Å–ª–æ–≤–æ–º
        </h1>

        <form onSubmit={onRegister} style={{ display: "grid", gap: 14 }}>
          <input
            type="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="you@example.com"
            style={{
              height: 48,
              borderRadius: 12,
              border: "1px solid #e3e3e3",
              padding: "0 14px",
              fontSize: 16,
              outline: "none",
              background: "#eaf2ff",
              color: "#111",
            }}
            autoComplete="email"
          />

          <input
            type="text"
            value={refWord}
            onChange={(e) => setRefWord(e.target.value)}
            placeholder="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥"
            style={{
              height: 48,
              borderRadius: 12,
              border: "1px solid #e3e3e3",
              padding: "0 14px",
              fontSize: 16,
              outline: "none",
              background: "#fff",
              color: "#111",
            }}
            autoComplete="one-time-code"
          />

          <button
            type="submit"
            disabled={disableAll && busyBtn !== "register"}
            style={{
              height: 52,
              borderRadius: 12,
              border: "1px solid #000",
              background: "#000",
              color: "#fff",
              fontWeight: 700,
              fontSize: 16,
              cursor: "pointer",
              opacity: disableAll && busyBtn !== "register" ? 0.7 : 1,
            }}
          >
            –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
          </button>

          <button
            type="button"
            onClick={onLogin}
            disabled={disableAll && busyBtn !== "login"}
            style={{
              height: 52,
              borderRadius: 12,
              border: "1px solid #000",
              background: "#000",
              color: "#fff",
              fontWeight: 700,
              fontSize: 16,
              cursor: "pointer",
              opacity: disableAll && busyBtn !== "login" ? 0.7 : 1,
            }}
          >
            –£–≤—ñ–π—Ç–∏ (magic link)
          </button>

          <button
            type="button"
            onClick={onWalletLogin}
            disabled={disableAll && busyBtn !== "wallet"}
            style={{
              height: 52,
              borderRadius: 12,
              border: "1px solid #000",
              background: "#ffcdd6",
              color: "#000",
              fontWeight: 700,
              fontSize: 16,
              cursor: "pointer",
              opacity: disableAll && busyBtn !== "wallet" ? 0.7 : 1,
            }}
          >
            –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —á–µ—Ä–µ–∑ MetaMask
          </button>
        </form>
      </div>
    </div>
  );
}

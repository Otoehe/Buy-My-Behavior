// üìÅ src/components/UserProfileDrawer.tsx
import React, { useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';

type Props = {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
};

/**
 * UserProfileDrawer ‚Äî —Ñ—ñ–∫—Å –ø–µ—Ä–µ—Ö–æ–¥—É "–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É" ‚Üí —Ñ–æ—Ä–º–∞ —Å—Ü–µ–Ω–∞—Ä—ñ—é + –º–æ–±—ñ–ª—å–Ω–∏–π —Å–≤–∞–π–ø-–¥–∏—Å–º—ñ—Å –≤–ø—Ä–∞–≤–æ.
 * - [1] –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –∫–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ "–ó–∞–º–æ–≤–∏—Ç–∏" –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —à—Ç–æ—Ä–∫–∏ (capture) —ñ –Ω–∞–≤—ñ–≥—É—î–º–æ –Ω–∞ /scenario/new.
 * - [2] –ö–ª—ñ–∫/—Ç–∞–ø –ø–æ –∫–∞—Ä—Ç—ñ (Leaflet) –∑–∞–∫—Ä–∏–≤–∞—î —à—Ç–æ—Ä–∫—É.
 * - [3] –ö–ª—ñ–∫ –ø–æ overlay (–µ–ª–µ–º–µ–Ω—Ç .drawer-overlay) —Ç–∞–∫–æ–∂ –∑–∞–∫—Ä–∏–≤–∞—î.
 * - [4] NEW: –ü—Ä–∞–≤–∏–π —Å–≤–∞–π–ø (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π drag) –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø–ª–∞–≤–Ω–æ –∑—Å—É–≤–∞—î –∫–∞—Ä—Ç–∫—É –≤–ø—Ä–∞–≤–æ —ñ –∑–∞–∫—Ä–∏–≤–∞—î –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –≤—ñ–¥—Å—Ç–∞–Ω—ñ/—à–≤–∏–¥–∫–æ—Å—Ç—ñ.
 *   –ü—ñ–¥ —á–∞—Å drag –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è (overlay) –ø–ª–∞–≤–Ω–æ –≥–∞—Å–Ω–µ.
 */
export default function UserProfileDrawer({ isOpen, onClose, children }: Props) {
  const rootRef = useRef<HTMLDivElement | null>(null);
  const navigate = useNavigate();

  // ‚Äî‚Äî‚Äî 1) –õ–æ–∫–∞–ª—å–Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–ª—ñ–∫—É –ø–æ "–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É" –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —à—Ç–æ—Ä–∫–∏
  useEffect(() => {
    const root = rootRef.current;
    if (!root || !isOpen) return;

    const matchIsOrderButton = (el: HTMLElement) => {
      if (!el) return false;
      // 1) –ü—Ä—è–º—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
      if (el.closest('.order-button-new')) return true;
      if (el.closest('[data-action="order"]')) return true;

      // 2) –ë—É–¥—å-—è–∫–∏–π <button> –∑ —Ç–µ–∫—Å—Ç–æ–º, —â–æ –º—ñ—Å—Ç–∏—Ç—å "–∑–∞–º–æ–≤–∏—Ç–∏"
      const btn = el.closest('button');
      if (btn) {
        const text = (btn.textContent || '').toLowerCase().trim();
        if (text.includes('–∑–∞–º–æ–≤–∏—Ç–∏')) return true;
      }
      return false;
    };

    const onClickCapture = (ev: Event) => {
      const target = ev.target as HTMLElement | null;
      if (!target) return;
      if (!root.contains(target)) return;
      if (!matchIsOrderButton(target)) return;

      // –ì–ª—É—à–∏–º–æ –≤—Å–µ –Ü –î–û, —ñ –ü–Ü–°–õ–Ø ‚Äî –∂–æ–¥–µ–Ω —ñ–Ω—à–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é—î
      ev.preventDefault();
      ev.stopPropagation();
      (ev as any).stopImmediatePropagation?.();

      // –ú–æ–∂–µ–º–æ –∑—á–∏—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∑ –∞—Ç—Ä–∏–±—É—Ç–∞, —è–∫—â–æ –≤—ñ–Ω –ø—Ä–æ–∫–∏–Ω–µ–Ω–∏–π —É –∫–Ω–æ–ø–∫—É
      const btn =
        (target.closest('.order-button-new') as HTMLElement | null) ||
        (target.closest('[data-action="order"]') as HTMLElement | null) ||
        (target.closest('button') as HTMLElement | null);

      const executorId = btn?.getAttribute?.('data-executor-id') || '';

      if (executorId) {
        try {
          localStorage.setItem('scenario_receiverId', executorId);
        } catch {}
      }

      const q = executorId ? `?executor_id=${encodeURIComponent(executorId)}` : '';
      navigate(`/scenario/new${q}`);
    };

    // –õ–æ–≤–∏–º–æ –π click, —ñ touchend –Ω–∞ capture-—Ñ–∞–∑—ñ
    root.addEventListener('click', onClickCapture, true);
    root.addEventListener('touchend', onClickCapture, true);

    return () => {
      root.removeEventListener('click', onClickCapture, true);
      root.removeEventListener('touchend', onClickCapture, true);
    };
  }, [isOpen, navigate]);

  // ‚Äî‚Äî‚Äî 2) –ö–ª—ñ–∫/—Ç–∞–ø –ø–æ –ö–ê–†–¢–Ü (Leaflet) ‚Äî –∑–∞–∫—Ä–∏–≤–∞—î —à—Ç–æ—Ä–∫—É
  useEffect(() => {
    if (!isOpen) return;
    const mapEl = document.querySelector('.leaflet-container') as HTMLElement | null;
    if (!mapEl) return;

    const handleMapTap = () => onClose();

    mapEl.addEventListener('click', handleMapTap, { capture: true });
    mapEl.addEventListener('touchend', handleMapTap, { capture: true });

    return () => {
      mapEl.removeEventListener('click', handleMapTap as any, { capture: true } as any);
      mapEl.removeEventListener('touchend', handleMapTap as any, { capture: true } as any);
    };
  }, [isOpen, onClose]);

  // ‚Äî‚Äî‚Äî 3) –ö–ª—ñ–∫ –ø–æ —Ñ–æ–Ω-–æ–≤–µ—Ä–ª–µ—é —à—Ç–æ—Ä–∫–∏ (—è–∫—â–æ —î .drawer-overlay) ‚Äî —Ç–µ–∂ –∑–∞–∫—Ä–∏–≤–∞—î
  useEffect(() => {
    if (!isOpen) return;
    const overlay = document.querySelector('.drawer-overlay') as HTMLElement | null;
    if (!overlay) return;

    // –¥–æ–¥–∞–º–æ –∫–ª–∞—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≥–∞—Å—ñ–Ω–Ω—è (CSS .sheet-overlay { transition: opacity } —É–∂–µ —î)
    overlay.classList.add('sheet-overlay');

    const onOverlay = (e: Event) => {
      if (e.target === overlay) onClose();
    };

    overlay.addEventListener('click', onOverlay, { capture: true });
    overlay.addEventListener('touchend', onOverlay, { capture: true });

    return () => {
      overlay.removeEventListener('click', onOverlay as any, { capture: true } as any);
      overlay.removeEventListener('touchend', onOverlay as any, { capture: true } as any);
      overlay.classList.remove('sheet-overlay');
    };
  }, [isOpen, onClose]);

  // ‚Äî‚Äî‚Äî 4) NEW: –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è (–ª–∏—à–µ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö/–∫–æp—Å-–ø–æ—ñ–Ω—Ç–µ—Ä–∞—Ö)
  useEffect(() => {
    const el = rootRef.current;
    if (!el || !isOpen) return;

    // –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –Ω–∞ –¥–æ—Ç–∏–∫—É (—â–æ–± –Ω–µ –∑–∞–≤–∞–∂–∞—Ç–∏ –º–∏—à—ñ)
    const isCoarse =
      (window.matchMedia?.('(pointer: coarse)').matches) ||
      /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
    if (!isCoarse) return;

    const overlay = document.querySelector('.drawer-overlay') as HTMLElement | null;

    const THRESHOLD = 120;     // –º—ñ–Ω. –≤—ñ–¥—Å—Ç–∞–Ω—å —É px –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
    const FRICTION = 1;        // —É–ø–æ–≤—ñ–ª—å–Ω–µ–Ω–Ω—è drag
    let pointerId: number | null = null;
    let dragging = false;
    let canceled = false;
    let startX = 0, startY = 0;
    let lastX = 0, lastTS = 0;

    // –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Å—Ç–∏–ª—ñ/–∫–ª–∞—Å–∏ (–ø–ª–∞–≤–Ω–µ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è)
    const setTransform = (x: number) => {
      el.style.transform = `translateX(${x}px)`;
      if (overlay) {
        const k = Math.min(1, x / 300);
        overlay.style.opacity = String(1 - k * 0.85);
      }
    };
    const resetTransform = () => {
      el.classList.remove('sheet-swiping');
      el.style.transform = '';
      if (overlay) overlay.style.opacity = '';
    };
    const finishDismiss = () => {
      el.classList.remove('sheet-swiping');
      el.classList.add('sheet-dismissing');
      el.style.transform = 'translateX(110%)';
      const onEnd = () => {
        el.removeEventListener('transitionend', onEnd);
        el.classList.remove('sheet-dismissing');
        onClose();
        // —Å–∫–∏–¥–∞—î–º–æ, —è–∫—â–æ —à—Ç–æ—Ä–∫—É –≤—ñ–¥–∫—Ä–∏—é—Ç—å –∑–Ω–æ–≤—É
        el.style.transform = '';
        if (overlay) overlay.style.opacity = '';
      };
      el.addEventListener('transitionend', onEnd);
    };

    const onPointerDown = (e: PointerEvent) => {
      if (e.pointerType === 'mouse') return;
      pointerId = e.pointerId;
      dragging = false;
      canceled = false;
      startX = e.clientX;
      startY = e.clientY;
      lastX = e.clientX;
      lastTS = e.timeStamp;
      el.setPointerCapture(e.pointerId);
    };
    const onPointerMove = (e: PointerEvent) => {
      if (pointerId == null || e.pointerId !== pointerId) return;

      const dx = e.clientX - startX;
      const dy = e.clientY - startY;

      if (canceled) return;

      if (!dragging) {
        const ax = Math.abs(dx), ay = Math.abs(dy);
        if (ay > 10 && ay > ax) { canceled = true; return; } // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π —Å–∫—Ä–æ–ª
        if (dx > 8 && ax > ay * 1.15) {
          dragging = true;
          el.classList.add('sheet-swiping');
        } else return;
      }

      e.preventDefault();
      const dragX = Math.max(0, dx / FRICTION); // —Ç—è–≥–Ω–µ–º–æ –ª–∏—à–µ –≤–ø—Ä–∞–≤–æ
      setTransform(dragX);
      lastX = e.clientX;
      lastTS = e.timeStamp;
    };
    const onPointerUp = (e: PointerEvent) => {
      if (pointerId == null || e.pointerId !== pointerId) return;
      el.releasePointerCapture(e.pointerId);

      const dx = Math.max(0, lastX - startX);
      const dt = Math.max(1, e.timeStamp - lastTS);
      const velocity = dx / dt; // px/ms

      if (dragging && (dx > THRESHOLD || velocity > 0.65)) finishDismiss();
      else resetTransform();

      pointerId = null;
      dragging = false;
      canceled = false;
    };

    el.addEventListener('pointerdown', onPointerDown, { passive: true });
    el.addEventListener('pointermove', onPointerMove);
    el.addEventListener('pointerup', onPointerUp);
    el.addEventListener('pointercancel', onPointerUp);
    el.addEventListener('lostpointercapture', onPointerUp);

    return () => {
      el.removeEventListener('pointerdown', onPointerDown as any);
      el.removeEventListener('pointermove', onPointerMove as any);
      el.removeEventListener('pointerup', onPointerUp as any);
      el.removeEventListener('pointercancel', onPointerUp as any);
      el.removeEventListener('lostpointercapture', onPointerUp as any);
      // —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
      el.style.transform = '';
      if (overlay) overlay.style.opacity = '';
    };
  }, [isOpen, onClose]);

  return (
    <div
      ref={rootRef}
      className={`user-profile-drawer sheet-card ${isOpen ? 'open' : ''}`}
      aria-hidden={!isOpen}
      role="dialog"
      aria-modal="true"
    >
      {children}
    </div>
  );
}

// üìÅ src/components/UserProfileDrawer.tsx
import React, { useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';

type Props = {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
};

/**
 * UserProfileDrawer ‚Äî —Ñ—ñ–∫—Å –ø–µ—Ä–µ—Ö–æ–¥—É "–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É" ‚Üí —Ñ–æ—Ä–º–∞ —Å—Ü–µ–Ω–∞—Ä—ñ—é.
 * - –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ –∫–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —à—Ç–æ—Ä–∫–∏ –Ω–∞ capture-—Ñ–∞–∑—ñ –π –Ω–∞–≤—ñ–≥—É—î–º–æ –Ω–∞ /scenario/new.
 * - –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∫–Ω–æ–ø–∫–∏: .order-button-new, [data-action="order"],
 *   –∞–±–æ <button> –∑ —Ç–µ–∫—Å—Ç–æ–º "–ó–∞–º–æ–≤–∏—Ç–∏".
 * - –ó–±–µ—Ä—ñ–≥–∞—î–º–æ executor_id (—è–∫—â–æ –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ data-executor-id).
 * - –ö–ª—ñ–∫ –ø–æ –∫–∞—Ä—Ç—ñ –∞–±–æ –ø–æ overlay —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ –∑–∞–∫—Ä–∏–≤–∞—î —à—Ç–æ—Ä–∫—É.
 */
export default function UserProfileDrawer({ isOpen, onClose, children }: Props) {
  const rootRef = useRef<HTMLDivElement | null>(null);
  const navigate = useNavigate();

  // ‚Äî‚Äî‚Äî 1) –õ–æ–∫–∞–ª—å–Ω–µ –ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è –∫–ª—ñ–∫—É –ø–æ "–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É" –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —à—Ç–æ—Ä–∫–∏
  useEffect(() => {
    const root = rootRef.current;
    if (!root || !isOpen) return;

    const matchIsOrderButton = (el: HTMLElement) => {
      if (!el) return false;
      // 1) –ü—Ä—è–º—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏
      if (el.closest('.order-button-new')) return true;
      if (el.closest('[data-action="order"]')) return true;

      // 2) –ë—É–¥—å-—è–∫–∏–π <button> –∑ —Ç–µ–∫—Å—Ç–æ–º, —â–æ –º—ñ—Å—Ç–∏—Ç—å "–∑–∞–º–æ–≤–∏—Ç–∏"
      const btn = el.closest('button');
      if (btn) {
        const text = (btn.textContent || '').toLowerCase().trim();
        if (text.includes('–∑–∞–º–æ–≤–∏—Ç–∏')) return true;
      }
      return false;
    };

    const onClickCapture = (ev: Event) => {
      const target = ev.target as HTMLElement | null;
      if (!target) return;
      if (!root.contains(target)) return;
      if (!matchIsOrderButton(target)) return;

      // –ì–ª—É—à–∏–º–æ –≤—Å–µ –Ü –î–û, —ñ –ü–Ü–°–õ–Ø ‚Äî –∂–æ–¥–µ–Ω —ñ–Ω—à–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ —Å–ø—Ä–∞—Ü—é—î
      ev.preventDefault();
      ev.stopPropagation();
      (ev as any).stopImmediatePropagation?.();

      // –ú–æ–∂–µ–º–æ –∑—á–∏—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∑ –∞—Ç—Ä–∏–±—É—Ç–∞, —è–∫—â–æ –≤—ñ–Ω –ø—Ä–æ–∫–∏–Ω–µ–Ω–∏–π —É –∫–Ω–æ–ø–∫—É
      const btn =
        (target.closest('.order-button-new') as HTMLElement | null) ||
        (target.closest('[data-action="order"]') as HTMLElement | null) ||
        target.closest('button') as HTMLElement | null;

      const executorId = btn?.getAttribute?.('data-executor-id') || '';

      if (executorId) {
        try {
          localStorage.setItem('scenario_receiverId', executorId);
        } catch {}
      }

      const q = executorId ? `?executor_id=${encodeURIComponent(executorId)}` : '';
      navigate(`/scenario/new${q}`);
    };

    // –õ–æ–≤–∏–º–æ –π click, —ñ touchend –Ω–∞ capture-—Ñ–∞–∑—ñ
    root.addEventListener('click', onClickCapture, true);
    root.addEventListener('touchend', onClickCapture, true);

    return () => {
      root.removeEventListener('click', onClickCapture, true);
      root.removeEventListener('touchend', onClickCapture, true);
    };
  }, [isOpen, navigate]);

  // ‚Äî‚Äî‚Äî 2) –ö–ª—ñ–∫/—Ç–∞–ø –ø–æ –ö–ê–†–¢–Ü (Leaflet) ‚Äî –∑–∞–∫—Ä–∏–≤–∞—î —à—Ç–æ—Ä–∫—É
  useEffect(() => {
    if (!isOpen) return;
    const mapEl = document.querySelector('.leaflet-container') as HTMLElement | null;
    if (!mapEl) return;

    const handleMapTap = () => onClose();

    mapEl.addEventListener('click', handleMapTap, { capture: true });
    mapEl.addEventListener('touchend', handleMapTap, { capture: true });

    return () => {
      mapEl.removeEventListener('click', handleMapTap as any, { capture: true } as any);
      mapEl.removeEventListener('touchend', handleMapTap as any, { capture: true } as any);
    };
  }, [isOpen, onClose]);

  // ‚Äî‚Äî‚Äî 3) –ö–ª—ñ–∫ –ø–æ —Ñ–æ–Ω-–æ–≤–µ—Ä–ª–µ—é —à—Ç–æ—Ä–∫–∏ (—è–∫—â–æ —î .drawer-overlay) ‚Äî —Ç–µ–∂ –∑–∞–∫—Ä–∏–≤–∞—î
  useEffect(() => {
    if (!isOpen) return;
    const overlay = document.querySelector('.drawer-overlay') as HTMLElement | null;
    if (!overlay) return;

    const onOverlay = (e: Event) => {
      if (e.target === overlay) onClose();
    };

    overlay.addEventListener('click', onOverlay, { capture: true });
    overlay.addEventListener('touchend', onOverlay, { capture: true });

    return () => {
      overlay.removeEventListener('click', onOverlay as any, { capture: true } as any);
      overlay.removeEventListener('touchend', onOverlay as any, { capture: true } as any);
    };
  }, [isOpen, onClose]);

  return (
    <div
      ref={rootRef}
      className={`user-profile-drawer ${isOpen ? 'open' : ''}`}
      aria-hidden={!isOpen}
    >
      {children}
    </div>
  );
}

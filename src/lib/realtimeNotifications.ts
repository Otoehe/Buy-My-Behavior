// üìÑ src/lib/realtimeNotifications.ts ‚Äî Realtime Push Notifications –¥–ª—è BMB —á–µ—Ä–µ–∑ Supabase

import React from 'react';
import { supabase } from './supabase';
import { showNotification } from './universalNotifications';

// === –¢–∏–ø–∏ –¥–ª—è realtime —Å–ø–æ–≤—ñ—â–µ–Ω—å ===
export interface ScenarioStatusChange {
  scenario_id: string;
  old_status: string;
  new_status: string;
  creator_id: string;
  executor_id: string;
  description: string;
  donation_amount_usdt: number;
  created_at: string;
}

export interface NotificationEvent {
  type: 'scenario_created' | 'status_changed' | 'agreement_signed' | 'completion_confirmed';
  data: any;
  recipient_ids: string[];
  timestamp: number;
}

// === –ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è realtime —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏ ===
class RealtimeNotificationManager {
  private currentUserId: string | null = null;
  private isListening: boolean = false;

  // üîí –¢—Ä–∏–º–∞—î–º–æ —î–¥–∏–Ω–∏–π –∫–∞–Ω–∞–ª, –∑–∞–º—ñ—Å—Ç—å –º–∞—Å–∏–≤—É ‚Äî —â–æ–± –Ω–µ –ø–ª–æ–¥–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–æ–∫
  private scenariosChannel: ReturnType<typeof supabase.channel> | null = null;

  private lastNotificationTime: Map<string, number> = new Map();
  private readonly COOLDOWN_MS = 5000;

  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ReturnType<typeof setInterval> ‚Äî –∫–æ—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞/TS
  private pollingInterval: ReturnType<typeof setInterval> | null = null;
  private lastPollingData: Record<string, any> | null = null;
  private pollingIntervalTime = 15000;

  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 2000; // –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è

  // === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ===
  public async initialize(userId: string): Promise<boolean> {
    // –Ø–∫—â–æ –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ –∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    if (this.currentUserId === userId && this.isListening) {
      console.log('üîÑ Realtime –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userId);
      return true;
    }

    // –ü–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –∑–∞–≤–∂–¥–∏ —Ä–æ–±–∏–º–æ stopListening() ‚Äî –∑–∞–ø–æ–±—ñ–≥–∞—î –¥—É–±–ª—è–º
    this.stopListening();

    this.currentUserId = userId;
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Realtime Notifications –¥–ª—è:', userId);

    try {
      const realtimeSuccess = await this.setupSupabaseRealtime();
      if (realtimeSuccess) {
        console.log('‚úÖ Supabase Realtime –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
        return true;
      } else {
        console.warn('‚ö†Ô∏è Supabase Realtime –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ polling');
        this.setupPollingFallback();
        return true;
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó realtime:', error);
      this.setupPollingFallback();
      return false;
    }
  }

  // === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Supabase Realtime ===
  private async setupSupabaseRealtime(): Promise<boolean> {
    try {
      // –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è
      const { error } = await supabase.from('scenarios').select('id').limit(1);
      if (error) {
        console.error('üö´ –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase:', error);
        return false;
      }

      this.reconnectAttempts = 0;

      // –Ø–∫—â–æ –±—É–≤ —Å—Ç–∞—Ä–∏–π –∫–∞–Ω–∞–ª ‚Äî –ø—Ä–∏–±–∏—Ä–∞—î–º–æ (–¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –∑–∞—Ö–∏—Å—Ç)
      if (this.scenariosChannel) {
        try { supabase.removeChannel(this.scenariosChannel); } catch {}
        this.scenariosChannel = null;
      }

      // –Ñ–î–ò–ù–ò–ô –∫–∞–Ω–∞–ª –Ω–∞ –ø–æ–¥—ñ—ó —Ç–∞–±–ª–∏—Ü—ñ scenarios
      const ch = supabase
        .channel('scenarios-realtime')
        .on(
          'postgres_changes',
          {
            event: '*',
            schema: 'public',
            table: 'scenarios',
            // –ü—Ä–∏–º—ñ—Ç–∫–∞: filter –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø—Ä–æ—Å—Ç—ñ —É–º–æ–≤–∏; —Å–∫–ª–∞–¥–Ω—ñ "or" —Ç—É—Ç –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—é—Ç—å—Å—è,
            // —Ç–æ–º—É –¥–æ–¥–∞—Ç–∫–æ–≤–æ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –≤ handleStatusUpdate().
          },
          (payload) => this.handleScenarioChange(payload)
        )
        .subscribe((status) => {
          console.log('üì° Realtime —Å—Ç–∞—Ç—É—Å:', status);
          if (status === 'SUBSCRIBED') {
            this.isListening = true;
            console.log('‚úÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ scenarios –∞–∫—Ç–∏–≤–Ω–∞');
          } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT' || status === 'CLOSED') {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–∞–Ω–∞–ª—É –∞–±–æ —Ä–æ–∑—Ä–∏–≤ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ polling');
            this.setupPollingFallback();
          }
        });

      this.scenariosChannel = ch;
      return true;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Supabase Realtime:', error);
      return false;
    }
  }

  // === Fallback —á–µ—Ä–µ–∑ polling ===
  private setupPollingFallback(): void {
    console.log(`üîÑ –ó–∞–ø—É—Å–∫ polling fallback (–∫–æ–∂–Ω—ñ ${this.pollingIntervalTime / 1000} —Å–µ–∫—É–Ω–¥)`);

    if (this.pollingInterval) clearInterval(this.pollingInterval);

    this.pollingInterval = setInterval(async () => {
      await this.pollForChanges();
    }, this.pollingIntervalTime);

    this.isListening = true;
  }

  // === Polling –¥–ª—è –∑–º—ñ–Ω ===
  private async pollForChanges(): Promise<void> {
    if (!this.currentUserId) return;

    try {
      const timeWindow = new Date(Date.now() - (this.pollingIntervalTime + 5000)).toISOString();

      const { data: scenarios, error } = await supabase
        .from('scenarios')
        .select('*')
        .or(`creator_id.eq.${this.currentUserId},executor_id.eq.${this.currentUserId}`)
        .gte('updated_at', timeWindow)
        .order('updated_at', { ascending: false });

      if (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ polling:', error);
        return;
      }

      if (scenarios && scenarios.length > 0) {
        for (const scenario of scenarios) {
          const key = `${scenario.id}-${scenario.status}`;
          const lastTime = this.lastNotificationTime.get(key);
          const now = Date.now();
          if (lastTime && (now - lastTime) < this.COOLDOWN_MS) continue;

          await this.handleScenarioChange({
            eventType: 'UPDATE',
            new: scenario,
            old: this.lastPollingData?.[scenario.id] || { status: 'unknown' }
          });

          this.lastNotificationTime.set(key, now);
        }

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–Ω—ñ–º–æ–∫
        this.lastPollingData = scenarios.reduce((acc, s) => {
          acc[s.id] = s;
          return acc;
        }, {} as Record<string, any>);
      }
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ polling:', error);
      this.attemptReconnect();
    }
  }

  // === –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è ===
  private async attemptReconnect(): Promise<void> {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.log(`üõë –î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º—É–º —Å–ø—Ä–æ–± –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è (${this.maxReconnectAttempts})`);
      return;
    }

    this.reconnectAttempts++;
    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);

    console.log(`üîÑ –°–ø—Ä–æ–±–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);

    setTimeout(async () => {
      try {
        this.stopListening();
        if (this.currentUserId) {
          const success = await this.setupSupabaseRealtime();
          if (success) {
            console.log('‚úÖ Realtime –∑\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            this.reconnectAttempts = 0;
          } else {
            console.log('‚ö†Ô∏è Realtime –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ polling');
          }
        }
      } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:', error);
      }
    }, delay);
  }

  // === –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω –≤ —Å—Ü–µ–Ω–∞—Ä—ñ—è—Ö ===
  private async handleScenarioChange(payload: any): Promise<void> {
    // –§–æ—Ä–º–∞—Ç payload Supabase v2: { eventType, new, old, table, schema, ... }
    if (!payload) return;

    if (!this.currentUserId) {
      console.warn('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π');
      return;
    }

    const { eventType, new: newRecord, old: oldRecord } = payload;

    if (eventType === 'INSERT') {
      await this.handleNewScenario(newRecord);
    } else if (eventType === 'UPDATE') {
      await this.handleStatusUpdate(oldRecord, newRecord);
    }
  }

  // === –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é ===
  private async handleNewScenario(scenario: any): Promise<void> {
    // –ê–≤—Ç–æ—Ä –Ω–µ –æ—Ç—Ä–∏–º—É—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤–ª–∞—Å–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
    if (!scenario || scenario.creator_id === this.currentUserId) return;

    const notificationKey = `new-scenario-${scenario.id}`;
    const lastTime = this.lastNotificationTime.get(notificationKey);
    const now = Date.now();
    if (lastTime && (now - lastTime) < this.COOLDOWN_MS) return;

    await showNotification('üÜï –ù–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –¥–æ—Å—Ç—É–ø–Ω–∏–π!', {
      body: `"${scenario.description?.slice(0, 60)}..." ‚Ä¢ –°—É–º–∞: ${scenario.donation_amount_usdt} USDT`,
      sound: true,
      timeout: 6000,
      onClick: () => {
        console.log('üéØ –ö–ª—ñ–∫ –ø–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—é –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é');
      }
    });

    this.lastNotificationTime.set(notificationKey, now);
    console.log('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ');
  }

  // === –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É ===
  private async handleStatusUpdate(oldRecord: any, newRecord: any): Promise<void> {
    if (!newRecord) return;

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ª–∏—à–µ –¥–ª—è –ø—Ä–∏—á–µ—Ç–Ω–∏—Ö
    const isInvolved =
      this.currentUserId === newRecord?.creator_id ||
      this.currentUserId === newRecord?.executor_id;

    if (!isInvolved) return;

    const oldStatus = oldRecord?.status;
    const newStatus = newRecord?.status;
    if (!newStatus || oldStatus === newStatus) return;

    console.log(`üìä –ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É —Å—Ü–µ–Ω–∞—Ä—ñ—é ${newRecord.id}: ${oldStatus} ‚Üí ${newStatus}`);

    const notificationKey = `status-${newRecord.id}-${newStatus}`;
    const lastTime = this.lastNotificationTime.get(notificationKey);
    const now = Date.now();
    if (lastTime && (now - lastTime) < this.COOLDOWN_MS) return;

    const isExecutor = this.currentUserId === newRecord.executor_id;
    const isCustomer = this.currentUserId === newRecord.creator_id;

    await this.sendStatusNotification(oldStatus, newStatus, newRecord, isExecutor, isCustomer);

    this.lastNotificationTime.set(notificationKey, now);
  }

  // === –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ —Å—Ç–∞—Ç—É—Å ===
  private async sendStatusNotification(
    oldStatus: string,
    newStatus: string,
    scenario: any,
    isExecutor: boolean,
    isCustomer: boolean
  ): Promise<void> {
    let title = '';
    let body = '';
    let sound = true;
    let timeout = 5000;

    switch (newStatus) {
      case 'agreed':
        if (oldStatus !== 'agreed') {
          title = 'ü§ù –£–≥–æ–¥—É –ø–æ–≥–æ–¥–∂–µ–Ω–æ!';
          body = `–°—Ü–µ–Ω–∞—Ä—ñ–π "${scenario.description?.slice(0, 50)}..." –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –æ–±–æ–º–∞ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏. –°—É–º–∞: ${scenario.donation_amount_usdt} USDT`;
          timeout = 7000;
        }
        break;

      case 'confirmed':
        title = '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ';
        body = isExecutor
          ? '–ó–∞–º–æ–≤–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç–∏ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.'
          : '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑–ø–æ—á–∞–≤ —Ä–æ–±–æ—Ç—É.';
        break;

      case 'completed':
        if (oldStatus !== 'completed') {
          title = 'üéâ –°—Ü–µ–Ω–∞—Ä—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!';
          body = isExecutor
            ? `–ö–æ—à—Ç–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ —á–µ—Ä–µ–∑ escrow. –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ ${(scenario.donation_amount_usdt * 0.9).toFixed(2)} USDT (90% –≤—ñ–¥ —Å—É–º–∏ —É–≥–æ–¥–∏).`
            : '–°—Ü–µ–Ω–∞—Ä—ñ–π –≤–∏–∫–æ–Ω–∞–Ω–æ —Ç–∞ –∫–æ—à—Ç–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.';
          sound = true;
          timeout = 8000;
        }
        break;

      case 'cancelled':
        title = '‚ùå –°—Ü–µ–Ω–∞—Ä—ñ–π —Å–∫–∞—Å–æ–≤–∞–Ω–æ';
        body = '–£–≥–æ–¥–∞ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –ö–æ—à—Ç–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –∑–∞–º–æ–≤–Ω–∏–∫—É.';
        break;

      case 'dispute':
        title = '‚ö†Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–æ —Å–ø—ñ—Ä';
        body = '–ü–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é –≤—ñ–¥–∫—Ä–∏—Ç–æ —Å–ø—ñ—Ä. –û—á—ñ–∫—É–π—Ç–µ —Ä–æ–∑–≥–ª—è–¥—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é.';
        timeout = 10000;
        break;

      default:
        return;
    }

    if (title && body) {
      await showNotification(title, {
        body,
        sound,
        timeout,
        vibrate: sound ? [200, 100, 200] : false,
        onClick: () => {
          console.log(`üéØ –ö–ª—ñ–∫ –ø–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—é —Å—Ç–∞—Ç—É—Å—É: ${newStatus}`);
        }
      });

      console.log(`‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å "${newStatus}" –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ`);
    }
  }

  // === –¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ===
  public async sendTestNotification(): Promise<void> {
    await showNotification('üß™ –¢–µ—Å—Ç Realtime', {
      body: '–°–∏—Å—Ç–µ–º–∞ realtime —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!',
      sound: true,
      timeout: 4000,
      onClick: () => console.log('üéØ –¢–µ—Å—Ç realtime –ø—Ä–æ–π–¥–µ–Ω–æ!')
    });
  }

  // === –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–¥—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ===
  public async simulateScenarioEvent(eventType: 'new' | 'agreed' | 'completed'): Promise<void> {
    const mockScenario = {
      id: `test-${Date.now()}`,
      description: '–¢–µ—Å—Ç–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó realtime —Å–ø–æ–≤—ñ—â–µ–Ω—å',
      donation_amount_usdt: 100,
      creator_id: 'test-creator',
      executor_id: this.currentUserId,
      status: eventType === 'new' ? 'draft' : eventType,
      created_at: new Date().toISOString()
    };

    switch (eventType) {
      case 'new':
        await this.handleNewScenario(mockScenario);
        break;
      case 'agreed':
        await this.handleStatusUpdate(
          { status: 'draft' },
          { ...mockScenario, status: 'agreed' }
        );
        break;
      case 'completed':
        await this.handleStatusUpdate(
          { status: 'agreed' },
          { ...mockScenario, status: 'completed' }
        );
        break;
    }
  }

  // === –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑'—î–¥–Ω–∞–Ω–Ω—è ===
  public getConnectionStatus(): {
    isListening: boolean;
    method: 'realtime' | 'polling' | 'none';
    userId: string | null;
    reconnectAttempts: number;
  } {
    return {
      isListening: this.isListening,
      method: this.pollingInterval ? 'polling' : (this.scenariosChannel ? 'realtime' : 'none'),
      userId: this.currentUserId,
      reconnectAttempts: this.reconnectAttempts
    };
  }

  // === –ó—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è ===
  public stopListening(): void {
    console.log('‚è∏Ô∏è –ó—É–ø–∏–Ω–∫–∞ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è Realtime');

    if (this.scenariosChannel) {
      try { supabase.removeChannel(this.scenariosChannel); } catch {}
      this.scenariosChannel = null;
    }

    if (this.pollingInterval) {
      clearInterval(this.pollingInterval);
      this.pollingInterval = null;
    }

    this.isListening = false;
  }

  // === –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ ===
  public cleanup(): void {
    console.log('üßπ –û—á–∏—â–µ–Ω–Ω—è Realtime Notifications');

    this.stopListening();

    // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    this.currentUserId = null;
    this.lastNotificationTime.clear();
    this.lastPollingData = null;
    this.reconnectAttempts = 0;

    console.log('‚úÖ Realtime Notifications –æ—á–∏—â–µ–Ω–æ');
  }

  // === –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ===
  public async restart(): Promise<boolean> {
    const userId = this.currentUserId;
    this.cleanup();
    if (userId) return await this.initialize(userId);
    return false;
  }
}

// === –ï–∫—Å–ø–æ—Ä—Ç singleton instance ===
export const realtimeNotificationManager = new RealtimeNotificationManager();

// === –£—Ç–∏–ª—ñ—Ç–∞—Ä–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===
export const initializeRealtimeNotifications = (userId: string): Promise<boolean> => {
  return realtimeNotificationManager.initialize(userId);
};

export const cleanupRealtimeNotifications = (): void => {
  realtimeNotificationManager.cleanup();
};

export const getRealtimeStatus = () => {
  return realtimeNotificationManager.getConnectionStatus();
};

export const testRealtimeNotification = (): Promise<void> => {
  return realtimeNotificationManager.sendTestNotification();
};

export const simulateRealtimeEvent = (eventType: 'new' | 'agreed' | 'completed'): Promise<void> => {
  return realtimeNotificationManager.simulateScenarioEvent(eventType);
};

// === React Hook –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ ===
export const useRealtimeNotifications = (userId: string | null) => {
  const [status, setStatus] = React.useState(() => realtimeNotificationManager.getConnectionStatus());

  React.useEffect(() => {
    if (!userId) return;

    const initRealtime = async () => {
      const success = await initializeRealtimeNotifications(userId);
      setStatus(realtimeNotificationManager.getConnectionStatus());
      if (success) console.log('üîó Realtime notifications –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è:', userId);
    };

    initRealtime();

    // –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ/–∑–º—ñ–Ω—ñ userId
    return () => {
      cleanupRealtimeNotifications();
    };
  }, [userId]);

  // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É (–¥–ª—è UI/–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
  React.useEffect(() => {
    const interval = setInterval(() => {
      setStatus(realtimeNotificationManager.getConnectionStatus());
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return {
    ...status,
    testNotification: testRealtimeNotification,
    simulateEvent: simulateRealtimeEvent,
    restart: () => realtimeNotificationManager.restart()
  };
};

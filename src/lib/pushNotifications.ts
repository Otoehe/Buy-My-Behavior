// üìÑ src/lib/pushNotifications.ts ‚Äî —Å–∏—Å—Ç–µ–º–∞ push-—Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è BuyMyBehavior

import React from 'react';

/* ===================== –¢–∏–ø–∏ ===================== */

export interface NotificationData {
  title: string;
  body: string;
  icon?: string;
  tag?: string;
  requireSound?: boolean;
}

export interface ScenarioNotificationEvent {
  scenario_id: string;
  user_id: string;
  status: string;
  type: 'status_change' | 'new_scenario' | 'agreement' | 'completion';
  title: string;
  description: string;
  amount?: number;
}

export type NotificationPermission = 'granted' | 'denied' | 'default';

/* ============ –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ö–µ–ª–ø–µ—Ä–∏/–¥–µ—Ñ–µ–∫—Ç–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â ============ */

/** –ß–∏ –º–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ MetaMask / –≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞, –¥–µ Push API —á–∞—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π */
function isMetaMaskMobile(): boolean {
  const ua = (navigator?.userAgent || '').toLowerCase();
  // UA MetaMask Mobile —Ä—ñ–∑–Ω–∏–π –Ω–∞ iOS/Android, —Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—è –ø–æ –ø—ñ–¥—Ä—è–¥–∫—É 'metamask'
  const inApp = ua.includes('metamask');
  // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–∞—Ä–∫–µ—Ä ‚Äî —ñ–Ω–∂–µ–∫—Ç–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  const hasMM = !!(window as any).ethereum?.isMetaMask;
  // –í–∞–∂–ª–∏–≤–æ: –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —î Notification, –ø–æ–∫–∞–∑ —á–∞—Å—Ç–æ –≤–∞–ª–∏—Ç—å—Å—è ‚Äî –∫—Ä–∞—â–µ no-op
  return inApp || hasMM;
}

/** –£ –¥–µ—è–∫–∏—Ö –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö –≤–µ–±–≤—å—é Push/Notification –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –∞–±–æ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–æ */
function shouldNoopPush(): boolean {
  // –Ø–∫—â–æ –∑–æ–≤—Å—ñ–º –Ω–µ–º–∞—î Notification API ‚Äî —Ç–æ—á–Ω–æ no-op
  if (!('Notification' in window)) return true;
  // –ú–æ–±—ñ–ª—å–Ω–∏–π MetaMask: —Ä–æ–±–∏–º–æ no-op, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ "Failed to publish payload"
  if (isMetaMaskMobile()) return true;
  return false;
}

/* ===================== –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É—à—ñ–≤ ===================== */

class PushNotificationManager {
  private audio: HTMLAudioElement | null = null;
  private lastNotificationTime = 0;
  private readonly NOTIFICATION_COOLDOWN = 2000; // 2s
  private notificationHistory: Set<string> = new Set();

  constructor() {
    this.initializeAudio();
  }

  /* ---------- –ê—É–¥—ñ–æ ---------- */
  private initializeAudio() {
    try {
      // —Ñ–∞–π–ª –ª–µ–∂–∏—Ç—å —É /public
      this.audio = new Audio('/notification.wav');
      this.audio.volume = 0.6;
      this.audio.preload = 'auto';
    } catch (e) {
      // —Ç–∏—Ö–æ
      console.warn('[push] audio init fail:', e);
    }
  }

  private playNotificationSound(): void {
    if (!this.audio) return;
    try {
      this.audio.currentTime = 0;
      const p = this.audio.play();
      if (p && typeof p.then === 'function') p.catch(() => {});
    } catch {
      /* ignore */
    }
  }

  /* ---------- –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ ---------- */
  public isSupported(): boolean {
    return 'Notification' in window;
  }

  public getPermissionStatus(): NotificationPermission {
    if (!this.isSupported()) return 'denied';
    return Notification.permission as NotificationPermission;
  }

  public async requestPermission(): Promise<NotificationPermission> {
    if (!this.isSupported()) return 'denied';
    const cur = this.getPermissionStatus();
    if (cur !== 'default') return cur;
    try {
      const p = await Notification.requestPermission();
      return p as NotificationPermission;
    } catch {
      return 'denied';
    }
  }

  /* ---------- –ü–æ–∫–∞–∑ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ---------- */
  public async showNotification(data: NotificationData): Promise<boolean> {
    // 0) –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞—Ö, –¥–µ —Ü–µ –ª–∞–º–∞—î UX (MetaMask mobile —Ç–æ—â–æ)
    if (shouldNoopPush()) return false;

    // 1) –ê–Ω—Ç–∏-–¥—É–±–ª—ñ
    if (data.tag && this.notificationHistory.has(data.tag)) return false;

    // 2) Cooldown
    const now = Date.now();
    if (now - this.lastNotificationTime < this.NOTIFICATION_COOLDOWN) return false;

    // 3) –ü–µ—Ä–º—ñ—à–µ–Ω–∏
    if (this.getPermissionStatus() !== 'granted') return false;

    try {
      if (data.requireSound) this.playNotificationSound();

      const n = new Notification(data.title, {
        body: data.body,
        icon: data.icon || '/favicon.ico',
        tag: data.tag || `bmb-${Date.now()}`,
        badge: '/favicon.ico',
        requireInteraction: false,
        silent: false,
        vibrate: [200, 100, 200],
      });

      n.onclick = () => {
        try {
          window.focus?.();
          n.close();
        } catch {}
      };

      // –∞–≤—Ç–æ-–∑–∞–∫—Ä–∏—Ç—Ç—è —á–µ—Ä–µ–∑ 6—Å
      setTimeout(() => {
        try { n.close(); } catch {}
      }, 6000);

      if (data.tag) {
        this.notificationHistory.add(data.tag);
        setTimeout(() => this.notificationHistory.delete(data.tag!), 60_000);
      }

      this.lastNotificationTime = now;
      return true;
    } catch {
      // –Ø–∫—â–æ Notification API —î, –∞–ª–µ –ø–æ–∫–∞–∑ –∑–≤–∞–ª–∏–≤—Å—è ‚Äî –Ω–µ –≤–∞–ª–∏–º–æ –¥–æ–¥–∞—Ç–æ–∫
      return false;
    }
  }

  /* ---------- –ü–æ–¥—ñ—î–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏ ---------- */
  public async handleScenarioStatusChange(
    oldStatus: string,
    newStatus: string,
    scenario: any,
    currentUserId: string
  ): Promise<void> {
    const isInvolved =
      currentUserId && (currentUserId === scenario?.creator_id || currentUserId === scenario?.executor_id);
    if (!isInvolved) return;

    const isExecutor = currentUserId === scenario?.executor_id;

    let payload: NotificationData | null = null;

    if (oldStatus !== 'agreed' && newStatus === 'agreed') {
      payload = {
        title: 'ü§ù –£–≥–æ–¥—É –ø–æ–≥–æ–¥–∂–µ–Ω–æ',
        body: `–°—É–º–∞: ${scenario?.donation_amount_usdt} USDT`,
        tag: `agreement-${scenario?.id}`,
        requireSound: true,
      };
    } else if (oldStatus !== 'completed' && newStatus === 'completed') {
      payload = {
        title: '‚úÖ –°—Ü–µ–Ω–∞—Ä—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
        body: isExecutor
          ? '–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∏–ø–ª–∞—Ç—É –∑ escrow.'
          : 'Escrow —Ä–æ–∑–ø–æ–¥—ñ–ª–∏–≤ –∫–æ—à—Ç–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
        tag: `completion-${scenario?.id}`,
        requireSound: true,
      };
    }

    if (payload) await this.showNotification(payload);
  }

  public async notifyNewScenario(scenario: any, _currentUserId: string): Promise<void> {
    await this.showNotification({
      title: 'üÜï –ù–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π',
      body: `"${(scenario?.description || '').slice(0, 60)}..." ‚Ä¢ ${scenario?.donation_amount_usdt} USDT`,
      tag: `new-scenario-${scenario?.id}`,
      requireSound: true,
    });
  }

  public async sendTestNotification(): Promise<boolean> {
    return this.showNotification({
      title: 'üîî –¢–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
      body: '–°–∏—Å—Ç–µ–º–∞ push –ø—Ä–∞—Ü—é—î üéâ',
      tag: 'bmb-test',
      requireSound: true,
    });
  }

  public cleanup(): void {
    try { this.audio?.pause(); } catch {}
    this.audio = null;
    this.notificationHistory.clear();
  }
}

/* ===================== –ï–∫—Å–ø–æ—Ä—Ç–∏ API ===================== */

export const pushNotificationManager = new PushNotificationManager();

export const checkNotificationSupport = (): boolean => pushNotificationManager.isSupported();

export const requestNotificationPermission = (): Promise<NotificationPermission> =>
  pushNotificationManager.requestPermission();

export const getNotificationPermissionStatus = (): NotificationPermission =>
  pushNotificationManager.getPermissionStatus();

export const sendTestNotification = (): Promise<boolean> =>
  pushNotificationManager.sendTestNotification();

/** –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ‚Äî –¥–µ–ª–µ–≥—É—î –≤ –º–µ–Ω–µ–¥–∂–µ—Ä. –¢—Ä–∏–º–∞–π —î–¥–∏–Ω–∏–π —à–ª—è—Ö –ø–æ–∫–∞–∑—É. */
export interface NotificationOptions {
  body?: string;
  icon?: string;
  tag?: string;
  requireSound?: boolean;
}
export const showNotification = async (title: string, options: NotificationOptions = {}): Promise<boolean> => {
  return pushNotificationManager.showNotification({
    title,
    body: options.body || '',
    icon: options.icon,
    tag: options.tag,
    requireSound: options.requireSound,
  });
};

/* ===================== React Hook ===================== */

export const useNotifications = () => {
  const [permissionStatus, setPermissionStatus] = React.useState<NotificationPermission>(
    getNotificationPermissionStatus()
  );

  const requestPermission = React.useCallback(async () => {
    const s = await requestNotificationPermission();
    setPermissionStatus(s);
    return s;
  }, []);

  const sendTest = React.useCallback(() => sendTestNotification(), []);

  return {
    permissionStatus,
    isSupported: checkNotificationSupport(),
    requestPermission,
    sendTest,
  };
};


### PATTERN: any[^a-zA-Z0-9_]
src/components/A2HS.tsx:15:      (window as any).__bmbA2HS = ev; src/components/A2HS.tsx:24:    window.addEventListener('beforeinstallprompt', onBIP as any); src/components/A2HS.tsx:28:      window.removeEventListener('beforeinstallprompt', onBIP as any); src/components/AddToHomeProfileCard.tsx:30:        (navigator as any).standalone === true src/components/AddToHomeProfileCard.tsx:50:    window.addEventListener('beforeinstallprompt', onBeforeInstall as any); src/components/AddToHomeProfileCard.tsx:53:      window.removeEventListener('beforeinstallprompt', onBeforeInstall as any); src/components/AdminDashboard.tsx:57:              {referrals.map((r: any, i) => ( src/components/AdminDashboard.tsx:79:              {ambassadors.map((a: any, i) => ( src/components/AuthBridge.tsx:10:    let unsub: any; src/components/BehaviorsFeed.tsx:56:    const processed: Behavior[] = (data || []).map((b: any) => ({ src/components/BehaviorsFeed.tsx:83:    let disputesRows: any[] = []; src/components/BehaviorsFeed.tsx:114:    let scenarios: any[] = []; src/components/BehaviorsFeed.tsx:235:      window.removeEventListener('pointerdown', handler, { capture: true } as any); src/components/BehaviorsFeed.tsx:237:    window.addEventListener('pointerdown', handler, { capture: true } as any); src/components/BehaviorsFeed.tsx:238:    return () => { window.removeEventListener('pointerdown', handler, { capture: true } as any); }; src/components/BehaviorsFeed.tsx:256:    } catch (e: any) { src/components/DisputeVoteInline.tsx:39:      setWinner((d.winner as any) ?? null); src/components/DisputeVoteInline.tsx:79:    } catch (e:any) { src/components/DisputeVoteWidget.tsx:62:    (votes || []).forEach((v: any) => (v.choice === 'executor' ? e++ : v.choice === 'customer' ? c++ : null)); src/components/DisputeVoteWidget.tsx:74:      setMine((mineVote as any)?.choice ?? null); src/components/DisputeVoteWidget.tsx:108:    } catch (e: any) { src/components/EscrowButton.tsx:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/components/EscrowHandoff.tsx:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/components/EvidenceUploadButton.tsx:41:    } catch (err: any) { src/components/InAppOpenInBrowserBanner.tsx:18:  if (typeof (navigator as any).standalone === 'boolean' && (navigator as any).standalone) return true; src/components/InstallPWAButton.tsx:13:  const iosStandalone = typeof navigator !== "undefined" && (navigator as any).standalone === true; src/components/InstallPWAButton.tsx:86:    const existing = (window as any).__bmbA2HS as BeforeInstallPromptEvent | undefined; src/components/InstallPWAButton.tsx:98:      try { (window as any).__bmbA2HS = bip; window.dispatchEvent(new CustomEvent("bmb:a2hs-available")); } catch {} src/components/InstallPWAButton.tsx:107:    window.addEventListener("beforeinstallprompt", onBIP as any); src/components/InstallPWAButton.tsx:118:      window.removeEventListener("beforeinstallprompt", onBIP as any); src/components/Login.tsx:40:  const eth = (window as any).ethereum; src/components/Login.tsx:49:  } catch (err: any) { src/components/Login.tsx:51:      await (window as any).ethereum.request({ src/components/Login.tsx:87:      const eth = (window as any).ethereum; src/components/Login.tsx:161:    } catch (e: any) { src/components/MapView.tsx:138:    const profileId = (location.state as any)?.profile; src/components/MetaMaskSmartConnect.tsx:14:const getInjected = () => (typeof window !== 'undefined' ? (window as any).ethereum : undefined); src/components/MetaMaskSmartConnect.tsx:24:async function ensureBscNetwork(eth: any, targetChainIdHex = BSC_MAINNET.chainId) { src/components/MetaMaskSmartConnect.tsx:33:  } catch (e: any) { src/components/MetaMaskSmartConnect.tsx:100:    const envUrl = (import.meta as any)?.env?.VITE_PUBLIC_APP_URL as string | undefined; src/components/MetaMaskSmartConnect.tsx:112:      if (eth && (eth.isMetaMask || eth.providers?.some((p: any) => p.isMetaMask))) { src/components/MetaMaskSmartConnect.tsx:132:    } catch (e: any) { src/components/MyOrders.tsx:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/components/MyOrders.tsx:32:    new Promise<T>((_, rej) => setTimeout(() => rej(new Error(`Timeout:${label}`)), ms)) as any, src/components/MyOrders.tsx:47:function asStatusNum(x: any): number { src/components/MyOrders.tsx:137:  const canCustomerRate = (s: Scenario, rated: boolean) => !!(s as any).is_completed_by_executor && !rated; src/components/MyOrders.tsx:175:    setRatedOrders(new Set((data || []).map((r: any) => r.order_id))); src/components/MyOrders.tsx:190:          const s = (p as any).new as Scenario | undefined; src/components/MyOrders.tsx:191:          const oldId = (p as any).old?.id as string | undefined; src/components/MyOrders.tsx:230:              if (needLock && !(window as any).__locking) { src/components/MyOrders.tsx:231:                (window as any).__locking = true; src/components/MyOrders.tsx:232:                setTimeout(() => handleLock(after).finally(() => { (window as any).__locking = false; }), 0); src/components/MyOrders.tsx:277:    } catch (e: any) { src/components/MyOrders.tsx:289:      (s as any).executor_wallet || src/components/MyOrders.tsx:290:      (s as any).executorAddress || src/components/MyOrders.tsx:291:      (s as any).executor || src/components/MyOrders.tsx:294:    if (!executor && (s as any).executor_id) { src/components/MyOrders.tsx:295:      const execId = (s as any).executor_id as string; src/components/MyOrders.tsx:308:    const referrer = (s as any).referrer_wallet ?? ZERO; src/components/MyOrders.tsx:313:    if ((s as any).execution_time) { src/components/MyOrders.tsx:314:      const t = new Date((s as any).execution_time).getTime(); src/components/MyOrders.tsx:317:    if ((s as any).date) { src/components/MyOrders.tsx:318:      const t = new Date(`${(s as any).date}T${(s as any).time || '00:00'}`).getTime(); src/components/MyOrders.tsx:364:      setLocal(s.id, { escrow_tx_hash: txHash as any, status: 'agreed' }); src/components/MyOrders.tsx:366:    } catch (e: any) { src/components/MyOrders.tsx:430:    } catch (e: any) { src/components/MyOrders.tsx:440:      setLocal(s.id, { status: 'disputed' } as any); src/components/MyOrders.tsx:442:    } catch (e: any) { src/components/MyOrders.tsx:467:    } catch (e: any) { src/components/Profile.tsx:35:function waitForEthereum(ms = 3500): Promise<any | null> { src/components/Profile.tsx:38:    const eth = (window as any).ethereum; src/components/Profile.tsx:41:    const onInit = () => resolve((window as any).ethereum); src/components/Profile.tsx:45:      resolve((window as any).ethereum || null); src/components/Profile.tsx:50:async function getMetaMaskProvider(): Promise<any | null> { src/components/Profile.tsx:52:  const candidates = (eth as any)?.providers?.length ? (eth as any).providers : (eth ? [eth] : []); src/components/Profile.tsx:53:  const mm = candidates?.find((p: any) => p?.isMetaMask) || ((eth as any)?.isMetaMask ? eth : null); src/components/Profile.tsx:58:    const discovered: any[] = []; src/components/Profile.tsx:59:    const onAnnounce = (ev: any) => discovered.push(ev.detail); src/components/Profile.tsx:73:async function ensureBSC(provider: any) { src/components/Profile.tsx:84:  } catch (e: any) { src/components/Profile.tsx:93:type Eip1193Provider = { request: (a: { method: string; params?: any[] | Record<string, any> }) => Promise<any>; on?: any; removeListener?: any }; src/components/Profile.tsx:106:  } catch (e: any) { src/components/Profile.tsx:130:  (window.matchMedia && window.matchMedia('(display-mode: standalone)').matches) || (navigator as any).standalone === true; src/components/Profile.tsx:136:  const [user, setUser] = useState<any>(null); src/components/Profile.tsx:245:        const patch: any = { user_id: user.id }; src/components/Profile.tsx:269:    let intervalId: any = null; src/components/Profile.tsx:300:          if ((pushNotificationManager as any)?.subscribe) { src/components/Profile.tsx:301:            await (pushNotificationManager as any).subscribe(); src/components/Profile.tsx:302:          } else if ((pushNotificationManager as any)?.enable) { src/components/Profile.tsx:303:            await (pushNotificationManager as any).enable(); src/components/Profile.tsx:306:          if ((pushNotificationManager as any)?.unsubscribe) { src/components/Profile.tsx:307:            await (pushNotificationManager as any).unsubscribe(); src/components/Profile.tsx:308:          } else if ((pushNotificationManager as any)?.disable) { src/components/Profile.tsx:309:            await (pushNotificationManager as any).disable(); src/components/Profile.tsx:312:      } catch (e: any) { src/components/Profile.tsx:323:    try { (sw as any).oncontrollerchange = null; } catch {} src/components/Profile.tsx:334:      (sw as any).removeEventListener('controllerchange', blockReload, { capture: true } as any); src/components/Profile.tsx:446:      const prev = (window as any).__bmb_acc_handler__; src/components/Profile.tsx:447:      if (prev && (provider as any).removeListener) (provider as any).removeListener('accountsChanged', prev); src/components/Profile.tsx:454:      (window as any).__bmb_acc_handler__ = handler; src/components/Profile.tsx:455:      if ((provider as any).on) (provider as any).on('accountsChanged', handler); src/components/Profile.tsx:456:    } catch (e: any) { src/components/RateCounterpartyModal.tsx:106:    } catch (e: any) { src/components/ReceivedScenarioCard.tsx:29:      if (!error) setScenario(data as any); src/components/ReceivedScenarios.tsx:56:function humanizeEthersError(err: any): string { src/components/ReceivedScenarios.tsx:65:      const st = Number((deal as any).status); src/components/ReceivedScenarios.tsx:135:      const uid = (data as any)?.user?.id || ''; src/components/ReceivedScenarios.tsx:143:        .on('postgres_changes', { event: '*', schema: 'public', table: 'scenarios' }, (payload: any) => { src/components/ReceivedScenarios.tsx:149:            const mine = s.executor_id === uidRef.current || (s as any).receiver_id === uidRef.current; src/components/ReceivedScenarios.tsx:196:    setScenarios(((data as any) || []) as Scenario[]); src/components/ReceivedScenarios.tsx:209:    ((data as any) || []).forEach((row: any) => { m[row.order_id] = true; }); src/components/ReceivedScenarios.tsx:234:  const updateScenarioField = async (id: string, field: keyof Scenario, value: any) => { src/components/ReceivedScenarios.tsx:244:    setLocal(id, { [field]: value as any, is_agreed_by_customer: false, is_agreed_by_executor: false, status: 'pending' }); src/components/ReceivedScenarios.tsx:245:    await (supabase as any).from('scenarios').update({ src/components/ReceivedScenarios.tsx:269:      const { error } = await (supabase as any) src/components/ReceivedScenarios.tsx:284:    } catch (e:any) { src/components/ReceivedScenarios.tsx:303:      let dealBefore: any = undefined; src/components/ReceivedScenarios.tsx:309:      const statusOnChain = Number((dealBefore as any)?.status ?? -1); src/components/ReceivedScenarios.tsx:310:      const executorOnChain = String((dealBefore as any)?.executor || '').toLowerCase(); src/components/ReceivedScenarios.tsx:370:      await (supabase as any) src/components/ReceivedScenarios.tsx:377:      let st = Number((deal as any).status); src/components/ReceivedScenarios.tsx:383:        await (supabase as any).from('scenarios').update({ status: 'confirmed' }).eq('id', s.id); src/components/ReceivedScenarios.tsx:393:    } catch (e:any) { src/components/ReceivedScenarios.tsx:406:      const { data: s } = await (supabase as any) src/components/ReceivedScenarios.tsx:411:      if (s) { try { d = await ensureDisputeRowForScenario(s as any); } catch {} } src/components/ReceivedScenarios.tsx:432:    } catch (e:any) { src/components/Register.tsx:8:  (import.meta as any).env?.VITE_PUBLIC_APP_URL || src/components/Register.tsx:98:    } catch (err: any) { src/components/Register.tsx:123:    } catch (err: any) { src/components/Register.tsx:161:        const payload: Record<string, any> = { src/components/Register.tsx:186:    } catch (err: any) { src/components/ReviewsModal.tsx:69:          (profs || []).forEach((p: any) => (map[p.user_id] = p)); src/components/SafeOrderButton.tsx:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/components/ScenarioCard.tsx:78:  const amountToString = (v: number | null) => (v ?? '') as any; src/components/ScenarioDisputeBlock.tsx:79:    } catch (err: any) { src/components/ScenarioForm.tsx:150:    } catch (err: any) { src/components/ScenarioTemplates.tsx:5:  const [templates, setTemplates] = useState<any[]>([]); src/components/StoryBar.tsx:76:        (payload: any) => { src/components/StoryBar.tsx:90:    window.addEventListener('behaviorUploaded', onUploaded as any); src/components/StoryBar.tsx:95:      window.removeEventListener('behaviorUploaded', onUploaded as any); src/components/UploadBehavior.tsx:75:    if (!ACCEPT_MIME.includes(file.type as any)) { src/components/UploadBehavior.tsx:122:    } catch (err: any) { src/components/UserRatingBadge.tsx:38:        if (!error && !ac.signal.aborted) setStats((data as any) || { user_id: userId, avg_score: 0, ratings_count: 0 }); src/components/UserRatingBadge.tsx:67:    const handler = (e: any) => { src/components/UserRatingsFeed.tsx:70:      (profs || []).forEach((p: any) => { map[p.user_id] = p; }); src/components/UserRatingsFeed.tsx:91:    const handler = (e: any) => { src/components/api/update-status.ts:35:  } catch (err: any) { src/components/hooks/useSwipeDismissRight.ts:143:      el.removeEventListener('pointerdown', onPointerDown as any); src/components/hooks/useSwipeDismissRight.ts:144:      el.removeEventListener('pointermove', onPointerMove as any); src/components/hooks/useSwipeDismissRight.ts:145:      el.removeEventListener('pointerup', onPointerUp as any); src/components/hooks/useSwipeDismissRight.ts:146:      el.removeEventListener('pointercancel', onPointerUp as any); src/components/hooks/useSwipeDismissRight.ts:147:      el.removeEventListener('lostpointercapture', onPointerUp as any); src/components/hooks/useUserRating.ts:11:    let ch: any; src/lib/disputeApi.ts:127:  let lastErr: any = null; src/lib/disputeApi.ts:199:export async function uploadEvidenceAndAttach(a: any, b: any, c?: any) { src/lib/disputeApi.ts:224:    const behavior_id = (beh as any).id as number; src/lib/disputeApi.ts:285:      executor: (data as any).executor_votes || 0, src/lib/disputeApi.ts:286:      customer: (data as any).customer_votes || 0, src/lib/disputeApi.ts:287:      total: (data as any).total_votes || 0 src/lib/disputeApi.ts:299:  (raws || []).forEach((r: any) => r.choice === 'executor' ? ex++ : r.choice === 'customer' ? cu++ : null); src/lib/disputeApi.ts:316:      winner = executor > customer ? 'executor' : customer > executor ? 'customer' : null as any; src/lib/erc20.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/erc20.ts:11:  const anyE = ethers as any; src/lib/erc20.ts:21:function shouldRetry(err: any): boolean { src/lib/erc20.ts:23:  const code = (err && (err.code ?? err?.data?.code)) as any; src/lib/erc20.ts:33:  let lastErr: any; src/lib/erc20.ts:44:export async function fetchTokenDecimals(token: string, provider: any): Promise<number> { src/lib/erc20.ts:45:  const erc20 = new (ethers as any).Contract(token, ERC20_ABI, provider); src/lib/erc20.ts:55:  signer: any; src/lib/erc20.ts:62:  const erc20R = new (ethers as any).Contract(token, ERC20_ABI, provider); src/lib/erc20.ts:63:  const current: any = await retry(async () => erc20R.allowance(owner, spender)); src/lib/erc20.ts:65:  if ((current as any).gte?.(amount) || (typeof current === "bigint" && current >= (amount as any))) { src/lib/erc20.ts:69:  const erc20W = new (ethers as any).Contract(token, ERC20_ABI, signer); src/lib/erc20.ts:70:  const toApprove = approveMax ? ("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" as any) : amount; src/lib/escrowConfirmGuard.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/escrowConfirmGuard.ts:33:  const web3 = new ethers.providers.Web3Provider(provider as any, "any"); src/lib/escrowConfirmGuard.ts:69:  const pickWallet = (p?: any) => src/lib/escrowContract.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/escrowContract.ts:62:  const web3   = new ethers.providers.Web3Provider(provider as any, 'any'); src/lib/escrowContract.ts:79:    await eip1193.request({ method: 'wallet_switchEthereumChain', params: [{ chainId: CHAIN_ID_HEX }] as any }); src/lib/escrowContract.ts:142:  return (data as any)?.wallet ?? null; src/lib/escrowContract.ts:158:  const refWallet = (direct.data as any)?.referrer_wallet as string | null | undefined; src/lib/escrowContract.ts:159:  const refOwner  = (direct.data as any)?.referred_by as string | null | undefined; src/lib/escrowContract.ts:170:    return (ownerRow as any)?.wallet ?? null; src/lib/escrowContract.ts:251:  const exId     = executorId ?? (sc as any)?.executor_id ?? undefined; src/lib/escrowContract.ts:252:  const custId   = (sc as any)?.creator_id ?? undefined; src/lib/escrowContract.ts:253:  const date     = (sc as any)?.date ?? null; src/lib/escrowContract.ts:254:  const time     = (sc as any)?.time ?? null; src/lib/escrowContract.ts:255:  const execUnix = executionTime ?? toUnixSeconds(date ?? undefined, time ?? undefined, (sc as any)?.execution_time ?? null); src/lib/escrowContract.ts:282:    await (c as any).callStatic.lockFunds( src/lib/escrowContract.ts:286:  } catch (e: any) { src/lib/escrowContract.ts:293:    gas = await (c as any).estimateGas.lockFunds( src/lib/escrowContract.ts:303:  const tx = await (c as any).lockFunds( src/lib/escrowContract.ts:317:  const tx = await (c as any).confirmCompletion(b32); src/lib/escrowContract.ts:328:  const tx = await (c as any).openDispute(b32); src/lib/escrowContract.ts:338:  const tx = await (c as any).vote(b32, forExecutor); src/lib/escrowContract.ts:348:  const tx = await (c as any).finalizeDispute(b32); src/lib/escrowContract.ts:357:  const deal = (await (c as any).getDeal(b32)) as DealTuple; src/lib/escrowContractDispute.ts:17:  escrow: any, src/lib/escrowContractDispute.ts:19:  args: any[] = [], src/lib/escrowContractDispute.ts:31:  const escrow = new ethers.Contract(addr ?? ESCROW_ADDRESS, disputeAbi, signer) as any; src/lib/escrowContractDispute.ts:43:  const escrow = new ethers.Contract(addr ?? ESCROW_ADDRESS, disputeAbi, signer) as any; src/lib/escrowMobile.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/escrowMobile.ts:31:  onReceipt?: (rcpt: any) => void; src/lib/escrowMobile.ts:69:  } catch (e: any) { src/lib/escrowMobile.ts:93:    const maybeLock = (escrowModule as any)?.lockFunds; src/lib/escrowMobile.ts:94:    const maybeOneClick = (escrowModule as any)?.quickOneClickSetup; src/lib/eth.ts:6:    ethereum?: any; src/lib/eth.ts:64:  } catch (e: any) { src/lib/eth.ts:106:export async function waitForReceipt(hash: string, timeoutMs = 120_000): Promise<any> { src/lib/isMetaMaskBrowser.ts:13:    (navigator.platform === "MacIntel" && (navigator as any).maxTouchPoints > 1); src/lib/isMetaMaskBrowser.ts:17:    /MetaMaskMobile/i.test(ua) || /metamask/i.test((navigator as any).standalone ? "" : ua); src/lib/isMetaMaskBrowser.ts:20:  const hasEthereum = typeof (window as any).ethereum !== "undefined"; src/lib/isMetaMaskBrowser.ts:21:  const isMMFlag = !!(hasEthereum && (window as any).ethereum.isMetaMask); src/lib/lighthouseUpload.ts:36:    const cid = (res as any)?.data?.Hash as string | undefined; src/lib/metamaskGuard.ts:8:    ethereum?: any; src/lib/metamaskGuard.ts:17:      const eth = (window as any).ethereum; src/lib/metamaskGuard.ts:21:      let pendingAccPromise: Promise<any> | null = null; src/lib/metamaskGuard.ts:23:      eth.request = (args: any) => { src/lib/metamaskGuard.ts:46:  if ((window as any).ethereum) install(); src/lib/metamaskSdk.ts:2:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/metamaskSdk.ts:16:let _sdk: any = null; src/lib/metamaskSdk.ts:17:let _sdkProvider: any = null; src/lib/metamaskSdk.ts:21:  const fromEnv = (import.meta as any)?.env?.VITE_PUBLIC_APP_URL as string | undefined; src/lib/metamaskSdk.ts:31:export async function getSdkProvider(): Promise<any> { src/lib/metamaskSdk.ts:35:  const mod: any = await import('@metamask/sdk'); src/lib/mmDeepLink.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/mmDeepLink.ts:26:    (import.meta as any)?.env?.VITE_PUBLIC_APP_URL?.replace(/^https?:\/\//, "") || src/lib/mobileWallet.ts:2:let _sdk: any | null = null; src/lib/mobileWallet.ts:34:  const eth = (window as any).ethereum; src/lib/mobileWallet.ts:47:  } catch (e: any) { src/lib/onEthereumReady.ts:6:export function onEthereumReady(cb: (eth: any) => void) { src/lib/onEthereumReady.ts:7:  const w = window as any; src/lib/onEthereumReady.ts:17:    () => cb((window as any).ethereum), src/lib/onEthereumReady.ts:23:    if ((window as any).ethereum) cb((window as any).ethereum); src/lib/providerBridge.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/providerBridge.ts:6:  request: (args: { method: string; params?: any[] | Record<string, any> }) => Promise<any>; src/lib/providerBridge.ts:7:  on?: (event: string, handler: (...args: any[]) => void) => void; src/lib/providerBridge.ts:8:  removeListener?: (event: string, handler: (...args: any[]) => void) => void; src/lib/providerBridge.ts:74:    const err: any = new Error('Opened MetaMask deeplink; continue inside MetaMask in-app browser.'); src/lib/providerBridge.ts:79:  const err: any = new Error('Ethereum provider not found. Install MetaMask.'); src/lib/providerBridge.ts:92:  const web3 = new ethers.providers.Web3Provider(provider as any, 'any'); src/lib/providerBridge.ts:116:  } catch (e: any) { src/lib/pushNotifications.ts:37:  const hasMM = !!(window as any).ethereum?.isMetaMask; src/lib/pushNotifications.ts:65:      if (typeof (window as any).Audio !== 'undefined') { src/lib/pushNotifications.ts:163:    scenario: any, src/lib/pushNotifications.ts:195:  public async notifyNewScenario(scenario: any, _currentUserId: string): Promise<void> { src/lib/ratings.ts:102:export function subscribeProfileRatings(userId: string, cb: (payload: any) => void) { src/lib/realtimeNotifications.ts:21:  data: any; src/lib/realtimeNotifications.ts:30:  private channels: any[] = []; src/lib/realtimeNotifications.ts:34:  private lastPollingData: any = null; src/lib/realtimeNotifications.ts:176:        }, {} as any); src/lib/realtimeNotifications.ts:220:  private async handleScenarioChange(payload: any): Promise<void> { src/lib/realtimeNotifications.ts:239:  private async handleNewScenario(scenario: any): Promise<void> { src/lib/realtimeNotifications.ts:269:  private async handleStatusUpdate(oldRecord: any, newRecord: any): Promise<void> { src/lib/realtimeNotifications.ts:310:    scenario: any, src/lib/scenarioDraft.ts:3:export type ScenarioDraft = Record<string, any>; src/lib/scenarioFormDraft.ts:25:  [k: string]: any; src/lib/scenarioFormDraft.ts:147:    const supabase = (mod as any).supabase as { src/lib/scenarioFormDraft.ts:149:        upsert(values: any, options?: any): Promise<{ error: any }>; src/lib/sessionHandoffBoot.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/tables.ts:51:  abilities: any | null; src/lib/universalNotifications.ts:18:  data?: any; src/lib/useBehaviors.ts:6:  const [behaviors, setBehaviors] = useState<any[]>([]) src/lib/useSafeTap.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/useSafeTap.ts:11:export function useSafeTap<T extends (...args: any[]) => void>( src/lib/useSafeTap.ts:23:    (e?: any) => { src/lib/useScenarioRealtime.ts:5:export function useScenarioRealtime(id: string, onChange: (row: any)=>void) { src/lib/wallet.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/wallet.ts:11:  params?: any[] | Record<string, any>; src/lib/wallet.ts:12:}) => Promise<any>; src/lib/wallet.ts:16:  on?: (event: string, handler: (...args: any[]) => void) => void; src/lib/wallet.ts:17:  removeListener?: (event: string, handler: (...args: any[]) => void) => void; src/lib/wallet.ts:36:const inflightByKey = new Map<string, Promise<any>>(); src/lib/wallet.ts:37:let globalMMSDK: any | null = null; src/lib/wallet.ts:45:  const eth = (globalThis as any).ethereum as Eip1193Provider | undefined; src/lib/wallet.ts:48:    const mm = eth.providers.find((p: any) => p && p.isMetaMask); src/lib/wallet.ts:66:async function requestWithConnect<T = any>( src/lib/wallet.ts:68:  args: { method: string; params?: any[] | Record<string, any> }, src/lib/wallet.ts:82:                : Boolean((provider as any).session); src/lib/wallet.ts:86:        } catch (err: any) { src/lib/wallet.ts:94:            if (args.method === 'eth_requestAccounts' && res.length) return res as any; src/lib/wallet.ts:125:  (globalThis as any).ethereum = provider; src/lib/wallet.ts:128:  let chainId: any = await requestWithConnect(provider, { method: 'eth_chainId' }, 'sdk_eth_chainId'); src/lib/wallet.ts:179:  let chainId: any = await requestWithConnect(provider, { method: 'eth_chainId' }); src/lib/wallet.ts:189:  } catch (err: any) { src/lib/wallet.ts:213:  const id = await requestWithConnect<any>(provider, { method: 'eth_chainId' }); src/lib/wallet.ts:221:  return Boolean(p && (p as any).isMetaMask); src/lib/web3.ts:54:let _sdkProvider: any | null = null; src/lib/web3.ts:67:  const anyWin = window as any; src/lib/web3.ts:69:    return new ethers.providers.Web3Provider(anyWin.ethereum, 'any'); src/lib/web3.ts:85:    return new ethers.providers.Web3Provider(_sdkProvider as any, 'any'); src/lib/web3.ts:94:  const ethereum = (provider as any).provider || (window as any).ethereum; src/lib/web3.ts:100:  const ethereum = (provider as any).provider || (window as any).ethereum; src/lib/web3.ts:107:  } catch (err: any) { src/main.tsx:8:if (import.meta.env.DEV) (window as any).ethers = ethers; src/main.tsx:28:  console.error("[GlobalError]", (e as any).error ?? (e as any).message) src/main.tsx:31:  console.error("[UnhandledRejection]", (e as any).reason) src/main.tsx:57:  const ver = (import.meta.env as any).VITE_APP_VERSION ?? Date.now();

### PATTERN: console\.log
onchain/hardhat.config.js:13:console.log("[env check]", onchain/scripts/deploy-escrow.js:16:  console.log("Deploying Escrow with:"); onchain/scripts/deploy-escrow.js:17:  console.log("  USDT:", USDT); onchain/scripts/deploy-escrow.js:18:  console.log("  TREASURY:", TREASURY); onchain/scripts/deploy-escrow.js:24:  console.log("\nтЬЕ Escrow deployed at:", escrow.address); onchain/scripts/deploy-escrow.js:30:    if (token)   console.log("   token():   ", token); onchain/scripts/deploy-escrow.js:31:    if (treasury) console.log("   treasury():", treasury); onchain/scripts/deploy-escrow.js:34:  console.log("\nЁЯОп ╨Ч╨▒╨╡╤А╨╡╨╢╤Ц╤В╤М ╤Ж╤О ╨░╨┤╤А╨╡╤Б╤Г ╨▓ ╤Д╤А╨╛╨╜╤В╨╡╨╜╨┤ .env ╤П╨║ VITE_ESCROW_ADDRESS ╤Ц ╨┐╨╡╤А╨╡╨╖╨░╨┐╤Г╤Б╤В╤Ц╤В╤М dev-╤Б╨╡╤А╨▓╨╡╤А."); scripts/sanitize-imports.cjs:54:          console.log('fixed:', p.replace(ROOT + path.sep, '')); scripts/sanitize-imports.cjs:56:          console.log('needs-fix:', p.replace(ROOT + path.sep, '')); src/components/UserRatingsFeed.tsx:58:    console.log(`[UserRatingsFeed] userId=${userId} fetched=${r.length} withComments=${withText.length}`); src/lib/metamaskGuard.ts:40:      console.log('[BMB Guard] installed'); src/lib/realtimeNotifications.ts:43:      console.log('ЁЯФД Realtime ╨▓╨╢╨╡ ╤Ц╨╜╤Ц╤Ж╤Ц╨░╨╗╤Ц╨╖╨╛╨▓╨░╨╜╨╛ ╨┤╨╗╤П ╨║╨╛╤А╨╕╤Б╤В╤Г╨▓╨░╤З╨░:', userId); src/lib/realtimeNotifications.ts:48:    console.log('ЁЯЪА ╨Ж╨╜╤Ц╤Ж╤Ц╨░╨╗╤Ц╨╖╨░╤Ж╤Ц╤П Realtime Notifications ╨┤╨╗╤П:', userId); src/lib/realtimeNotifications.ts:55:        console.log('тЬЕ Supabase Realtime ╨┐╤Ц╨┤╨║╨╗╤О╤З╨╡╨╜╨╛'); src/lib/realtimeNotifications.ts:96:          console.log('ЁЯУб Realtime ╤Б╤В╨░╤В╤Г╤Б:', status); src/lib/realtimeNotifications.ts:99:            console.log('тЬЕ ╨Я╤Ц╨┤╨┐╨╕╤Б╨║╨░ ╨╜╨░ scenarios ╨░╨║╤В╨╕╨▓╨╜╨░'); src/lib/realtimeNotifications.ts:116:    console.log(`ЁЯФД ╨Ч╨░╨┐╤Г╤Б╨║ polling fallback (╨║╨╛╨╢╨╜╤Ц ${this.pollingIntervalTime / 1000} ╤Б╨╡╨║╤Г╨╜╨┤)`); src/lib/realtimeNotifications.ts:189:      console.log(`ЁЯЫС ╨Ф╨╛╤Б╤П╨│╨╜╤Г╤В╨╛ ╨╝╨░╨║╤Б╨╕╨╝╤Г╨╝ ╤Б╨┐╤А╨╛╨▒ ╨▓╤Ц╨┤╨╜╨╛╨▓╨╗╨╡╨╜╨╜╤П (${this.maxReconnectAttempts})`); src/lib/realtimeNotifications.ts:196:    console.log(`ЁЯФД ╨б╨┐╤А╨╛╨▒╨░ ╨▓╤Ц╨┤╨╜╨╛╨▓╨╗╨╡╨╜╨╜╤П ${this.reconnectAttempts}/${this.maxReconnectAttempts} ╤З╨╡╤А╨╡╨╖ ${delay}ms`); src/lib/realtimeNotifications.ts:207:            console.log('тЬЕ Realtime ╨╖\'╤Ф╨┤╨╜╨░╨╜╨╜╤П ╨▓╤Ц╨┤╨╜╨╛╨▓╨╗╨╡╨╜╨╛ ╤Г╤Б╨┐╤Ц╤И╨╜╨╛'); src/lib/realtimeNotifications.ts:210:            console.log('тЪая╕П Realtime ╨╜╨╡ ╨▓╨┤╨░╨╗╨╛╤Б╤П ╨▓╤Ц╨┤╨╜╨╛╨▓╨╕╤В╨╕, ╨┐╤А╨╛╨┤╨╛╨▓╨╢╤Г╤Ф╨╝╨╛ ╨╖ polling'); src/lib/realtimeNotifications.ts:221:    console.log('ЁЯУе ╨Ю╤В╤А╨╕╨╝╨░╨╜╨╛ ╨╖╨╝╤Ц╨╜╤Г ╨▓ scenarios:', payload); src/lib/realtimeNotifications.ts:250:      console.log('тП│ Cooldown: ╨┐╤А╨╛╨┐╤Г╤Б╨║ ╤Б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П ╨┐╤А╨╛ ╨╜╨╛╨▓╨╕╨╣ ╤Б╤Ж╨╡╨╜╨░╤А╤Ц╨╣'); src/lib/realtimeNotifications.ts:259:        console.log('ЁЯОп ╨Ъ╨╗╤Ц╨║ ╨┐╨╛ ╤Б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤О ╨╜╨╛╨▓╨╛╨│╨╛ ╤Б╤Ж╨╡╨╜╨░╤А╤Ц╤О'); src/lib/realtimeNotifications.ts:265:    console.log('тЬЕ ╨б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П ╨┐╤А╨╛ ╨╜╨╛╨▓╨╕╨╣ ╤Б╤Ж╨╡╨╜╨░╤А╤Ц╨╣ ╨╜╨░╨┤╤Ц╤Б╨╗╨░╨╜╨╛'); src/lib/realtimeNotifications.ts:285:    console.log(`ЁЯУК ╨Ч╨╝╤Ц╨╜╨░ ╤Б╤В╨░╤В╤Г╤Б╤Г ╤Б╤Ж╨╡╨╜╨░╤А╤Ц╤О ${newRecord.id}: ${oldStatus} тЖТ ${newStatus}`); src/lib/realtimeNotifications.ts:292:      console.log('тП│ Cooldown: ╨┐╤А╨╛╨┐╤Г╤Б╨║ ╤Б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П ╨┐╤А╨╛ ╨╖╨╝╤Ц╨╜╤Г ╤Б╤В╨░╤В╤Г╤Б╤Г'); src/lib/realtimeNotifications.ts:369:          console.log(`ЁЯОп ╨Ъ╨╗╤Ц╨║ ╨┐╨╛ ╤Б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤О ╤Б╤В╨░╤В╤Г╤Б╤Г: ${newStatus}`); src/lib/realtimeNotifications.ts:374:      console.log(`тЬЕ ╨б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П ╨┐╤А╨╛ ╤Б╤В╨░╤В╤Г╤Б "${newStatus}" ╨╜╨░╨┤╤Ц╤Б╨╗╨░╨╜╨╛`); src/lib/realtimeNotifications.ts:384:      onClick: () => console.log('ЁЯОп ╨в╨╡╤Б╤В realtime ╨┐╤А╨╛╨╣╨┤╨╡╨╜╨╛!') src/lib/realtimeNotifications.ts:436:    console.log('тП╕я╕П ╨Ч╤Г╨┐╨╕╨╜╨║╨░ ╨┐╤А╨╛╤Б╨╗╤Г╤Е╨╛╨▓╤Г╨▓╨░╨╜╨╜╤П Realtime'); src/lib/realtimeNotifications.ts:455:    console.log('ЁЯз╣ ╨Ю╤З╨╕╤Й╨╡╨╜╨╜╤П Realtime Notifications'); src/lib/realtimeNotifications.ts:465:    console.log('тЬЕ Realtime Notifications ╨╛╤З╨╕╤Й╨╡╨╜╨╛'); src/lib/realtimeNotifications.ts:517:        console.log('ЁЯФЧ Realtime notifications ╨░╨║╤В╨╕╨▓╨╛╨▓╨░╨╜╨╛ ╨┤╨╗╤П:', userId); src/lib/universalNotifications.ts:71:          console.log(`ЁЯО╡ ╨Ч╨▓╤Г╨║ ╨▓╤Ц╨┤╤В╨▓╨╛╤А╨╡╨╜╨╛: ${soundUrl}`); src/lib/universalNotifications.ts:103:      console.log(`ЁЯУ│ ╨Т╤Ц╨▒╤А╨░╤Ж╤Ц╤П ╨░╨║╤В╨╕╨▓╨╛╨▓╨░╨╜╨░: ${pattern}`); src/lib/universalNotifications.ts:128:    console.log(`ЁЯФС ╨Ф╨╛╨╖╨▓╤Ц╨╗ ╨╜╨░ ╤Б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П: ${permission}`); src/lib/universalNotifications.ts:150:  console.log(`ЁЯФФ ╨б╨┐╤А╨╛╨▒╨░ ╨┐╨╛╨║╨░╨╖╨░╤В╨╕ ╤Б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П: "${title}"`); src/lib/universalNotifications.ts:231:          console.log('тЬЕ ╨Т╨╕╨║╨╛╨╜╨░╨╜╨╛ ╨║╨░╤Б╤В╨╛╨╝╨╜╨╕╨╣ onClick ╨╛╨▒╤А╨╛╨▒╨╜╨╕╨║'); src/lib/universalNotifications.ts:247:      console.log(`тЬЕ ╨б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П ╨┐╨╛╨║╨░╨╖╨░╨╜╨╛: "${title}"`); src/lib/universalNotifications.ts:251:      console.log(`ЁЯФТ ╨б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П ╨╖╨░╨║╤А╨╕╤В╨╛: "${title}"`); src/lib/universalNotifications.ts:260:        console.log(`тП░ ╨б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤П ╨░╨▓╤В╨╛╨╝╨░╤В╨╕╤З╨╜╨╛ ╨╖╨░╨║╤А╨╕╤В╨╛ ╤З╨╡╤А╨╡╨╖ ${autoCloseTimeout}╨╝╤Б`); src/lib/universalNotifications.ts:305:      console.log('ЁЯОЙ ╨Ъ╨╗╤Ц╨║ ╨┐╨╛ ╤Ц╨╜╤В╨╡╤А╨░╨║╤В╨╕╨▓╨╜╨╛╨╝╤Г ╤Б╨┐╨╛╨▓╤Ц╤Й╨╡╨╜╨╜╤О!'); src/lib/universalNotifications.ts:313:    onClick: () => console.log('Fallback ╤В╨╡╤Б╤В') src/main.tsx:34:console.log(import.meta.env.PROD ? "BMB boot production" : "BMB boot dev");

### PATTERN: eslint-disable
src/components/EscrowButton.tsx:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/components/EscrowHandoff.tsx:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/components/MyOrders.tsx:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/components/ReceivedScenarios.tsx:187:    // eslint-disable-next-line react-hooks/exhaustive-deps src/components/SafeOrderButton.tsx:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/components/UserRatingBadge.tsx:51:    // eslint-disable-next-line react-hooks/exhaustive-deps src/components/UserRatingBadge.tsx:76:    // eslint-disable-next-line react-hooks/exhaustive-deps src/lib/erc20.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/escrowConfirmGuard.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/escrowContract.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/escrowMobile.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/metamaskSdk.ts:2:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/mmDeepLink.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/providerBridge.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/sessionHandoffBoot.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/useSafeTap.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */ src/lib/wallet.ts:1:/* eslint-disable @typescript-eslint/no-explicit-any */

### PATTERN: require\(
onchain/hardhat.config.js:2:const path = require("path"); onchain/hardhat.config.js:5:require("dotenv").config({ path: path.resolve(__dirname, ".env") }); onchain/hardhat.config.js:8:require("@nomiclabs/hardhat-ethers"); onchain/scripts/deploy-escrow.js:2:const path = require("path"); onchain/scripts/deploy-escrow.js:3:require("dotenv").config({ path: path.resolve(__dirname, "..", ".env") }); onchain/scripts/deploy-escrow.js:6:  const hre = require("hardhat"); scripts/sanitize-imports.cjs:5:const fs = require('fs'); scripts/sanitize-imports.cjs:6:const path = require('path');

### PATTERN: as any
src/components/A2HS.tsx:15:      (window as any).__bmbA2HS = ev; src/components/A2HS.tsx:24:    window.addEventListener('beforeinstallprompt', onBIP as any); src/components/A2HS.tsx:28:      window.removeEventListener('beforeinstallprompt', onBIP as any); src/components/AddToHomeProfileCard.tsx:30:        (navigator as any).standalone === true src/components/AddToHomeProfileCard.tsx:50:    window.addEventListener('beforeinstallprompt', onBeforeInstall as any); src/components/AddToHomeProfileCard.tsx:53:      window.removeEventListener('beforeinstallprompt', onBeforeInstall as any); src/components/BehaviorsFeed.tsx:235:      window.removeEventListener('pointerdown', handler, { capture: true } as any); src/components/BehaviorsFeed.tsx:237:    window.addEventListener('pointerdown', handler, { capture: true } as any); src/components/BehaviorsFeed.tsx:238:    return () => { window.removeEventListener('pointerdown', handler, { capture: true } as any); }; src/components/DisputeVoteInline.tsx:39:      setWinner((d.winner as any) ?? null); src/components/DisputeVoteWidget.tsx:74:      setMine((mineVote as any)?.choice ?? null); src/components/InAppOpenInBrowserBanner.tsx:18:  if (typeof (navigator as any).standalone === 'boolean' && (navigator as any).standalone) return true; src/components/InstallPWAButton.tsx:13:  const iosStandalone = typeof navigator !== "undefined" && (navigator as any).standalone === true; src/components/InstallPWAButton.tsx:86:    const existing = (window as any).__bmbA2HS as BeforeInstallPromptEvent | undefined; src/components/InstallPWAButton.tsx:98:      try { (window as any).__bmbA2HS = bip; window.dispatchEvent(new CustomEvent("bmb:a2hs-available")); } catch {} src/components/InstallPWAButton.tsx:107:    window.addEventListener("beforeinstallprompt", onBIP as any); src/components/InstallPWAButton.tsx:118:      window.removeEventListener("beforeinstallprompt", onBIP as any); src/components/Login.tsx:40:  const eth = (window as any).ethereum; src/components/Login.tsx:51:      await (window as any).ethereum.request({ src/components/Login.tsx:87:      const eth = (window as any).ethereum; src/components/MapView.tsx:138:    const profileId = (location.state as any)?.profile; src/components/MetaMaskSmartConnect.tsx:14:const getInjected = () => (typeof window !== 'undefined' ? (window as any).ethereum : undefined); src/components/MetaMaskSmartConnect.tsx:100:    const envUrl = (import.meta as any)?.env?.VITE_PUBLIC_APP_URL as string | undefined; src/components/MyOrders.tsx:32:    new Promise<T>((_, rej) => setTimeout(() => rej(new Error(`Timeout:${label}`)), ms)) as any, src/components/MyOrders.tsx:137:  const canCustomerRate = (s: Scenario, rated: boolean) => !!(s as any).is_completed_by_executor && !rated; src/components/MyOrders.tsx:190:          const s = (p as any).new as Scenario | undefined; src/components/MyOrders.tsx:191:          const oldId = (p as any).old?.id as string | undefined; src/components/MyOrders.tsx:230:              if (needLock && !(window as any).__locking) { src/components/MyOrders.tsx:231:                (window as any).__locking = true; src/components/MyOrders.tsx:232:                setTimeout(() => handleLock(after).finally(() => { (window as any).__locking = false; }), 0); src/components/MyOrders.tsx:289:      (s as any).executor_wallet || src/components/MyOrders.tsx:290:      (s as any).executorAddress || src/components/MyOrders.tsx:291:      (s as any).executor || src/components/MyOrders.tsx:294:    if (!executor && (s as any).executor_id) { src/components/MyOrders.tsx:295:      const execId = (s as any).executor_id as string; src/components/MyOrders.tsx:308:    const referrer = (s as any).referrer_wallet ?? ZERO; src/components/MyOrders.tsx:313:    if ((s as any).execution_time) { src/components/MyOrders.tsx:314:      const t = new Date((s as any).execution_time).getTime(); src/components/MyOrders.tsx:317:    if ((s as any).date) { src/components/MyOrders.tsx:318:      const t = new Date(`${(s as any).date}T${(s as any).time || '00:00'}`).getTime(); src/components/MyOrders.tsx:364:      setLocal(s.id, { escrow_tx_hash: txHash as any, status: 'agreed' }); src/components/MyOrders.tsx:440:      setLocal(s.id, { status: 'disputed' } as any); src/components/Profile.tsx:38:    const eth = (window as any).ethereum; src/components/Profile.tsx:41:    const onInit = () => resolve((window as any).ethereum); src/components/Profile.tsx:45:      resolve((window as any).ethereum || null); src/components/Profile.tsx:52:  const candidates = (eth as any)?.providers?.length ? (eth as any).providers : (eth ? [eth] : []); src/components/Profile.tsx:53:  const mm = candidates?.find((p: any) => p?.isMetaMask) || ((eth as any)?.isMetaMask ? eth : null); src/components/Profile.tsx:130:  (window.matchMedia && window.matchMedia('(display-mode: standalone)').matches) || (navigator as any).standalone === true; src/components/Profile.tsx:300:          if ((pushNotificationManager as any)?.subscribe) { src/components/Profile.tsx:301:            await (pushNotificationManager as any).subscribe(); src/components/Profile.tsx:302:          } else if ((pushNotificationManager as any)?.enable) { src/components/Profile.tsx:303:            await (pushNotificationManager as any).enable(); src/components/Profile.tsx:306:          if ((pushNotificationManager as any)?.unsubscribe) { src/components/Profile.tsx:307:            await (pushNotificationManager as any).unsubscribe(); src/components/Profile.tsx:308:          } else if ((pushNotificationManager as any)?.disable) { src/components/Profile.tsx:309:            await (pushNotificationManager as any).disable(); src/components/Profile.tsx:323:    try { (sw as any).oncontrollerchange = null; } catch {} src/components/Profile.tsx:334:      (sw as any).removeEventListener('controllerchange', blockReload, { capture: true } as any); src/components/Profile.tsx:446:      const prev = (window as any).__bmb_acc_handler__; src/components/Profile.tsx:447:      if (prev && (provider as any).removeListener) (provider as any).removeListener('accountsChanged', prev); src/components/Profile.tsx:454:      (window as any).__bmb_acc_handler__ = handler; src/components/Profile.tsx:455:      if ((provider as any).on) (provider as any).on('accountsChanged', handler); src/components/ReceivedScenarioCard.tsx:29:      if (!error) setScenario(data as any); src/components/ReceivedScenarios.tsx:65:      const st = Number((deal as any).status); src/components/ReceivedScenarios.tsx:135:      const uid = (data as any)?.user?.id || ''; src/components/ReceivedScenarios.tsx:149:            const mine = s.executor_id === uidRef.current || (s as any).receiver_id === uidRef.current; src/components/ReceivedScenarios.tsx:196:    setScenarios(((data as any) || []) as Scenario[]); src/components/ReceivedScenarios.tsx:209:    ((data as any) || []).forEach((row: any) => { m[row.order_id] = true; }); src/components/ReceivedScenarios.tsx:244:    setLocal(id, { [field]: value as any, is_agreed_by_customer: false, is_agreed_by_executor: false, status: 'pending' }); src/components/ReceivedScenarios.tsx:245:    await (supabase as any).from('scenarios').update({ src/components/ReceivedScenarios.tsx:269:      const { error } = await (supabase as any) src/components/ReceivedScenarios.tsx:309:      const statusOnChain = Number((dealBefore as any)?.status ?? -1); src/components/ReceivedScenarios.tsx:310:      const executorOnChain = String((dealBefore as any)?.executor || '').toLowerCase(); src/components/ReceivedScenarios.tsx:370:      await (supabase as any) src/components/ReceivedScenarios.tsx:377:      let st = Number((deal as any).status); src/components/ReceivedScenarios.tsx:383:        await (supabase as any).from('scenarios').update({ status: 'confirmed' }).eq('id', s.id); src/components/ReceivedScenarios.tsx:406:      const { data: s } = await (supabase as any) src/components/ReceivedScenarios.tsx:411:      if (s) { try { d = await ensureDisputeRowForScenario(s as any); } catch {} } src/components/Register.tsx:8:  (import.meta as any).env?.VITE_PUBLIC_APP_URL || src/components/ScenarioCard.tsx:78:  const amountToString = (v: number | null) => (v ?? '') as any; src/components/StoryBar.tsx:90:    window.addEventListener('behaviorUploaded', onUploaded as any); src/components/StoryBar.tsx:95:      window.removeEventListener('behaviorUploaded', onUploaded as any); src/components/UploadBehavior.tsx:75:    if (!ACCEPT_MIME.includes(file.type as any)) { src/components/UserRatingBadge.tsx:38:        if (!error && !ac.signal.aborted) setStats((data as any) || { user_id: userId, avg_score: 0, ratings_count: 0 }); src/components/hooks/useSwipeDismissRight.ts:143:      el.removeEventListener('pointerdown', onPointerDown as any); src/components/hooks/useSwipeDismissRight.ts:144:      el.removeEventListener('pointermove', onPointerMove as any); src/components/hooks/useSwipeDismissRight.ts:145:      el.removeEventListener('pointerup', onPointerUp as any); src/components/hooks/useSwipeDismissRight.ts:146:      el.removeEventListener('pointercancel', onPointerUp as any); src/components/hooks/useSwipeDismissRight.ts:147:      el.removeEventListener('lostpointercapture', onPointerUp as any); src/lib/disputeApi.ts:224:    const behavior_id = (beh as any).id as number; src/lib/disputeApi.ts:285:      executor: (data as any).executor_votes || 0, src/lib/disputeApi.ts:286:      customer: (data as any).customer_votes || 0, src/lib/disputeApi.ts:287:      total: (data as any).total_votes || 0 src/lib/disputeApi.ts:316:      winner = executor > customer ? 'executor' : customer > executor ? 'customer' : null as any; src/lib/erc20.ts:11:  const anyE = ethers as any; src/lib/erc20.ts:23:  const code = (err && (err.code ?? err?.data?.code)) as any; src/lib/erc20.ts:45:  const erc20 = new (ethers as any).Contract(token, ERC20_ABI, provider); src/lib/erc20.ts:62:  const erc20R = new (ethers as any).Contract(token, ERC20_ABI, provider); src/lib/erc20.ts:65:  if ((current as any).gte?.(amount) || (typeof current === "bigint" && current >= (amount as any))) { src/lib/erc20.ts:69:  const erc20W = new (ethers as any).Contract(token, ERC20_ABI, signer); src/lib/erc20.ts:70:  const toApprove = approveMax ? ("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff" as any) : amount; src/lib/escrowConfirmGuard.ts:33:  const web3 = new ethers.providers.Web3Provider(provider as any, "any"); src/lib/escrowContract.ts:62:  const web3   = new ethers.providers.Web3Provider(provider as any, 'any'); src/lib/escrowContract.ts:79:    await eip1193.request({ method: 'wallet_switchEthereumChain', params: [{ chainId: CHAIN_ID_HEX }] as any }); src/lib/escrowContract.ts:142:  return (data as any)?.wallet ?? null; src/lib/escrowContract.ts:158:  const refWallet = (direct.data as any)?.referrer_wallet as string | null | undefined; src/lib/escrowContract.ts:159:  const refOwner  = (direct.data as any)?.referred_by as string | null | undefined; src/lib/escrowContract.ts:170:    return (ownerRow as any)?.wallet ?? null; src/lib/escrowContract.ts:251:  const exId     = executorId ?? (sc as any)?.executor_id ?? undefined; src/lib/escrowContract.ts:252:  const custId   = (sc as any)?.creator_id ?? undefined; src/lib/escrowContract.ts:253:  const date     = (sc as any)?.date ?? null; src/lib/escrowContract.ts:254:  const time     = (sc as any)?.time ?? null; src/lib/escrowContract.ts:255:  const execUnix = executionTime ?? toUnixSeconds(date ?? undefined, time ?? undefined, (sc as any)?.execution_time ?? null); src/lib/escrowContract.ts:282:    await (c as any).callStatic.lockFunds( src/lib/escrowContract.ts:293:    gas = await (c as any).estimateGas.lockFunds( src/lib/escrowContract.ts:303:  const tx = await (c as any).lockFunds( src/lib/escrowContract.ts:317:  const tx = await (c as any).confirmCompletion(b32); src/lib/escrowContract.ts:328:  const tx = await (c as any).openDispute(b32); src/lib/escrowContract.ts:338:  const tx = await (c as any).vote(b32, forExecutor); src/lib/escrowContract.ts:348:  const tx = await (c as any).finalizeDispute(b32); src/lib/escrowContract.ts:357:  const deal = (await (c as any).getDeal(b32)) as DealTuple; src/lib/escrowContractDispute.ts:31:  const escrow = new ethers.Contract(addr ?? ESCROW_ADDRESS, disputeAbi, signer) as any; src/lib/escrowContractDispute.ts:43:  const escrow = new ethers.Contract(addr ?? ESCROW_ADDRESS, disputeAbi, signer) as any; src/lib/escrowMobile.ts:93:    const maybeLock = (escrowModule as any)?.lockFunds; src/lib/escrowMobile.ts:94:    const maybeOneClick = (escrowModule as any)?.quickOneClickSetup; src/lib/isMetaMaskBrowser.ts:13:    (navigator.platform === "MacIntel" && (navigator as any).maxTouchPoints > 1); src/lib/isMetaMaskBrowser.ts:17:    /MetaMaskMobile/i.test(ua) || /metamask/i.test((navigator as any).standalone ? "" : ua); src/lib/isMetaMaskBrowser.ts:20:  const hasEthereum = typeof (window as any).ethereum !== "undefined"; src/lib/isMetaMaskBrowser.ts:21:  const isMMFlag = !!(hasEthereum && (window as any).ethereum.isMetaMask); src/lib/lighthouseUpload.ts:36:    const cid = (res as any)?.data?.Hash as string | undefined; src/lib/metamaskGuard.ts:17:      const eth = (window as any).ethereum; src/lib/metamaskGuard.ts:46:  if ((window as any).ethereum) install(); src/lib/metamaskSdk.ts:21:  const fromEnv = (import.meta as any)?.env?.VITE_PUBLIC_APP_URL as string | undefined; src/lib/mmDeepLink.ts:26:    (import.meta as any)?.env?.VITE_PUBLIC_APP_URL?.replace(/^https?:\/\//, "") || src/lib/mobileWallet.ts:34:  const eth = (window as any).ethereum; src/lib/onEthereumReady.ts:7:  const w = window as any; src/lib/onEthereumReady.ts:17:    () => cb((window as any).ethereum), src/lib/onEthereumReady.ts:23:    if ((window as any).ethereum) cb((window as any).ethereum); src/lib/providerBridge.ts:92:  const web3 = new ethers.providers.Web3Provider(provider as any, 'any'); src/lib/pushNotifications.ts:37:  const hasMM = !!(window as any).ethereum?.isMetaMask; src/lib/pushNotifications.ts:65:      if (typeof (window as any).Audio !== 'undefined') { src/lib/realtimeNotifications.ts:176:        }, {} as any); src/lib/scenarioFormDraft.ts:147:    const supabase = (mod as any).supabase as { src/lib/wallet.ts:45:  const eth = (globalThis as any).ethereum as Eip1193Provider | undefined; src/lib/wallet.ts:82:                : Boolean((provider as any).session); src/lib/wallet.ts:94:            if (args.method === 'eth_requestAccounts' && res.length) return res as any; src/lib/wallet.ts:125:  (globalThis as any).ethereum = provider; src/lib/wallet.ts:221:  return Boolean(p && (p as any).isMetaMask); src/lib/web3.ts:67:  const anyWin = window as any; src/lib/web3.ts:85:    return new ethers.providers.Web3Provider(_sdkProvider as any, 'any'); src/lib/web3.ts:94:  const ethereum = (provider as any).provider || (window as any).ethereum; src/lib/web3.ts:100:  const ethereum = (provider as any).provider || (window as any).ethereum; src/main.tsx:8:if (import.meta.env.DEV) (window as any).ethers = ethers; src/main.tsx:28:  console.error("[GlobalError]", (e as any).error ?? (e as any).message) src/main.tsx:31:  console.error("[UnhandledRejection]", (e as any).reason) src/main.tsx:57:  const ver = (import.meta.env as any).VITE_APP_VERSION ?? Date.now();

### PATTERN: innerHTML\s*=
src/components/ScenarioLocation.tsx:80:    style.innerHTML = `
